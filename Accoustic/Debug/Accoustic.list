
Accoustic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006288  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006420  08006420  00007420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006820  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018a90  20000010  08006830  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018aa0  08006830  00008aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d29  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a60  00000000  00000000  0001ad69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d22  00000000  00000000  0001e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018527  00000000  00000000  0001f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013afe  00000000  00000000  00037ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c56e  00000000  00000000  0004b5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  000e7b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000ec4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006408 	.word	0x08006408

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006408 	.word	0x08006408

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <AskModem_Init>:
#include "ask_modem.h"
#include <math.h>
#include "uart_protocol.h"
#include <stdlib.h>

void AskModem_Init(AskModem* modem, uint16_t sample_per_symbol, float f0, float fs) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b7e:	edc7 0a00 	vstr	s1, [r7]
 8000b82:	817b      	strh	r3, [r7, #10]
    modem->samples_per_symbol = sample_per_symbol;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	897a      	ldrh	r2, [r7, #10]
 8000b88:	801a      	strh	r2, [r3, #0]
    modem->f0 = f0;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
    modem->fs = fs;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	609a      	str	r2, [r3, #8]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	0000      	movs	r0, r0
 8000ba4:	0000      	movs	r0, r0
	...

08000ba8 <AskModem_Modulate>:

void AskModem_Modulate(UART_HandleTypeDef* huart, AskModem* modem, const uint8_t* bits, uint16_t bit_len, AskRingBuffer* outbuf, float amplitude) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6178      	str	r0, [r7, #20]
 8000bb0:	6139      	str	r1, [r7, #16]
 8000bb2:	60fa      	str	r2, [r7, #12]
 8000bb4:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb8:	817b      	strh	r3, [r7, #10]
    uint32_t global_sample = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint16_t i = 0; i < bit_len; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000bc2:	e064      	b.n	8000c8e <AskModem_Modulate+0xe6>
        uint8_t bit = bits[i];
 8000bc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000bd4:	e053      	b.n	8000c7e <AskModem_Modulate+0xd6>
            float t = (float)global_sample / modem->fs;
 8000bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bea:	edc7 7a08 	vstr	s15, [r7, #32]
            float carrier = cosf(2 * M_PI * modem->f0 * t);
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd7e 	bl	80006f4 <__aeabi_f2d>
 8000bf8:	a32b      	add	r3, pc, #172	@ (adr r3, 8000ca8 <AskModem_Modulate+0x100>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff faeb 	bl	80001d8 <__aeabi_dmul>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4614      	mov	r4, r2
 8000c08:	461d      	mov	r5, r3
 8000c0a:	6a38      	ldr	r0, [r7, #32]
 8000c0c:	f7ff fd72 	bl	80006f4 <__aeabi_f2d>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4620      	mov	r0, r4
 8000c16:	4629      	mov	r1, r5
 8000c18:	f7ff fade 	bl	80001d8 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fdbe 	bl	80007a4 <__aeabi_d2f>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	ee00 3a10 	vmov	s0, r3
 8000c2e:	f004 febd 	bl	80059ac <cosf>
 8000c32:	ed87 0a07 	vstr	s0, [r7, #28]
            float sample = bit ? (amplitude * carrier) : 0.0f;
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <AskModem_Modulate+0xa4>
 8000c3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4a:	e001      	b.n	8000c50 <AskModem_Modulate+0xa8>
 8000c4c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8000ca0 <AskModem_Modulate+0xf8>
 8000c50:	edc7 7a06 	vstr	s15, [r7, #24]
            AskRingBuffer_Put(outbuf, (int16_t)(sample * 2047.0f));
 8000c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c58:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000ca4 <AskModem_Modulate+0xfc>
 8000c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c64:	ee17 3a90 	vmov	r3, s15
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c6e:	f000 f8c3 	bl	8000df8 <AskRingBuffer_Put>
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000c72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c74:	3301      	adds	r3, #1
 8000c76:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3a6      	bcc.n	8000bd6 <AskModem_Modulate+0x2e>
    for (uint16_t i = 0; i < bit_len; i++) {
 8000c88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000c8e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000c90:	897b      	ldrh	r3, [r7, #10]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d396      	bcc.n	8000bc4 <AskModem_Modulate+0x1c>
        }
    }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	44ffe000 	.word	0x44ffe000
 8000ca8:	54442d18 	.word	0x54442d18
 8000cac:	401921fb 	.word	0x401921fb

08000cb0 <AskModem_Demodulate>:

void AskModem_Demodulate(UART_HandleTypeDef* huart, AskModem* modem, AskRingBuffer* inbuf, uint8_t* bits_out, uint16_t* bit_len) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
    *bit_len = 0;
 8000cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]

    while (AskRingBuffer_Available(inbuf) >= modem->samples_per_symbol) {
 8000cc4:	e036      	b.n	8000d34 <AskModem_Demodulate+0x84>
        uint32_t energy = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]

        for (uint16_t i = 0; i < modem->samples_per_symbol; i++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	837b      	strh	r3, [r7, #26]
 8000cce:	e011      	b.n	8000cf4 <AskModem_Demodulate+0x44>
            int16_t sample = AskRingBuffer_Get(inbuf);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f8c1 	bl	8000e58 <AskRingBuffer_Get>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	827b      	strh	r3, [r7, #18]
            energy += abs(sample);
 8000cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bfb8      	it	lt
 8000ce2:	425b      	neglt	r3, r3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	4413      	add	r3, r2
 8000cec:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < modem->samples_per_symbol; i++) {
 8000cee:	8b7b      	ldrh	r3, [r7, #26]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	837b      	strh	r3, [r7, #26]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	8b7a      	ldrh	r2, [r7, #26]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3e8      	bcc.n	8000cd0 <AskModem_Demodulate+0x20>
        }

        uint32_t threshold = modem->samples_per_symbol * 500;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]

        bits_out[*bit_len] = (energy > threshold) ? 1 : 0;
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	bf8c      	ite	hi
 8000d16:	2301      	movhi	r3, #1
 8000d18:	2300      	movls	r3, #0
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	440b      	add	r3, r1
 8000d26:	701a      	strb	r2, [r3, #0]
        (*bit_len)++;
 8000d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d32:	801a      	strh	r2, [r3, #0]
    while (AskRingBuffer_Available(inbuf) >= modem->samples_per_symbol) {
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f8c1 	bl	8000ebc <AskRingBuffer_Available>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d2c0      	bcs.n	8000cc6 <AskModem_Demodulate+0x16>
    }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <AskRingBuffer_Init>:
	    bits_out[*bit_len] = (avg > 2200.0f) ? 1 : 0;
	    (*bit_len)++;
	}
}*/

void AskRingBuffer_Init(AskRingBuffer* rb) {
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
    rb->head = rb->tail = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 8000d5e:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 8000d68:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <AskRingBuffer_IsFull>:

uint8_t AskRingBuffer_IsFull(const AskRingBuffer* rb) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    return ((rb->head + 1) % ASK_RINGBUF_SIZE) == rb->tail;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000d86:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <AskRingBuffer_IsFull+0x48>)
 8000d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8000d92:	0b5a      	lsrs	r2, r3, #13
 8000d94:	4613      	mov	r3, r2
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	1aca      	subs	r2, r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000da4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	88888889 	.word	0x88888889

08000dc4 <AskRingBuffer_IsEmpty>:

uint8_t AskRingBuffer_IsEmpty(const AskRingBuffer* rb) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    return rb->head == rb->tail;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000dd2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000ddc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000de0:	429a      	cmp	r2, r3
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <AskRingBuffer_Put>:

void AskRingBuffer_Put(AskRingBuffer* rb, int16_t value) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
    if (!AskRingBuffer_IsFull(rb)) {
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffb7 	bl	8000d78 <AskRingBuffer_IsFull>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11c      	bne.n	8000e4a <AskRingBuffer_Put+0x52>
        rb->buf[rb->head] = value;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000e16:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8879      	ldrh	r1, [r7, #2]
 8000e1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        rb->head = (rb->head + 1) % ASK_RINGBUF_SIZE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000e28:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8000e2c:	1c59      	adds	r1, r3, #1
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <AskRingBuffer_Put+0x5c>)
 8000e30:	fba3 2301 	umull	r2, r3, r3, r1
 8000e34:	0b5a      	lsrs	r2, r3, #13
 8000e36:	4613      	mov	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	029b      	lsls	r3, r3, #10
 8000e3e:	1aca      	subs	r2, r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000e46:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    }
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	88888889 	.word	0x88888889

08000e58 <AskRingBuffer_Get>:

int16_t AskRingBuffer_Get(AskRingBuffer* rb) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    int16_t val = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	81fb      	strh	r3, [r7, #14]
    if (!AskRingBuffer_IsEmpty(rb)) {
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffad 	bl	8000dc4 <AskRingBuffer_IsEmpty>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d11c      	bne.n	8000eaa <AskRingBuffer_Get+0x52>
        val = rb->buf[rb->tail];
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000e76:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e80:	81fb      	strh	r3, [r7, #14]
        rb->tail = (rb->tail + 1) % ASK_RINGBUF_SIZE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000e88:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000e8c:	1c59      	adds	r1, r3, #1
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <AskRingBuffer_Get+0x60>)
 8000e90:	fba3 2301 	umull	r2, r3, r3, r1
 8000e94:	0b5a      	lsrs	r2, r3, #13
 8000e96:	4613      	mov	r3, r2
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	1aca      	subs	r2, r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000ea6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
    return val;
 8000eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	88888889 	.word	0x88888889

08000ebc <AskRingBuffer_Available>:

uint32_t AskRingBuffer_Available(const AskRingBuffer* rb) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000eca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000ed4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d30b      	bcc.n	8000ef4 <AskRingBuffer_Available+0x38>
        return rb->head - rb->tail;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000ee2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000eec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	e00c      	b.n	8000f0e <AskRingBuffer_Available+0x52>
    else
        return ASK_RINGBUF_SIZE - (rb->tail - rb->head);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000efa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000f04:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <MCP4922_Select>:
static IQTransmitter iq_tx;

#define MCP4922_CS_GPIO GPIOA
#define MCP4922_CS_PIN GPIO_PIN_4

static void MCP4922_Select(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2110      	movs	r1, #16
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <MCP4922_Select+0x14>)
 8000f26:	f002 fc81 	bl	800382c <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000

08000f34 <MCP4922_Unselect>:

static void MCP4922_Unselect(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <MCP4922_Unselect+0x14>)
 8000f3e:	f002 fc75 	bl	800382c <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <MCP4922_Pack>:

static uint16_t MCP4922_Pack(uint8_t channel, uint16_t val12) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	80bb      	strh	r3, [r7, #4]
    val12 &= 0x0FFF; // 12 bits
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f62:	80bb      	strh	r3, [r7, #4]
    uint16_t ctrl = (channel ? 0xB000 : 0x3000); // Channel B : 1, A : 0, Gain=1x, buffered
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <MCP4922_Pack+0x24>
 8000f6a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000f6e:	e001      	b.n	8000f74 <MCP4922_Pack+0x28>
 8000f70:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f74:	81fb      	strh	r3, [r7, #14]
    return ctrl | val12;
 8000f76:	89fa      	ldrh	r2, [r7, #14]
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <IQTransmitter_InitFromBuffer>:

void IQTransmitter_InitFromBuffer(const int16_t* signal, uint16_t length) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
    iq_tx.buffer = signal;
 8000f98:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <IQTransmitter_InitFromBuffer+0x30>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
    iq_tx.length = length;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <IQTransmitter_InitFromBuffer+0x30>)
 8000fa2:	6053      	str	r3, [r2, #4]
    iq_tx.index = 0;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <IQTransmitter_InitFromBuffer+0x30>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    iq_tx.active = 0;
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <IQTransmitter_InitFromBuffer+0x30>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	731a      	strb	r2, [r3, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	2000002c 	.word	0x2000002c

08000fc0 <IQTransmitter_Start>:


void IQTransmitter_Start(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    iq_tx.active = 1;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <IQTransmitter_Start+0x1c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	731a      	strb	r2, [r3, #12]
    iq_tx.index = 0;
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <IQTransmitter_Start+0x1c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    HAL_TIM_Base_Start_IT(&htim2);
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <IQTransmitter_Start+0x20>)
 8000fd2:	f003 fc0b 	bl	80047ec <HAL_TIM_Base_Start_IT>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000002c 	.word	0x2000002c
 8000fe0:	2000019c 	.word	0x2000019c

08000fe4 <IQTransmitter_Stop>:

void IQTransmitter_Stop(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
    iq_tx.active = 0;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <IQTransmitter_Stop+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	731a      	strb	r2, [r3, #12]
    HAL_TIM_Base_Stop_IT(&htim2);
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <IQTransmitter_Stop+0x50>)
 8000ff2:	f003 fc5d 	bl	80048b0 <HAL_TIM_Base_Stop_IT>

    //Forcer la sortie à 0V
    uint16_t spi_word = MCP4922_Pack(0, 0); // canal A, valeur 0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffa7 	bl	8000f4c <MCP4922_Pack>
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
    uint8_t spi_buf[2] = { (spi_word >> 8) & 0xFF, spi_word & 0xFF };
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	713b      	strb	r3, [r7, #4]
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	717b      	strb	r3, [r7, #5]

    MCP4922_Select();
 8001012:	f7ff ff83 	bl	8000f1c <MCP4922_Select>
    HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 8001016:	1d39      	adds	r1, r7, #4
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2202      	movs	r2, #2
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <IQTransmitter_Stop+0x54>)
 8001020:	f003 f919 	bl	8004256 <HAL_SPI_Transmit>
    MCP4922_Unselect();
 8001024:	f7ff ff86 	bl	8000f34 <MCP4922_Unselect>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000002c 	.word	0x2000002c
 8001034:	2000019c 	.word	0x2000019c
 8001038:	200000e4 	.word	0x200000e4

0800103c <HAL_TIM_PeriodElapsedCallback>:
            IQTransmitter_Stop();
        }
    }
}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && iq_tx.active) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800104c:	d147      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0xa2>
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001050:	7b1b      	ldrb	r3, [r3, #12]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d042      	beq.n	80010de <HAL_TIM_PeriodElapsedCallback+0xa2>
        if (iq_tx.index < iq_tx.length) {
 8001058:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d23a      	bcs.n	80010da <HAL_TIM_PeriodElapsedCallback+0x9e>
        	int16_t sample = iq_tx.buffer[iq_tx.index++];
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	481e      	ldr	r0, [pc, #120]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001070:	6081      	str	r1, [r0, #8]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	81fb      	strh	r3, [r7, #14]
        	uint16_t val = (sample + 2048 > 4095) ? 4095 : (sample + 2048 < 0 ? 0 : sample + 2048);
 800107a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001082:	da0b      	bge.n	800109c <HAL_TIM_PeriodElapsedCallback+0x60>
 8001084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001088:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800108c:	db04      	blt.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001094:	b29b      	uxth	r3, r3
 8001096:	e003      	b.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001098:	2300      	movs	r3, #0
 800109a:	e001      	b.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x64>
 800109c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80010a0:	81bb      	strh	r3, [r7, #12]

            uint16_t spi_word = MCP4922_Pack(0, val); // voie A uniquement
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff50 	bl	8000f4c <MCP4922_Pack>
 80010ac:	4603      	mov	r3, r0
 80010ae:	817b      	strh	r3, [r7, #10]

            uint8_t spi_buf[2];
            spi_buf[0] = (spi_word >> 8) & 0xFF;
 80010b0:	897b      	ldrh	r3, [r7, #10]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	723b      	strb	r3, [r7, #8]
            spi_buf[1] = spi_word & 0xFF;
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]

            MCP4922_Select();
 80010c0:	f7ff ff2c 	bl	8000f1c <MCP4922_Select>
            HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 80010c4:	f107 0108 	add.w	r1, r7, #8
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2202      	movs	r2, #2
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010d0:	f003 f8c1 	bl	8004256 <HAL_SPI_Transmit>
            MCP4922_Unselect();
 80010d4:	f7ff ff2e 	bl	8000f34 <MCP4922_Unselect>
        } else {
            IQTransmitter_Stop();
        }
    }
}
 80010d8:	e001      	b.n	80010de <HAL_TIM_PeriodElapsedCallback+0xa2>
            IQTransmitter_Stop();
 80010da:	f7ff ff83 	bl	8000fe4 <IQTransmitter_Stop>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	200000e4 	.word	0x200000e4

080010f0 <IQTransmitter_IsActive>:
void Enable_TIM2_Interrupt(void) {
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

uint8_t IQTransmitter_IsActive(void) {
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
    return iq_tx.active;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <IQTransmitter_IsActive+0x14>)
 80010f6:	7b1b      	ldrb	r3, [r3, #12]
 80010f8:	b2db      	uxtb	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	2000002c 	.word	0x2000002c

08001108 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile uint8_t adc_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <HAL_ADC_ConvCpltCallback+0x24>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d102      	bne.n	8001120 <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_ADC_ConvCpltCallback+0x28>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
    }
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40012000 	.word	0x40012000
 8001130:	20018a98 	.word	0x20018a98

08001134 <OnFrameReceived>:


void OnFrameReceived(UartProtocol* proto, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	817b      	strh	r3, [r7, #10]
 8001142:	4613      	mov	r3, r2
 8001144:	813b      	strh	r3, [r7, #8]
    if (cmd == CMD_QPSK_MOD_DEMOD) {
 8001146:	897b      	ldrh	r3, [r7, #10]
 8001148:	f241 0210 	movw	r2, #4112	@ 0x1010
 800114c:	4293      	cmp	r3, r2
 800114e:	d147      	bne.n	80011e0 <OnFrameReceived+0xac>
        AskRingBuffer_Init(&tx_ringbuf);
 8001150:	4825      	ldr	r0, [pc, #148]	@ (80011e8 <OnFrameReceived+0xb4>)
 8001152:	f7ff fdfc 	bl	8000d4e <AskRingBuffer_Init>
        AskRingBuffer_Init(&rx_ringbuf);
 8001156:	4825      	ldr	r0, [pc, #148]	@ (80011ec <OnFrameReceived+0xb8>)
 8001158:	f7ff fdf9 	bl	8000d4e <AskRingBuffer_Init>
        AskModem_Init(&ask_modem, samples_per_symbol, 40000.0f, SAMPLE_RATE_HZ);
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <OnFrameReceived+0xbc>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80011f4 <OnFrameReceived+0xc0>
 8001164:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80011f8 <OnFrameReceived+0xc4>
 8001168:	4619      	mov	r1, r3
 800116a:	4824      	ldr	r0, [pc, #144]	@ (80011fc <OnFrameReceived+0xc8>)
 800116c:	f7ff fd00 	bl	8000b70 <AskModem_Init>
        if (len > 4) len = 4;
 8001170:	893b      	ldrh	r3, [r7, #8]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d901      	bls.n	800117a <OnFrameReceived+0x46>
 8001176:	2304      	movs	r3, #4
 8001178:	813b      	strh	r3, [r7, #8]
        AskModem_Modulate(&huart2, &ask_modem, payload, len, &tx_ringbuf, 1.0f);
 800117a:	893b      	ldrh	r3, [r7, #8]
 800117c:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <OnFrameReceived+0xb4>)
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	491d      	ldr	r1, [pc, #116]	@ (80011fc <OnFrameReceived+0xc8>)
 8001188:	481d      	ldr	r0, [pc, #116]	@ (8001200 <OnFrameReceived+0xcc>)
 800118a:	f7ff fd0d 	bl	8000ba8 <AskModem_Modulate>

        tx_signal_len = 0;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <OnFrameReceived+0xd0>)
 8001190:	2200      	movs	r2, #0
 8001192:	801a      	strh	r2, [r3, #0]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 8001194:	e00e      	b.n	80011b4 <OnFrameReceived+0x80>
            tx_signal[tx_signal_len++] = AskRingBuffer_Get(&tx_ringbuf);
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <OnFrameReceived+0xd0>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	b291      	uxth	r1, r2
 800119e:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <OnFrameReceived+0xd0>)
 80011a0:	8011      	strh	r1, [r2, #0]
 80011a2:	461c      	mov	r4, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	@ (80011e8 <OnFrameReceived+0xb4>)
 80011a6:	f7ff fe57 	bl	8000e58 <AskRingBuffer_Get>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <OnFrameReceived+0xd4>)
 80011b0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <OnFrameReceived+0xb4>)
 80011b6:	f7ff fe05 	bl	8000dc4 <AskRingBuffer_IsEmpty>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <OnFrameReceived+0x96>
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <OnFrameReceived+0xd0>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 80011c8:	d3e5      	bcc.n	8001196 <OnFrameReceived+0x62>
        }

        IQTransmitter_InitFromBuffer(tx_signal, tx_signal_len);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <OnFrameReceived+0xd0>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <OnFrameReceived+0xd4>)
 80011d2:	f7ff fedb 	bl	8000f8c <IQTransmitter_InitFromBuffer>
        /*for (int i = 0; i < tx_signal_len; i++) {
            SendIQFrame(&huart2, tx_signal[i], i);
        }*/
        IQTransmitter_Start();
 80011d6:	f7ff fef3 	bl	8000fc0 <IQTransmitter_Start>


        // On laisse le main() gérer la suite
        ready_to_demodulate = 1;
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <OnFrameReceived+0xd8>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
    }
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20009a88 	.word	0x20009a88
 80011ec:	20011290 	.word	0x20011290
 80011f0:	20000000 	.word	0x20000000
 80011f4:	486a6000 	.word	0x486a6000
 80011f8:	471c4000 	.word	0x471c4000
 80011fc:	20009a7c 	.word	0x20009a7c
 8001200:	2000022c 	.word	0x2000022c
 8001204:	20009a78 	.word	0x20009a78
 8001208:	20002278 	.word	0x20002278
 800120c:	20002274 	.word	0x20002274

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0d2      	sub	sp, #328	@ 0x148
 8001214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001216:	f000 ff4d 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f8df 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121e:	f000 faaf 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 8001222:	f000 fa85 	bl	8001730 <MX_DMA_Init>
  MX_TIM2_Init();
 8001226:	f000 f9c1 	bl	80015ac <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800122a:	f000 fa57 	bl	80016dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800122e:	f000 f985 	bl	800153c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001232:	f000 f931 	bl	8001498 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001236:	f000 fa05 	bl	8001644 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UartProtocol_Init(&proto, OnFrameReceived);
 800123a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800123e:	495e      	ldr	r1, [pc, #376]	@ (80013b8 <main+0x1a8>)
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fd60 	bl	8001d06 <UartProtocol_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t c;

  // Démarrage du Timer (doit être fait avant l’ADC)
  HAL_TIM_Base_Start(&htim3);
 8001246:	485d      	ldr	r0, [pc, #372]	@ (80013bc <main+0x1ac>)
 8001248:	f003 fa76 	bl	8004738 <HAL_TIM_Base_Start>

  while (1)
  {
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 800124c:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8001250:	230a      	movs	r3, #10
 8001252:	2201      	movs	r2, #1
 8001254:	485a      	ldr	r0, [pc, #360]	@ (80013c0 <main+0x1b0>)
 8001256:	f003 ffb6 	bl	80051c6 <HAL_UART_Receive>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10a      	bne.n	8001276 <main+0x66>
          UartProtocol_ParseByte(&proto, c);
 8001260:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001264:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fd69 	bl	8001d48 <UartProtocol_ParseByte>
      }

      if (ready_to_demodulate && !IQTransmitter_IsActive()) {
 8001276:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <main+0x1b4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0e5      	beq.n	800124c <main+0x3c>
 8001280:	f7ff ff36 	bl	80010f0 <IQTransmitter_IsActive>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1e0      	bne.n	800124c <main+0x3c>
          ready_to_demodulate = 0;
 800128a:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <main+0x1b4>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
          adc_ready = 0;
 8001290:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <main+0x1b8>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]

          HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN);
 8001296:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800129a:	494c      	ldr	r1, [pc, #304]	@ (80013cc <main+0x1bc>)
 800129c:	484c      	ldr	r0, [pc, #304]	@ (80013d0 <main+0x1c0>)
 800129e:	f001 f8f3 	bl	8002488 <HAL_ADC_Start_DMA>
          while (!adc_ready) {
 80012a2:	e002      	b.n	80012aa <main+0x9a>
              HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 ff77 	bl	8002198 <HAL_Delay>
          while (!adc_ready) {
 80012aa:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <main+0x1b8>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f7      	beq.n	80012a4 <main+0x94>
          }

          AskRingBuffer_Init(&rx_ringbuf);
 80012b4:	4847      	ldr	r0, [pc, #284]	@ (80013d4 <main+0x1c4>)
 80012b6:	f7ff fd4a 	bl	8000d4e <AskRingBuffer_Init>
          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 80012c0:	e00e      	b.n	80012e0 <main+0xd0>
              AskRingBuffer_Put(&rx_ringbuf, adc_buffer[i]);
 80012c2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80012c6:	4a41      	ldr	r2, [pc, #260]	@ (80013cc <main+0x1bc>)
 80012c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	4840      	ldr	r0, [pc, #256]	@ (80013d4 <main+0x1c4>)
 80012d2:	f7ff fd91 	bl	8000df8 <AskRingBuffer_Put>
          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 80012d6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80012da:	3301      	adds	r3, #1
 80012dc:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 80012e0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012e8:	d3eb      	bcc.n	80012c2 <main+0xb2>
          }

          uint8_t bits_out[ASK_MAX_BITS];
          uint16_t len_out = 0;
 80012ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012f2:	2200      	movs	r2, #0
 80012f4:	801a      	strh	r2, [r3, #0]
          AskModem_Demodulate(&huart2, &ask_modem, &rx_ringbuf, bits_out, &len_out);
 80012f6:	463a      	mov	r2, r7
 80012f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	4a34      	ldr	r2, [pc, #208]	@ (80013d4 <main+0x1c4>)
 8001302:	4935      	ldr	r1, [pc, #212]	@ (80013d8 <main+0x1c8>)
 8001304:	482e      	ldr	r0, [pc, #184]	@ (80013c0 <main+0x1b0>)
 8001306:	f7ff fcd3 	bl	8000cb0 <AskModem_Demodulate>

          // Regroupe les bits 8 par 8 pour reconstruire les caractères
          uint8_t decoded_chars[ASK_MAX_BITS / 8] = {0};
 800130a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800130e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
          uint16_t num_chars = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

          for (uint16_t i = 0; i + 7 < len_out; i += 8) {
 800131c:	2300      	movs	r3, #0
 800131e:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 8001322:	e034      	b.n	800138e <main+0x17e>
              uint8_t byte = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
              for (uint8_t b = 0; b < 8; b++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8001330:	e017      	b.n	8001362 <main+0x152>
                  byte = (byte << 1) | bits_out[i + b];  // MSB-first
 8001332:	f997 3139 	ldrsb.w	r3, [r7, #313]	@ 0x139
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b25a      	sxtb	r2, r3
 800133a:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800133e:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8001342:	440b      	add	r3, r1
 8001344:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8001348:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 800134c:	5ccb      	ldrb	r3, [r1, r3]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
              for (uint8_t b = 0; b < 8; b++) {
 8001358:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 800135c:	3301      	adds	r3, #1
 800135e:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8001362:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8001366:	2b07      	cmp	r3, #7
 8001368:	d9e3      	bls.n	8001332 <main+0x122>
              }
              decoded_chars[num_chars++] = byte;
 800136a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	f8a7 213c 	strh.w	r2, [r7, #316]	@ 0x13c
 8001374:	4619      	mov	r1, r3
 8001376:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800137a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800137e:	f897 2139 	ldrb.w	r2, [r7, #313]	@ 0x139
 8001382:	545a      	strb	r2, [r3, r1]
          for (uint16_t i = 0; i + 7 < len_out; i += 8) {
 8001384:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8001388:	3308      	adds	r3, #8
 800138a:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800138e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8001392:	3307      	adds	r3, #7
 8001394:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001398:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	4293      	cmp	r3, r2
 80013a0:	dbc0      	blt.n	8001324 <main+0x114>
          }

          // Envoie à l'interface PC
          UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, num_chars, decoded_chars);
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	f8b7 213c 	ldrh.w	r2, [r7, #316]	@ 0x13c
 80013aa:	f249 0110 	movw	r1, #36880	@ 0x9010
 80013ae:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <main+0x1b0>)
 80013b0:	f000 fd92 	bl	8001ed8 <UartProtocol_SendFrame>
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 80013b4:	e74a      	b.n	800124c <main+0x3c>
 80013b6:	bf00      	nop
 80013b8:	08001135 	.word	0x08001135
 80013bc:	200001e4 	.word	0x200001e4
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	20002274 	.word	0x20002274
 80013c8:	20018a98 	.word	0x20018a98
 80013cc:	20000274 	.word	0x20000274
 80013d0:	2000003c 	.word	0x2000003c
 80013d4:	20011290 	.word	0x20011290
 80013d8:	20009a7c 	.word	0x20009a7c

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	@ 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fab2 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xb4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xb4>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xb4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <SystemClock_Config+0xb8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <SystemClock_Config+0xb8>)
 8001426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <SystemClock_Config+0xb8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fa21 	bl	8003894 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001458:	f000 f9ea 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fc84 	bl	8003d84 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001482:	f000 f9d5 	bl	8001830 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	@ 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ac:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <MX_ADC1_Init+0xa0>)
 80014ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014fc:	f000 fe70 	bl	80021e0 <HAL_ADC_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001506:	f000 f993 	bl	8001830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <MX_ADC1_Init+0x9c>)
 800151c:	f001 f8c6 	bl	80026ac <HAL_ADC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001526:	f000 f983 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000003c 	.word	0x2000003c
 8001538:	40012000 	.word	0x40012000

0800153c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001542:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <MX_SPI1_Init+0x6c>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800155a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_SPI1_Init+0x68>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_SPI1_Init+0x68>)
 800156a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001572:	2208      	movs	r2, #8
 8001574:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_SPI1_Init+0x68>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_SPI1_Init+0x68>)
 800158a:	220a      	movs	r2, #10
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_SPI1_Init+0x68>)
 8001590:	f002 fdd8 	bl	8004144 <HAL_SPI_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 f949 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000e4 	.word	0x200000e4
 80015a8:	40013000 	.word	0x40013000

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (84000000 / SAMPLE_RATE_HZ) - 1;;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015de:	f240 125d 	movw	r2, #349	@ 0x15d
 80015e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f0:	4813      	ldr	r0, [pc, #76]	@ (8001640 <MX_TIM2_Init+0x94>)
 80015f2:	f003 f851 	bl	8004698 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015fc:	f000 f918 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4619      	mov	r1, r3
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <MX_TIM2_Init+0x94>)
 800160e:	f003 fa6e 	bl	8004aee <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001618:	f000 f90a 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800161c:	2320      	movs	r3, #32
 800161e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_TIM2_Init+0x94>)
 800162a:	f003 fc6f 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001634:	f000 f8fc 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000019c 	.word	0x2000019c

08001644 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <MX_TIM3_Init+0x90>)
 8001662:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <MX_TIM3_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8001666:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <MX_TIM3_Init+0x90>)
 8001668:	220c      	movs	r2, #12
 800166a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_TIM3_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <MX_TIM3_Init+0x90>)
 8001674:	2209      	movs	r2, #9
 8001676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_TIM3_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <MX_TIM3_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001684:	4813      	ldr	r0, [pc, #76]	@ (80016d4 <MX_TIM3_Init+0x90>)
 8001686:	f003 f807 	bl	8004698 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001690:	f000 f8ce 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <MX_TIM3_Init+0x90>)
 80016a2:	f003 fa24 	bl	8004aee <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80016ac:	f000 f8c0 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016b0:	2320      	movs	r3, #32
 80016b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_TIM3_Init+0x90>)
 80016be:	f003 fc25 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80016c8:	f000 f8b2 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001e4 	.word	0x200001e4
 80016d8:	40000400 	.word	0x40000400

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART2_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001714:	f003 fc7c 	bl	8005010 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f000 f887 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000022c 	.word	0x2000022c
 800172c:	40004400 	.word	0x40004400

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_DMA_Init+0x4c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <MX_DMA_Init+0x4c>)
 8001740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <MX_DMA_Init+0x4c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2038      	movs	r0, #56	@ 0x38
 8001758:	f001 fb3d 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800175c:	2038      	movs	r0, #56	@ 0x38
 800175e:	f001 fb56 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	203a      	movs	r0, #58	@ 0x3a
 8001768:	f001 fb35 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800176c:	203a      	movs	r0, #58	@ 0x3a
 800176e:	f001 fb4e 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_GPIO_Init+0xa8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <MX_GPIO_Init+0xa8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <MX_GPIO_Init+0xa8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017b2:	2320      	movs	r3, #32
 80017b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4818      	ldr	r0, [pc, #96]	@ (800182c <MX_GPIO_Init+0xac>)
 80017ca:	f001 feab 	bl	8003524 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ce:	2340      	movs	r3, #64	@ 0x40
 80017d0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_GPIO_Init+0xac>)
 80017da:	f001 fea3 	bl	8003524 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_GPIO_Init+0xa8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <MX_GPIO_Init+0xa8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_GPIO_Init+0xa8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2110      	movs	r1, #16
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <MX_GPIO_Init+0xac>)
 8001800:	f002 f814 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001804:	2310      	movs	r3, #16
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_GPIO_Init+0xac>)
 800181c:	f001 fe82 	bl	8003524 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 8001838:	2120      	movs	r1, #32
 800183a:	4804      	ldr	r0, [pc, #16]	@ (800184c <Error_Handler+0x1c>)
 800183c:	f002 f80f 	bl	800385e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8001840:	2064      	movs	r0, #100	@ 0x64
 8001842:	f000 fca9 	bl	8002198 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 8001846:	bf00      	nop
 8001848:	e7f6      	b.n	8001838 <Error_Handler+0x8>
 800184a:	bf00      	nop
 800184c:	40020000 	.word	0x40020000

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a33      	ldr	r2, [pc, #204]	@ (800198c <HAL_ADC_MspInit+0xec>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d160      	bne.n	8001984 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a31      	ldr	r2, [pc, #196]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_ADC_MspInit+0xf0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4821      	ldr	r0, [pc, #132]	@ (8001994 <HAL_ADC_MspInit+0xf4>)
 800190e:	f001 fe09 	bl	8003524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_ADC_MspInit+0xfc>)
 8001916:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800192c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001948:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800194c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001950:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001958:	480f      	ldr	r0, [pc, #60]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800195a:	f001 fa73 	bl	8002e44 <HAL_DMA_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001964:	f7ff ff64 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 800196c:	639a      	str	r2, [r3, #56]	@ 0x38
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <HAL_ADC_MspInit+0xf8>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2012      	movs	r0, #18
 800197a:	f001 fa2c 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800197e:	2012      	movs	r0, #18
 8001980:	f001 fa45 	bl	8002e0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40012000 	.word	0x40012000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	20000084 	.word	0x20000084
 800199c:	40026410 	.word	0x40026410

080019a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <HAL_SPI_MspInit+0xe8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d15d      	bne.n	8001a7e <HAL_SPI_MspInit+0xde>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a30      	ldr	r2, [pc, #192]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a29      	ldr	r2, [pc, #164]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_SPI_MspInit+0xec>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019fa:	23a0      	movs	r3, #160	@ 0xa0
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	481e      	ldr	r0, [pc, #120]	@ (8001a90 <HAL_SPI_MspInit+0xf0>)
 8001a16:	f001 fd85 	bl	8003524 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a98 <HAL_SPI_MspInit+0xf8>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a26:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a2a:	2240      	movs	r2, #64	@ 0x40
 8001a2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a52:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a62:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a64:	f001 f9ee 	bl	8002e44 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001a6e:	f7ff fedf 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a76:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a78:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <HAL_SPI_MspInit+0xf4>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40013000 	.word	0x40013000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	2000013c 	.word	0x2000013c
 8001a98:	40026440 	.word	0x40026440

08001a9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d116      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	4a15      	ldr	r2, [pc, #84]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001abe:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201c      	movs	r0, #28
 8001ad0:	f001 f981 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad4:	201c      	movs	r0, #28
 8001ad6:	f001 f99a 	bl	8002e0e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ada:	e012      	b.n	8001b02 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_TIM_Base_MspInit+0x74>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_TIM_Base_MspInit+0x70>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40000400 	.word	0x40000400

08001b14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <HAL_UART_MspInit+0x84>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12b      	bne.n	8001b8e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_UART_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_UART_MspInit+0x8c>)
 8001b8a:	f001 fccb 	bl	8003524 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 faad 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <ADC_IRQHandler+0x10>)
 8001c0a:	f000 fb2c 	bl	8002266 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000003c 	.word	0x2000003c

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f002 fe76 	bl	800490e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000019c 	.word	0x2000019c

08001c2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA2_Stream0_IRQHandler+0x10>)
 8001c32:	f001 fa0d 	bl	8003050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000084 	.word	0x20000084

08001c40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA2_Stream2_IRQHandler+0x10>)
 8001c46:	f001 fa03 	bl	8003050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000013c 	.word	0x2000013c

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <CalcChecksum>:

#include "uart_protocol.h"
#include "stm32f4xx_hal.h"
#include "CMD.h"

static uint8_t CalcChecksum(uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	603a      	str	r2, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	460b      	mov	r3, r1
 8001c86:	80bb      	strh	r3, [r7, #4]
    uint8_t cs = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
    cs ^= 0xFE;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	f083 0301 	eor.w	r3, r3, #1
 8001c92:	43db      	mvns	r3, r3
 8001c94:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 8) & 0xFF;
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4053      	eors	r3, r2
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 0) & 0xFF;
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb0:	4053      	eors	r3, r2
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 8) & 0xFF;
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b25a      	sxtb	r2, r3
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4053      	eors	r3, r2
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 0) & 0xFF;
 8001cc8:	88bb      	ldrh	r3, [r7, #4]
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd0:	4053      	eors	r3, r2
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	81bb      	strh	r3, [r7, #12]
 8001cda:	e009      	b.n	8001cf0 <CalcChecksum+0x78>
        cs ^= payload[i];
 8001cdc:	89bb      	ldrh	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	4053      	eors	r3, r2
 8001ce8:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	81bb      	strh	r3, [r7, #12]
 8001cf0:	89ba      	ldrh	r2, [r7, #12]
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3f1      	bcc.n	8001cdc <CalcChecksum+0x64>
    }
    return cs;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <UartProtocol_Init>:

void UartProtocol_Init(UartProtocol* proto, FrameReceivedCallback cb) {
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
    proto->rx_state = WAIT_SOF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
    proto->rx_cmd = 0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	805a      	strh	r2, [r3, #2]
    proto->rx_len = 0;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	809a      	strh	r2, [r3, #4]
    proto->rx_payload_idx = 0;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	80da      	strh	r2, [r3, #6]
    proto->rx_checksum = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	721a      	strb	r2, [r3, #8]
    proto->rx_calc_checksum = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	725a      	strb	r2, [r3, #9]
    proto->onFrameReceived = cb;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <UartProtocol_ParseByte>:

void UartProtocol_ParseByte(UartProtocol* proto, uint8_t c) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
    switch(proto->rx_state) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	f200 80b1 	bhi.w	8001ec0 <UartProtocol_ParseByte+0x178>
 8001d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d64 <UartProtocol_ParseByte+0x1c>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001d81 	.word	0x08001d81
 8001d68:	08001d97 	.word	0x08001d97
 8001d6c:	08001db9 	.word	0x08001db9
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001e01 	.word	0x08001e01
 8001d78:	08001e4f 	.word	0x08001e4f
 8001d7c:	08001e87 	.word	0x08001e87
        case WAIT_SOF:
            if (c == 0xFE) {
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d84:	f040 80a0 	bne.w	8001ec8 <UartProtocol_ParseByte+0x180>
                proto->rx_state = READ_CMD_MSB;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
                proto->rx_calc_checksum = 0xFE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	22fe      	movs	r2, #254	@ 0xfe
 8001d92:	725a      	strb	r2, [r3, #9]
            }
            break;
 8001d94:	e098      	b.n	8001ec8 <UartProtocol_ParseByte+0x180>
        case READ_CMD_MSB:
            proto->rx_cmd = ((uint16_t)c) << 8;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a5a      	ldrb	r2, [r3, #9]
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	4053      	eors	r3, r2
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_CMD_LSB;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	701a      	strb	r2, [r3, #0]
            break;
 8001db6:	e08a      	b.n	8001ece <UartProtocol_ParseByte+0x186>
        case READ_CMD_LSB:
            proto->rx_cmd |= c;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	885a      	ldrh	r2, [r3, #2]
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7a5a      	ldrb	r2, [r3, #9]
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	4053      	eors	r3, r2
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_MSB;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	701a      	strb	r2, [r3, #0]
            break;
 8001ddc:	e077      	b.n	8001ece <UartProtocol_ParseByte+0x186>
        case READ_LEN_MSB:
            proto->rx_len = ((uint16_t)c) << 8;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a5a      	ldrb	r2, [r3, #9]
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	4053      	eors	r3, r2
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_LSB;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	701a      	strb	r2, [r3, #0]
            break;
 8001dfe:	e066      	b.n	8001ece <UartProtocol_ParseByte+0x186>
        case READ_LEN_LSB:
            proto->rx_len |= c;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	889a      	ldrh	r2, [r3, #4]
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7a5a      	ldrb	r2, [r3, #9]
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	4053      	eors	r3, r2
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	725a      	strb	r2, [r3, #9]
            if (proto->rx_len > FRAME_MAX_PAYLOAD) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e26:	d903      	bls.n	8001e30 <UartProtocol_ParseByte+0xe8>
                proto->rx_state = WAIT_SOF;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
                proto->rx_state = READ_CHECKSUM;
            } else {
                proto->rx_payload_idx = 0;
                proto->rx_state = READ_PAYLOAD;
            }
            break;
 8001e2e:	e04e      	b.n	8001ece <UartProtocol_ParseByte+0x186>
            } else if (proto->rx_len == 0) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <UartProtocol_ParseByte+0xf8>
                proto->rx_state = READ_CHECKSUM;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2206      	movs	r2, #6
 8001e3c:	701a      	strb	r2, [r3, #0]
            break;
 8001e3e:	e046      	b.n	8001ece <UartProtocol_ParseByte+0x186>
                proto->rx_payload_idx = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	80da      	strh	r2, [r3, #6]
                proto->rx_state = READ_PAYLOAD;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2205      	movs	r2, #5
 8001e4a:	701a      	strb	r2, [r3, #0]
            break;
 8001e4c:	e03f      	b.n	8001ece <UartProtocol_ParseByte+0x186>
        case READ_PAYLOAD:
            proto->frame_payload[proto->rx_payload_idx++] = c;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	88db      	ldrh	r3, [r3, #6]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	b291      	uxth	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	80d1      	strh	r1, [r2, #6]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	729a      	strb	r2, [r3, #10]
            proto->rx_calc_checksum ^= c;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7a5a      	ldrb	r2, [r3, #9]
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	4053      	eors	r3, r2
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	725a      	strb	r2, [r3, #9]
            if (proto->rx_payload_idx >= proto->rx_len) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	88da      	ldrh	r2, [r3, #6]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d326      	bcc.n	8001ecc <UartProtocol_ParseByte+0x184>
                proto->rx_state = READ_CHECKSUM;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2206      	movs	r2, #6
 8001e82:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001e84:	e022      	b.n	8001ecc <UartProtocol_ParseByte+0x184>
        case READ_CHECKSUM:
            proto->rx_checksum = c;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	721a      	strb	r2, [r3, #8]
            if (proto->rx_checksum == proto->rx_calc_checksum && proto->onFrameReceived) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7a1a      	ldrb	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7a5b      	ldrb	r3, [r3, #9]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10f      	bne.n	8001eb8 <UartProtocol_ParseByte+0x170>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <UartProtocol_ParseByte+0x170>
                proto->onFrameReceived(proto, proto->rx_cmd, proto->rx_len, proto->frame_payload);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8d3 410c 	ldr.w	r4, [r3, #268]	@ 0x10c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8859      	ldrh	r1, [r3, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	889a      	ldrh	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	330a      	adds	r3, #10
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	47a0      	blx	r4
            }
            proto->rx_state = WAIT_SOF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
            break;
 8001ebe:	e006      	b.n	8001ece <UartProtocol_ParseByte+0x186>
        default:
            proto->rx_state = WAIT_SOF;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
            break;
 8001ec6:	e002      	b.n	8001ece <UartProtocol_ParseByte+0x186>
            break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <UartProtocol_ParseByte+0x186>
            break;
 8001ecc:	bf00      	nop
    }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop

08001ed8 <UartProtocol_SendFrame>:

void UartProtocol_SendFrame(UART_HandleTypeDef* huart, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b0c9      	sub	sp, #292	@ 0x124
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001ee2:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001ee6:	6020      	str	r0, [r4, #0]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ef0:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001efa:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001efe:	4602      	mov	r2, r0
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]
    uint8_t tx_buf[6 + FRAME_MAX_PAYLOAD];
    int pos = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tx_buf[pos++] = 0xFE;
 8001f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f1e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f22:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f26:	21fe      	movs	r1, #254	@ 0xfe
 8001f28:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 8) & 0xFF;
 8001f2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f2e:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b299      	uxth	r1, r3
 8001f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f42:	b2c9      	uxtb	r1, r1
 8001f44:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f48:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f4c:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 0) & 0xFF;
 8001f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f58:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f5c:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f68:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f6c:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 8) & 0xFF;
 8001f6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f72:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f86:	b2c9      	uxtb	r1, r1
 8001f88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f8c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f90:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 0) & 0xFF;
 8001f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f9c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001fa0:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001fa4:	8812      	ldrh	r2, [r2, #0]
 8001fa6:	b2d1      	uxtb	r1, r2
 8001fa8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001fac:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001fb0:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001fb8:	e017      	b.n	8001fea <UartProtocol_SendFrame+0x112>
        tx_buf[pos++] = payload[i];
 8001fba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001fbe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001fc2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	441a      	add	r2, r3
 8001fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001fce:	1c59      	adds	r1, r3, #1
 8001fd0:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8001fd4:	7811      	ldrb	r1, [r2, #0]
 8001fd6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001fda:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001fde:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001fe0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001fea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbde      	blt.n	8001fba <UartProtocol_SendFrame+0xe2>
    }
    uint8_t cs = CalcChecksum(cmd, len, payload);
 8001ffc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002000:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002004:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002008:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800200c:	8811      	ldrh	r1, [r2, #0]
 800200e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002012:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8002016:	8810      	ldrh	r0, [r2, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f7ff fe2d 	bl	8001c78 <CalcChecksum>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    tx_buf[pos++] = cs;
 8002024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800202e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002032:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002036:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 800203a:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(huart, tx_buf, pos, 100);
 800203c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002040:	b29a      	uxth	r2, r3
 8002042:	f107 0110 	add.w	r1, r7, #16
 8002046:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800204a:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800204e:	2364      	movs	r3, #100	@ 0x64
 8002050:	6800      	ldr	r0, [r0, #0]
 8002052:	f003 f82d 	bl	80050b0 <HAL_UART_Transmit>
}
 8002056:	bf00      	nop
 8002058:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002064:	f7ff fdf6 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002068:	480c      	ldr	r0, [pc, #48]	@ (800209c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206a:	490d      	ldr	r1, [pc, #52]	@ (80020a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800206c:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002080:	4c0a      	ldr	r4, [pc, #40]	@ (80020ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208e:	f003 fc69 	bl	8005964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7ff f8bd 	bl	8001210 <main>
  bx  lr    
 8002096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020a4:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 80020a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020ac:	20018aa0 	.word	0x20018aa0

080020b0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <DMA1_Stream0_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <HAL_Init+0x40>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <HAL_Init+0x40>)
 80020ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <HAL_Init+0x40>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 fe6f 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fbb2 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fe87 	bl	8002e2a <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 fe4f 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000004 	.word	0x20000004
 8002150:	2000000c 	.word	0x2000000c
 8002154:	20000008 	.word	0x20000008

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	20018a9c 	.word	0x20018a9c

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20018a9c 	.word	0x20018a9c

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e033      	b.n	800225e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fb4e 	bl	80018a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002226:	f023 0302 	bic.w	r3, r3, #2
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fb6c 	bl	8002910 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
 800224e:	e001      	b.n	8002254 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d049      	beq.n	8002330 <HAL_ADC_IRQHandler+0xca>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d046      	beq.n	8002330 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d12b      	bne.n	8002320 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d127      	bne.n	8002320 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d119      	bne.n	8002320 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0220 	bic.w	r2, r2, #32
 80022fa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7fe fef1 	bl	8001108 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0212 	mvn.w	r2, #18
 800232e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d057      	beq.n	80023f6 <HAL_ADC_IRQHandler+0x190>
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d054      	beq.n	80023f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d139      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002378:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12b      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d124      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fc10 	bl	8002c0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 020c 	mvn.w	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <HAL_ADC_IRQHandler+0x1d6>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d014      	beq.n	800243c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10d      	bne.n	800243c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f929 	bl	8002684 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0201 	mvn.w	r2, #1
 800243a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800244a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d015      	beq.n	800247e <HAL_ADC_IRQHandler+0x218>
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	f043 0202 	orr.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0220 	mvn.w	r2, #32
 800246c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f912 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0220 	mvn.w	r2, #32
 800247c:	601a      	str	r2, [r3, #0]
  }
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Start_DMA+0x22>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0d0      	b.n	800264c <HAL_ADC_Start_DMA+0x1c4>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d018      	beq.n	80024f2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d0:	4b60      	ldr	r3, [pc, #384]	@ (8002654 <HAL_ADC_Start_DMA+0x1cc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a60      	ldr	r2, [pc, #384]	@ (8002658 <HAL_ADC_Start_DMA+0x1d0>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0c9a      	lsrs	r2, r3, #18
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002500:	d107      	bne.n	8002512 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002510:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 8088 	bne.w	8002632 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800254c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002560:	d106      	bne.n	8002570 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f023 0206 	bic.w	r2, r3, #6
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
 800256e:	e002      	b.n	8002576 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257e:	4b37      	ldr	r3, [pc, #220]	@ (800265c <HAL_ADC_Start_DMA+0x1d4>)
 8002580:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	4a36      	ldr	r2, [pc, #216]	@ (8002660 <HAL_ADC_Start_DMA+0x1d8>)
 8002588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	4a35      	ldr	r2, [pc, #212]	@ (8002664 <HAL_ADC_Start_DMA+0x1dc>)
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	4a34      	ldr	r2, [pc, #208]	@ (8002668 <HAL_ADC_Start_DMA+0x1e0>)
 8002598:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	334c      	adds	r3, #76	@ 0x4c
 80025ce:	4619      	mov	r1, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f000 fce4 	bl	8002fa0 <HAL_DMA_Start_IT>
 80025d8:	4603      	mov	r3, r0
 80025da:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d129      	bne.n	800264a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	e020      	b.n	800264a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <HAL_ADC_Start_DMA+0x1e4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d11b      	bne.n	800264a <HAL_ADC_Start_DMA+0x1c2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d114      	bne.n	800264a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e00b      	b.n	800264a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800264a:	7ffb      	ldrb	r3, [r7, #31]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000004 	.word	0x20000004
 8002658:	431bde83 	.word	0x431bde83
 800265c:	40012300 	.word	0x40012300
 8002660:	08002b09 	.word	0x08002b09
 8002664:	08002bc3 	.word	0x08002bc3
 8002668:	08002bdf 	.word	0x08002bdf
 800266c:	40012000 	.word	0x40012000

08002670 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e113      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x244>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d925      	bls.n	8002724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	3b1e      	subs	r3, #30
 80026ee:	2207      	movs	r2, #7
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4403      	add	r3, r0
 8002716:	3b1e      	subs	r3, #30
 8002718:	409a      	lsls	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	e022      	b.n	800276a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	2207      	movs	r2, #7
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	4603      	mov	r3, r0
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4403      	add	r3, r0
 8002760:	409a      	lsls	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d824      	bhi.n	80027bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b05      	subs	r3, #5
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b05      	subs	r3, #5
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ba:	e04c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d824      	bhi.n	800280e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b23      	subs	r3, #35	@ 0x23
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b23      	subs	r3, #35	@ 0x23
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
 800280c:	e023      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b41      	subs	r3, #65	@ 0x41
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b41      	subs	r3, #65	@ 0x41
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <HAL_ADC_ConfigChannel+0x250>)
 8002858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_ADC_ConfigChannel+0x254>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10f      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1d8>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b12      	cmp	r3, #18
 800286a:	d10b      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	@ (8002900 <HAL_ADC_ConfigChannel+0x254>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_ADC_ConfigChannel+0x258>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b11      	cmp	r3, #17
 800289e:	d122      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_ADC_ConfigChannel+0x258>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_ADC_ConfigChannel+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a11      	ldr	r2, [pc, #68]	@ (800290c <HAL_ADC_ConfigChannel+0x260>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	0c9a      	lsrs	r2, r3, #18
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40012300 	.word	0x40012300
 8002900:	40012000 	.word	0x40012000
 8002904:	10000012 	.word	0x10000012
 8002908:	20000004 	.word	0x20000004
 800290c:	431bde83 	.word	0x431bde83

08002910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002918:	4b79      	ldr	r3, [pc, #484]	@ (8002b00 <ADC_Init+0x1f0>)
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <ADC_Init+0x1f4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e00f      	b.n	8002a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0202 	bic.w	r2, r2, #2
 8002a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
 8002a28:	005a      	lsls	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	3b01      	subs	r3, #1
 8002a68:	035a      	lsls	r2, r3, #13
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	e007      	b.n	8002a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	051a      	lsls	r2, r3, #20
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ac6:	025a      	lsls	r2, r3, #9
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	029a      	lsls	r2, r3, #10
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40012300 	.word	0x40012300
 8002b04:	0f000001 	.word	0x0f000001

08002b08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d13c      	bne.n	8002b9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d12b      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d127      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d119      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0220 	bic.w	r2, r2, #32
 8002b6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7fe fab7 	bl	8001108 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b9a:	e00e      	b.n	8002bba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd75 	bl	8002698 <HAL_ADC_ErrorCallback>
}
 8002bae:	e004      	b.n	8002bba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fd4d 	bl	8002670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fd4a 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	@ (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	@ (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	@ 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	@ 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff8e 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff29 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff3e 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff8e 	bl	8002d14 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff f996 	bl	8002180 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e099      	b.n	8002f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e80:	e00f      	b.n	8002ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e82:	f7ff f97d 	bl	8002180 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d908      	bls.n	8002ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e078      	b.n	8002f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e8      	bne.n	8002e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_DMA_Init+0x158>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	4313      	orrs	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa6f 	bl	800342c <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f62:	2301      	movs	r3, #1
 8002f64:	e016      	b.n	8002f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa26 	bl	80033c0 <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	223f      	movs	r2, #63	@ 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	f010803f 	.word	0xf010803f

08002fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Start_IT+0x26>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e040      	b.n	8003048 <HAL_DMA_Start_IT+0xa8>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d12f      	bne.n	800303a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f9b8 	bl	8003364 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	223f      	movs	r2, #63	@ 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0216 	orr.w	r2, r2, #22
 800300e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e005      	b.n	8003046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800305c:	4b8e      	ldr	r3, [pc, #568]	@ (8003298 <HAL_DMA_IRQHandler+0x248>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8e      	ldr	r2, [pc, #568]	@ (800329c <HAL_DMA_IRQHandler+0x24c>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0a9b      	lsrs	r3, r3, #10
 8003068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307a:	2208      	movs	r2, #8
 800307c:	409a      	lsls	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0204 	bic.w	r2, r2, #4
 80030a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2208      	movs	r2, #8
 80030aa:	409a      	lsls	r2, r3
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	2201      	movs	r2, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	2204      	movs	r2, #4
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	2204      	movs	r2, #4
 8003116:	409a      	lsls	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	2210      	movs	r2, #16
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d043      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03c      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	2210      	movs	r2, #16
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d018      	beq.n	8003192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e01f      	b.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
 8003190:	e016      	b.n	80031c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0208 	bic.w	r2, r2, #8
 80031ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2220      	movs	r2, #32
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 808f 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8087 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e6:	2220      	movs	r2, #32
 80031e8:	409a      	lsls	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d136      	bne.n	8003268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0216 	bic.w	r2, r2, #22
 8003208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_DMA_IRQHandler+0x1da>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0208 	bic.w	r2, r2, #8
 8003238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	223f      	movs	r2, #63	@ 0x3f
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d07e      	beq.n	800335c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
        }
        return;
 8003266:	e079      	b.n	800335c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	2b00      	cmp	r3, #0
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e02c      	b.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
 8003296:	bf00      	nop
 8003298:	20000004 	.word	0x20000004
 800329c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e01e      	b.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0210 	bic.w	r2, r2, #16
 80032ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d032      	beq.n	800335e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d022      	beq.n	800334a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2205      	movs	r2, #5
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3301      	adds	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	d307      	bcc.n	8003338 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f2      	bne.n	800331c <HAL_DMA_IRQHandler+0x2cc>
 8003336:	e000      	b.n	800333a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003338:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
 800335a:	e000      	b.n	800335e <HAL_DMA_IRQHandler+0x30e>
        return;
 800335c:	bf00      	nop
    }
  }
}
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003380:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d108      	bne.n	80033a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033a2:	e007      	b.n	80033b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3b10      	subs	r3, #16
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <DMA_CalcBaseAndBitshift+0x64>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033da:	4a13      	ldr	r2, [pc, #76]	@ (8003428 <DMA_CalcBaseAndBitshift+0x68>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d909      	bls.n	8003402 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003400:	e007      	b.n	8003412 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	aaaaaaab 	.word	0xaaaaaaab
 8003428:	08006438 	.word	0x08006438

0800342c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11f      	bne.n	8003486 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d856      	bhi.n	80034fa <DMA_CheckFifoParam+0xce>
 800344c:	a201      	add	r2, pc, #4	@ (adr r2, 8003454 <DMA_CheckFifoParam+0x28>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003465 	.word	0x08003465
 8003458:	08003477 	.word	0x08003477
 800345c:	08003465 	.word	0x08003465
 8003460:	080034fb 	.word	0x080034fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d046      	beq.n	80034fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003474:	e043      	b.n	80034fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800347e:	d140      	bne.n	8003502 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e03d      	b.n	8003502 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348e:	d121      	bne.n	80034d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d837      	bhi.n	8003506 <DMA_CheckFifoParam+0xda>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <DMA_CheckFifoParam+0x70>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b3 	.word	0x080034b3
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	080034c5 	.word	0x080034c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e030      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d025      	beq.n	800350a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c2:	e022      	b.n	800350a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d2:	e01c      	b.n	800350e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d903      	bls.n	80034e2 <DMA_CheckFifoParam+0xb6>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e0:	e018      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      break;
 80034e6:	e015      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e00b      	b.n	8003512 <DMA_CheckFifoParam+0xe6>
      break;
 80034fa:	bf00      	nop
 80034fc:	e00a      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e008      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e006      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e004      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;   
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
    }
  } 
  
  return status; 
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e159      	b.n	80037f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003540:	2201      	movs	r2, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	f040 8148 	bne.w	80037ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d005      	beq.n	8003576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003572:	2b02      	cmp	r3, #2
 8003574:	d130      	bne.n	80035d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ac:	2201      	movs	r2, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 0201 	and.w	r2, r3, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d017      	beq.n	8003614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d123      	bne.n	8003668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	08da      	lsrs	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3208      	adds	r2, #8
 8003628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	69b9      	ldr	r1, [r7, #24]
 8003664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a2 	beq.w	80037ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b57      	ldr	r3, [pc, #348]	@ (800380c <HAL_GPIO_Init+0x2e8>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	4a56      	ldr	r2, [pc, #344]	@ (800380c <HAL_GPIO_Init+0x2e8>)
 80036b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ba:	4b54      	ldr	r3, [pc, #336]	@ (800380c <HAL_GPIO_Init+0x2e8>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c6:	4a52      	ldr	r2, [pc, #328]	@ (8003810 <HAL_GPIO_Init+0x2ec>)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	3302      	adds	r3, #2
 80036ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a49      	ldr	r2, [pc, #292]	@ (8003814 <HAL_GPIO_Init+0x2f0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d019      	beq.n	8003726 <HAL_GPIO_Init+0x202>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a48      	ldr	r2, [pc, #288]	@ (8003818 <HAL_GPIO_Init+0x2f4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_GPIO_Init+0x1fe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a47      	ldr	r2, [pc, #284]	@ (800381c <HAL_GPIO_Init+0x2f8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_GPIO_Init+0x1fa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a46      	ldr	r2, [pc, #280]	@ (8003820 <HAL_GPIO_Init+0x2fc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_GPIO_Init+0x1f6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a45      	ldr	r2, [pc, #276]	@ (8003824 <HAL_GPIO_Init+0x300>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_GPIO_Init+0x1f2>
 8003712:	2304      	movs	r3, #4
 8003714:	e008      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003716:	2307      	movs	r3, #7
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x204>
 800371a:	2303      	movs	r3, #3
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x204>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003726:	2300      	movs	r3, #0
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f002 0203 	and.w	r2, r2, #3
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	4093      	lsls	r3, r2
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003738:	4935      	ldr	r1, [pc, #212]	@ (8003810 <HAL_GPIO_Init+0x2ec>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003746:	4b38      	ldr	r3, [pc, #224]	@ (8003828 <HAL_GPIO_Init+0x304>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376a:	4a2f      	ldr	r2, [pc, #188]	@ (8003828 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003770:	4b2d      	ldr	r3, [pc, #180]	@ (8003828 <HAL_GPIO_Init+0x304>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003794:	4a24      	ldr	r2, [pc, #144]	@ (8003828 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379a:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <HAL_GPIO_Init+0x304>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037be:	4a1a      	ldr	r2, [pc, #104]	@ (8003828 <HAL_GPIO_Init+0x304>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c4:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <HAL_GPIO_Init+0x304>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003828 <HAL_GPIO_Init+0x304>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	f67f aea2 	bls.w	8003540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40013800 	.word	0x40013800
 8003814:	40020000 	.word	0x40020000
 8003818:	40020400 	.word	0x40020400
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	40021000 	.word	0x40021000
 8003828:	40013c00 	.word	0x40013c00

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003848:	e003      	b.n	8003852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	041a      	lsls	r2, r3, #16
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43d9      	mvns	r1, r3
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	400b      	ands	r3, r1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	619a      	str	r2, [r3, #24]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e267      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d075      	beq.n	800399e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038b2:	4b88      	ldr	r3, [pc, #544]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b85      	ldr	r3, [pc, #532]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d112      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b82      	ldr	r3, [pc, #520]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <HAL_RCC_OscConfig+0x108>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e242      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x74>
 80038fa:	4b76      	ldr	r3, [pc, #472]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a75      	ldr	r2, [pc, #468]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6c      	ldr	r2, [pc, #432]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 800392c:	4b69      	ldr	r3, [pc, #420]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a68      	ldr	r2, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a65      	ldr	r2, [pc, #404]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe fc18 	bl	8002180 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fe fc14 	bl	8002180 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	@ 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e207      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fc04 	bl	8002180 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fc00 	bl	8002180 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1f3      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0xe8>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039aa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b47      	ldr	r3, [pc, #284]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b41      	ldr	r3, [pc, #260]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1c7      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4937      	ldr	r1, [pc, #220]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fbb9 	bl	8002180 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fe fbb5 	bl	8002180 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1a8      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b28      	ldr	r3, [pc, #160]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4925      	ldr	r1, [pc, #148]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fb98 	bl	8002180 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fb94 	bl	8002180 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e187      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d036      	beq.n	8003aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <HAL_RCC_OscConfig+0x248>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fb78 	bl	8002180 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fe fb74 	bl	8002180 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e167      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x200>
 8003ab2:	e01b      	b.n	8003aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_OscConfig+0x248>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fb61 	bl	8002180 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e00e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fb5d 	bl	8002180 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d907      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e150      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	42470000 	.word	0x42470000
 8003adc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b88      	ldr	r3, [pc, #544]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8097 	beq.w	8003c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a7c      	ldr	r2, [pc, #496]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b77      	ldr	r3, [pc, #476]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b74      	ldr	r3, [pc, #464]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a73      	ldr	r2, [pc, #460]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fb1d 	bl	8002180 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe fb19 	bl	8002180 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e10c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
 8003b70:	4b64      	ldr	r3, [pc, #400]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a63      	ldr	r2, [pc, #396]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	e01c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x30c>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	4b5c      	ldr	r3, [pc, #368]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a5b      	ldr	r2, [pc, #364]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003ba0:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bac:	4b55      	ldr	r3, [pc, #340]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb0:	4a54      	ldr	r2, [pc, #336]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fade 	bl	8002180 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fada 	bl	8002180 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0cb      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	4b49      	ldr	r3, [pc, #292]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ee      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x334>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fac8 	bl	8002180 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fac4 	bl	8002180 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0b5      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	4a38      	ldr	r2, [pc, #224]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a1 	beq.w	8003d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c32:	4b34      	ldr	r3, [pc, #208]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d05c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d141      	bne.n	8003cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b31      	ldr	r3, [pc, #196]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fa98 	bl	8002180 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fe fa94 	bl	8002180 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e087      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b27      	ldr	r3, [pc, #156]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	491b      	ldr	r1, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fa6d 	bl	8002180 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fa69 	bl	8002180 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e05c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x416>
 8003cc8:	e054      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fa56 	bl	8002180 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fa52 	bl	8002180 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e045      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x444>
 8003cf6:	e03d      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e038      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x4ec>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d121      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11a      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b68      	ldr	r3, [pc, #416]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90c      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b65      	ldr	r3, [pc, #404]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b63      	ldr	r3, [pc, #396]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df0:	4b53      	ldr	r3, [pc, #332]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a52      	ldr	r2, [pc, #328]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	494d      	ldr	r1, [pc, #308]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d044      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e067      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4934      	ldr	r1, [pc, #208]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fe f984 	bl	8002180 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe f980 	bl	8002180 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e032      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4916      	ldr	r1, [pc, #88]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	490e      	ldr	r1, [pc, #56]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f0a:	f000 f821 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	490a      	ldr	r1, [pc, #40]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a09      	ldr	r2, [pc, #36]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f26:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f8e4 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	08006420 	.word	0x08006420
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b090      	sub	sp, #64	@ 0x40
 8003f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f68:	4b59      	ldr	r3, [pc, #356]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x40>
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	f200 80a1 	bhi.w	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f82:	e09b      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f88:	e09b      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8a:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f8e:	e098      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f90:	4b4f      	ldr	r3, [pc, #316]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	2200      	movs	r2, #0
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	fb03 f201 	mul.w	r2, r3, r1
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	fb00 f303 	mul.w	r3, r0, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a43      	ldr	r2, [pc, #268]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fca:	fba0 1202 	umull	r1, r2, r0, r2
 8003fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fea:	f7fc fc2b 	bl	8000844 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff6:	e053      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff8:	4b35      	ldr	r3, [pc, #212]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	2200      	movs	r2, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	617a      	str	r2, [r7, #20]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800400a:	f04f 0b00 	mov.w	fp, #0
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	ebb2 080a 	subs.w	r8, r2, sl
 800402a:	eb63 090b 	sbc.w	r9, r3, fp
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800403a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800403e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004042:	ebb2 0408 	subs.w	r4, r2, r8
 8004046:	eb63 0509 	sbc.w	r5, r3, r9
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	00eb      	lsls	r3, r5, #3
 8004054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004058:	00e2      	lsls	r2, r4, #3
 800405a:	4614      	mov	r4, r2
 800405c:	461d      	mov	r5, r3
 800405e:	eb14 030a 	adds.w	r3, r4, sl
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	eb45 030b 	adc.w	r3, r5, fp
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004076:	4629      	mov	r1, r5
 8004078:	028b      	lsls	r3, r1, #10
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004080:	4621      	mov	r1, r4
 8004082:	028a      	lsls	r2, r1, #10
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	2200      	movs	r2, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004094:	f7fc fbd6 	bl	8000844 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3740      	adds	r7, #64	@ 0x40
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	017d7840 	.word	0x017d7840

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000004 	.word	0x20000004

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a9b      	lsrs	r3, r3, #10
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	08006430 	.word	0x08006430

0800411c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004120:	f7ff ffdc 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0b5b      	lsrs	r3, r3, #13
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	08006430 	.word	0x08006430

08004144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07b      	b.n	800424e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004166:	d009      	beq.n	800417c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	61da      	str	r2, [r3, #28]
 800416e:	e005      	b.n	800417c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fc02 	bl	80019a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0104 	and.w	r1, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0210 	and.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004266:	f7fd ff8b 	bl	8002180 <HAL_GetTick>
 800426a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
 800427e:	e12a      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x36>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e122      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_SPI_Transmit+0x48>
 800429a:	2302      	movs	r3, #2
 800429c:	e11b      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2203      	movs	r2, #3
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ec:	d10f      	bne.n	800430e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800430c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d007      	beq.n	800432c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d152      	bne.n	80043dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Transmit+0xee>
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d145      	bne.n	80043d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004368:	e032      	b.n	80043d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d112      	bne.n	800439e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800439c:	e018      	b.n	80043d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439e:	f7fd feef 	bl	8002180 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d803      	bhi.n	80043b6 <HAL_SPI_Transmit+0x160>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_Transmit+0x166>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e082      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1c7      	bne.n	800436a <HAL_SPI_Transmit+0x114>
 80043da:	e053      	b.n	8004484 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x194>
 80043e4:	8b7b      	ldrh	r3, [r7, #26]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d147      	bne.n	800447a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004410:	e033      	b.n	800447a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d113      	bne.n	8004448 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004446:	e018      	b.n	800447a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fd fe9a 	bl	8002180 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Transmit+0x20a>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x210>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e02d      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c6      	bne.n	8004412 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f8b1 	bl	80045f0 <SPI_EndRxTxTransaction>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f0:	f7fd fe46 	bl	8002180 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004500:	f7fd fe3e 	bl	8002180 <HAL_GetTick>
 8004504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004506:	4b39      	ldr	r3, [pc, #228]	@ (80045ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	015b      	lsls	r3, r3, #5
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004516:	e055      	b.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d051      	beq.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004520:	f7fd fe2e 	bl	8002180 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d902      	bls.n	8004536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d13d      	bne.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800454e:	d111      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004558:	d004      	beq.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004562:	d107      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457c:	d10f      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800459c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e018      	b.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e002      	b.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d19a      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000004 	.word	0x20000004

080045f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2201      	movs	r2, #1
 8004604:	2102      	movs	r1, #2
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff6a 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e032      	b.n	8004688 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004622:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <SPI_EndRxTxTransaction+0xa0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <SPI_EndRxTxTransaction+0xa4>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	0d5b      	lsrs	r3, r3, #21
 800462e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004640:	d112      	bne.n	8004668 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	@ 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ff47 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e00f      	b.n	8004688 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3b01      	subs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d0f2      	beq.n	8004668 <SPI_EndRxTxTransaction+0x78>
 8004682:	e000      	b.n	8004686 <SPI_EndRxTxTransaction+0x96>
        break;
 8004684:	bf00      	nop
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000004 	.word	0x20000004
 8004694:	165e9f81 	.word	0x165e9f81

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd f9ec 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 faf8 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e03c      	b.n	80047ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1e      	ldr	r2, [pc, #120]	@ (80047d8 <HAL_TIM_Base_Start+0xa0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_TIM_Base_Start+0x5c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476a:	d013      	beq.n	8004794 <HAL_TIM_Base_Start+0x5c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1a      	ldr	r2, [pc, #104]	@ (80047dc <HAL_TIM_Base_Start+0xa4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_Base_Start+0x5c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a19      	ldr	r2, [pc, #100]	@ (80047e0 <HAL_TIM_Base_Start+0xa8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIM_Base_Start+0x5c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <HAL_TIM_Base_Start+0xac>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_Base_Start+0x5c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <HAL_TIM_Base_Start+0xb0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d010      	beq.n	80047c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e007      	b.n	80047c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000

080047ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e044      	b.n	800488e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	@ (800489c <HAL_TIM_Base_Start_IT+0xb0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482e:	d013      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x6c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1a      	ldr	r2, [pc, #104]	@ (80048a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x6c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x6c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x6c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a16      	ldr	r2, [pc, #88]	@ (80048ac <HAL_TIM_Base_Start_IT+0xc0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d111      	bne.n	800487c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b06      	cmp	r3, #6
 8004868:	d010      	beq.n	800488c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e007      	b.n	800488c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40014000 	.word	0x40014000

080048b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <HAL_TIM_Base_Stop_IT+0x48>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	f240 4344 	movw	r3, #1092	@ 0x444
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_Base_Stop_IT+0x48>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01b      	beq.n	8004972 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0202 	mvn.w	r2, #2
 8004942:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f999 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 800495e:	e005      	b.n	800496c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f98b 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f99c 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f06f 0204 	mvn.w	r2, #4
 800498e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f973 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 80049aa:	e005      	b.n	80049b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f965 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f976 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d020      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01b      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0208 	mvn.w	r2, #8
 80049da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2204      	movs	r2, #4
 80049e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f94d 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 80049f6:	e005      	b.n	8004a04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f93f 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f950 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01b      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0210 	mvn.w	r2, #16
 8004a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f927 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004a42:	e005      	b.n	8004a50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f919 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f92a 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0201 	mvn.w	r2, #1
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fae1 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 faaf 	bl	8004ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8fb 	bl	8004cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0220 	mvn.w	r2, #32
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa81 	bl	8004fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_ConfigClockSource+0x1c>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0b4      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x186>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b42:	d03e      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0xd4>
 8004b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b48:	f200 8087 	bhi.w	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b50:	f000 8086 	beq.w	8004c60 <HAL_TIM_ConfigClockSource+0x172>
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b58:	d87f      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b5a:	2b70      	cmp	r3, #112	@ 0x70
 8004b5c:	d01a      	beq.n	8004b94 <HAL_TIM_ConfigClockSource+0xa6>
 8004b5e:	2b70      	cmp	r3, #112	@ 0x70
 8004b60:	d87b      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b62:	2b60      	cmp	r3, #96	@ 0x60
 8004b64:	d050      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x11a>
 8004b66:	2b60      	cmp	r3, #96	@ 0x60
 8004b68:	d877      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b6a:	2b50      	cmp	r3, #80	@ 0x50
 8004b6c:	d03c      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0xfa>
 8004b6e:	2b50      	cmp	r3, #80	@ 0x50
 8004b70:	d873      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d058      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x13a>
 8004b76:	2b40      	cmp	r3, #64	@ 0x40
 8004b78:	d86f      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b7a:	2b30      	cmp	r3, #48	@ 0x30
 8004b7c:	d064      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7e:	2b30      	cmp	r3, #48	@ 0x30
 8004b80:	d86b      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d060      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x15a>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d867      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d05c      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d05a      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x15a>
 8004b92:	e062      	b.n	8004c5a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	f000 f992 	bl	8004ecc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
      break;
 8004bc0:	e04f      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	f000 f97b 	bl	8004ecc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004be4:	609a      	str	r2, [r3, #8]
      break;
 8004be6:	e03c      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f000 f8ef 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2150      	movs	r1, #80	@ 0x50
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f948 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004c06:	e02c      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c14:	461a      	mov	r2, r3
 8004c16:	f000 f90e 	bl	8004e36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2160      	movs	r1, #96	@ 0x60
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f938 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004c26:	e01c      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c34:	461a      	mov	r2, r3
 8004c36:	f000 f8cf 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2140      	movs	r1, #64	@ 0x40
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f928 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004c46:	e00c      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 f91f 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004c58:	e003      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a37      	ldr	r2, [pc, #220]	@ (8004dbc <TIM_Base_SetConfig+0xf0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00f      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cea:	d00b      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a34      	ldr	r2, [pc, #208]	@ (8004dc0 <TIM_Base_SetConfig+0xf4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a33      	ldr	r2, [pc, #204]	@ (8004dc4 <TIM_Base_SetConfig+0xf8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <TIM_Base_SetConfig+0xfc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a28      	ldr	r2, [pc, #160]	@ (8004dbc <TIM_Base_SetConfig+0xf0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a25      	ldr	r2, [pc, #148]	@ (8004dc0 <TIM_Base_SetConfig+0xf4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a24      	ldr	r2, [pc, #144]	@ (8004dc4 <TIM_Base_SetConfig+0xf8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a23      	ldr	r2, [pc, #140]	@ (8004dc8 <TIM_Base_SetConfig+0xfc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a22      	ldr	r2, [pc, #136]	@ (8004dcc <TIM_Base_SetConfig+0x100>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a21      	ldr	r2, [pc, #132]	@ (8004dd0 <TIM_Base_SetConfig+0x104>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a20      	ldr	r2, [pc, #128]	@ (8004dd4 <TIM_Base_SetConfig+0x108>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <TIM_Base_SetConfig+0xf0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d103      	bne.n	8004d96 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f023 0210 	bic.w	r2, r3, #16
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e050      	b.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f70:	d013      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a13      	ldr	r2, [pc, #76]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10c      	bne.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fd6c 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fa09 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d175      	bne.n	80051bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_UART_Transmit+0x2c>
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e06e      	b.n	80051be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2221      	movs	r2, #33	@ 0x21
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ee:	f7fd f847 	bl	8002180 <HAL_GetTick>
 80050f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	88fa      	ldrh	r2, [r7, #6]
 80050f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005108:	d108      	bne.n	800511c <HAL_UART_Transmit+0x6c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e003      	b.n	8005124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005124:	e02e      	b.n	8005184 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f8df 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e03a      	b.n	80051be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	3302      	adds	r3, #2
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e007      	b.n	8005176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1cb      	bne.n	8005126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2200      	movs	r2, #0
 8005196:	2140      	movs	r1, #64	@ 0x40
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f8ab 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e006      	b.n	80051be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08a      	sub	sp, #40	@ 0x28
 80051ca:	af02      	add	r7, sp, #8
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	f040 8081 	bne.w	80052ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Receive+0x2e>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e079      	b.n	80052ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2222      	movs	r2, #34	@ 0x22
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520c:	f7fc ffb8 	bl	8002180 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005226:	d108      	bne.n	800523a <HAL_UART_Receive+0x74>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e003      	b.n	8005242 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005242:	e047      	b.n	80052d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2120      	movs	r1, #32
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f850 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e042      	b.n	80052ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10c      	bne.n	8005286 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005278:	b29a      	uxth	r2, r3
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	3302      	adds	r3, #2
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e01f      	b.n	80052c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800528e:	d007      	beq.n	80052a0 <HAL_UART_Receive+0xda>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <HAL_UART_Receive+0xe8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e008      	b.n	80052c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1b2      	bne.n	8005244 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005304:	e03b      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d037      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fc ff37 	bl	8002180 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <UART_WaitOnFlagUntilTimeout+0x30>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e03a      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d023      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d020      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b40      	cmp	r3, #64	@ 0x40
 8005340:	d01d      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d116      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f81d 	bl	80053a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2208      	movs	r2, #8
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00f      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	429a      	cmp	r2, r3
 800539a:	d0b4      	beq.n	8005306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b095      	sub	sp, #84	@ 0x54
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80053d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	2b01      	cmp	r3, #1
 800541c:	d119      	bne.n	8005452 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	60bb      	str	r3, [r7, #8]
   return(result);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 0310 	bic.w	r3, r3, #16
 8005434:	647b      	str	r3, [r7, #68]	@ 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800543e:	61ba      	str	r2, [r7, #24]
 8005440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6979      	ldr	r1, [r7, #20]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	613b      	str	r3, [r7, #16]
   return(result);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005460:	bf00      	nop
 8005462:	3754      	adds	r7, #84	@ 0x54
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b0c0      	sub	sp, #256	@ 0x100
 8005472:	af00      	add	r7, sp, #0
 8005474:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	ea40 0301 	orr.w	r3, r0, r1
 8005494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054c4:	f021 010c 	bic.w	r1, r1, #12
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054d2:	430b      	orrs	r3, r1
 80054d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	6999      	ldr	r1, [r3, #24]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	ea40 0301 	orr.w	r3, r0, r1
 80054f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <UART_SetConfig+0x2cc>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d005      	beq.n	800550c <UART_SetConfig+0xa0>
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b8d      	ldr	r3, [pc, #564]	@ (800573c <UART_SetConfig+0x2d0>)
 8005508:	429a      	cmp	r2, r3
 800550a:	d104      	bne.n	8005516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fe fe06 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 8005510:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005514:	e003      	b.n	800551e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005516:	f7fe fded 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 800551a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005528:	f040 810c 	bne.w	8005744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005536:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800553a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	1891      	adds	r1, r2, r2
 8005544:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005546:	415b      	adcs	r3, r3
 8005548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800554a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800554e:	4621      	mov	r1, r4
 8005550:	eb12 0801 	adds.w	r8, r2, r1
 8005554:	4629      	mov	r1, r5
 8005556:	eb43 0901 	adc.w	r9, r3, r1
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800556e:	4690      	mov	r8, r2
 8005570:	4699      	mov	r9, r3
 8005572:	4623      	mov	r3, r4
 8005574:	eb18 0303 	adds.w	r3, r8, r3
 8005578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800557c:	462b      	mov	r3, r5
 800557e:	eb49 0303 	adc.w	r3, r9, r3
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005592:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800559a:	460b      	mov	r3, r1
 800559c:	18db      	adds	r3, r3, r3
 800559e:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a0:	4613      	mov	r3, r2
 80055a2:	eb42 0303 	adc.w	r3, r2, r3
 80055a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055b0:	f7fb f948 	bl	8000844 <__aeabi_uldivmod>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4b61      	ldr	r3, [pc, #388]	@ (8005740 <UART_SetConfig+0x2d4>)
 80055ba:	fba3 2302 	umull	r2, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	011c      	lsls	r4, r3, #4
 80055c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055d4:	4642      	mov	r2, r8
 80055d6:	464b      	mov	r3, r9
 80055d8:	1891      	adds	r1, r2, r2
 80055da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055dc:	415b      	adcs	r3, r3
 80055de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055e4:	4641      	mov	r1, r8
 80055e6:	eb12 0a01 	adds.w	sl, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb43 0b01 	adc.w	fp, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005604:	4692      	mov	sl, r2
 8005606:	469b      	mov	fp, r3
 8005608:	4643      	mov	r3, r8
 800560a:	eb1a 0303 	adds.w	r3, sl, r3
 800560e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005612:	464b      	mov	r3, r9
 8005614:	eb4b 0303 	adc.w	r3, fp, r3
 8005618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800562c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005630:	460b      	mov	r3, r1
 8005632:	18db      	adds	r3, r3, r3
 8005634:	643b      	str	r3, [r7, #64]	@ 0x40
 8005636:	4613      	mov	r3, r2
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	647b      	str	r3, [r7, #68]	@ 0x44
 800563e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005646:	f7fb f8fd 	bl	8000844 <__aeabi_uldivmod>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4611      	mov	r1, r2
 8005650:	4b3b      	ldr	r3, [pc, #236]	@ (8005740 <UART_SetConfig+0x2d4>)
 8005652:	fba3 2301 	umull	r2, r3, r3, r1
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2264      	movs	r2, #100	@ 0x64
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	1acb      	subs	r3, r1, r3
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005666:	4b36      	ldr	r3, [pc, #216]	@ (8005740 <UART_SetConfig+0x2d4>)
 8005668:	fba3 2302 	umull	r2, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005674:	441c      	add	r4, r3
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005680:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005690:	415b      	adcs	r3, r3
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005698:	4641      	mov	r1, r8
 800569a:	1851      	adds	r1, r2, r1
 800569c:	6339      	str	r1, [r7, #48]	@ 0x30
 800569e:	4649      	mov	r1, r9
 80056a0:	414b      	adcs	r3, r1
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056b0:	4659      	mov	r1, fp
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4651      	mov	r1, sl
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4642      	mov	r2, r8
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056cc:	464b      	mov	r3, r9
 80056ce:	460a      	mov	r2, r1
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056ec:	460b      	mov	r3, r1
 80056ee:	18db      	adds	r3, r3, r3
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f2:	4613      	mov	r3, r2
 80056f4:	eb42 0303 	adc.w	r3, r2, r3
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005702:	f7fb f89f 	bl	8000844 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <UART_SetConfig+0x2d4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	@ 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	3332      	adds	r3, #50	@ 0x32
 800571e:	4a08      	ldr	r2, [pc, #32]	@ (8005740 <UART_SetConfig+0x2d4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 0207 	and.w	r2, r3, #7
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4422      	add	r2, r4
 8005732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005734:	e106      	b.n	8005944 <UART_SetConfig+0x4d8>
 8005736:	bf00      	nop
 8005738:	40011000 	.word	0x40011000
 800573c:	40011400 	.word	0x40011400
 8005740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800574e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	6239      	str	r1, [r7, #32]
 800575e:	415b      	adcs	r3, r3
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
 8005762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005766:	4641      	mov	r1, r8
 8005768:	1854      	adds	r4, r2, r1
 800576a:	4649      	mov	r1, r9
 800576c:	eb43 0501 	adc.w	r5, r3, r1
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	00eb      	lsls	r3, r5, #3
 800577a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800577e:	00e2      	lsls	r2, r4, #3
 8005780:	4614      	mov	r4, r2
 8005782:	461d      	mov	r5, r3
 8005784:	4643      	mov	r3, r8
 8005786:	18e3      	adds	r3, r4, r3
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800578c:	464b      	mov	r3, r9
 800578e:	eb45 0303 	adc.w	r3, r5, r3
 8005792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057b2:	4629      	mov	r1, r5
 80057b4:	008b      	lsls	r3, r1, #2
 80057b6:	4621      	mov	r1, r4
 80057b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057bc:	4621      	mov	r1, r4
 80057be:	008a      	lsls	r2, r1, #2
 80057c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057c4:	f7fb f83e 	bl	8000844 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4b60      	ldr	r3, [pc, #384]	@ (8005950 <UART_SetConfig+0x4e4>)
 80057ce:	fba3 2302 	umull	r2, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	011c      	lsls	r4, r3, #4
 80057d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	1891      	adds	r1, r2, r2
 80057ee:	61b9      	str	r1, [r7, #24]
 80057f0:	415b      	adcs	r3, r3
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f8:	4641      	mov	r1, r8
 80057fa:	1851      	adds	r1, r2, r1
 80057fc:	6139      	str	r1, [r7, #16]
 80057fe:	4649      	mov	r1, r9
 8005800:	414b      	adcs	r3, r1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005810:	4659      	mov	r1, fp
 8005812:	00cb      	lsls	r3, r1, #3
 8005814:	4651      	mov	r1, sl
 8005816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800581a:	4651      	mov	r1, sl
 800581c:	00ca      	lsls	r2, r1, #3
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	4603      	mov	r3, r0
 8005824:	4642      	mov	r2, r8
 8005826:	189b      	adds	r3, r3, r2
 8005828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800582c:	464b      	mov	r3, r9
 800582e:	460a      	mov	r2, r1
 8005830:	eb42 0303 	adc.w	r3, r2, r3
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005842:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005850:	4649      	mov	r1, r9
 8005852:	008b      	lsls	r3, r1, #2
 8005854:	4641      	mov	r1, r8
 8005856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585a:	4641      	mov	r1, r8
 800585c:	008a      	lsls	r2, r1, #2
 800585e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005862:	f7fa ffef 	bl	8000844 <__aeabi_uldivmod>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4611      	mov	r1, r2
 800586c:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2301 	umull	r2, r3, r3, r1
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2264      	movs	r2, #100	@ 0x64
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	1acb      	subs	r3, r1, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	3332      	adds	r3, #50	@ 0x32
 8005880:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <UART_SetConfig+0x4e4>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800588c:	441c      	add	r4, r3
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005892:	2200      	movs	r2, #0
 8005894:	673b      	str	r3, [r7, #112]	@ 0x70
 8005896:	677a      	str	r2, [r7, #116]	@ 0x74
 8005898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	415b      	adcs	r3, r3
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ac:	4641      	mov	r1, r8
 80058ae:	1851      	adds	r1, r2, r1
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	4649      	mov	r1, r9
 80058b4:	414b      	adcs	r3, r1
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058c4:	4659      	mov	r1, fp
 80058c6:	00cb      	lsls	r3, r1, #3
 80058c8:	4651      	mov	r1, sl
 80058ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ce:	4651      	mov	r1, sl
 80058d0:	00ca      	lsls	r2, r1, #3
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	4642      	mov	r2, r8
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058de:	464b      	mov	r3, r9
 80058e0:	460a      	mov	r2, r1
 80058e2:	eb42 0303 	adc.w	r3, r2, r3
 80058e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005900:	4649      	mov	r1, r9
 8005902:	008b      	lsls	r3, r1, #2
 8005904:	4641      	mov	r1, r8
 8005906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590a:	4641      	mov	r1, r8
 800590c:	008a      	lsls	r2, r1, #2
 800590e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005912:	f7fa ff97 	bl	8000844 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <UART_SetConfig+0x4e4>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	@ 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	3332      	adds	r3, #50	@ 0x32
 800592e:	4a08      	ldr	r2, [pc, #32]	@ (8005950 <UART_SetConfig+0x4e4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4422      	add	r2, r4
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800594a:	46bd      	mov	sp, r7
 800594c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005950:	51eb851f 	.word	0x51eb851f

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <__libc_init_array>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4d0d      	ldr	r5, [pc, #52]	@ (800599c <__libc_init_array+0x38>)
 8005968:	4c0d      	ldr	r4, [pc, #52]	@ (80059a0 <__libc_init_array+0x3c>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	2600      	movs	r6, #0
 8005970:	42a6      	cmp	r6, r4
 8005972:	d109      	bne.n	8005988 <__libc_init_array+0x24>
 8005974:	4d0b      	ldr	r5, [pc, #44]	@ (80059a4 <__libc_init_array+0x40>)
 8005976:	4c0c      	ldr	r4, [pc, #48]	@ (80059a8 <__libc_init_array+0x44>)
 8005978:	f000 fd46 	bl	8006408 <_init>
 800597c:	1b64      	subs	r4, r4, r5
 800597e:	10a4      	asrs	r4, r4, #2
 8005980:	2600      	movs	r6, #0
 8005982:	42a6      	cmp	r6, r4
 8005984:	d105      	bne.n	8005992 <__libc_init_array+0x2e>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	f855 3b04 	ldr.w	r3, [r5], #4
 800598c:	4798      	blx	r3
 800598e:	3601      	adds	r6, #1
 8005990:	e7ee      	b.n	8005970 <__libc_init_array+0xc>
 8005992:	f855 3b04 	ldr.w	r3, [r5], #4
 8005996:	4798      	blx	r3
 8005998:	3601      	adds	r6, #1
 800599a:	e7f2      	b.n	8005982 <__libc_init_array+0x1e>
 800599c:	08006818 	.word	0x08006818
 80059a0:	08006818 	.word	0x08006818
 80059a4:	08006818 	.word	0x08006818
 80059a8:	0800681c 	.word	0x0800681c

080059ac <cosf>:
 80059ac:	ee10 3a10 	vmov	r3, s0
 80059b0:	b507      	push	{r0, r1, r2, lr}
 80059b2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <cosf+0x80>)
 80059b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d806      	bhi.n	80059ca <cosf+0x1e>
 80059bc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005a30 <cosf+0x84>
 80059c0:	b003      	add	sp, #12
 80059c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c6:	f000 b835 	b.w	8005a34 <__kernel_cosf>
 80059ca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80059ce:	d304      	bcc.n	80059da <cosf+0x2e>
 80059d0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80059d4:	b003      	add	sp, #12
 80059d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80059da:	4668      	mov	r0, sp
 80059dc:	f000 f8ca 	bl	8005b74 <__ieee754_rem_pio2f>
 80059e0:	f000 0003 	and.w	r0, r0, #3
 80059e4:	2801      	cmp	r0, #1
 80059e6:	d009      	beq.n	80059fc <cosf+0x50>
 80059e8:	2802      	cmp	r0, #2
 80059ea:	d010      	beq.n	8005a0e <cosf+0x62>
 80059ec:	b9b0      	cbnz	r0, 8005a1c <cosf+0x70>
 80059ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80059f2:	ed9d 0a00 	vldr	s0, [sp]
 80059f6:	f000 f81d 	bl	8005a34 <__kernel_cosf>
 80059fa:	e7eb      	b.n	80059d4 <cosf+0x28>
 80059fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a00:	ed9d 0a00 	vldr	s0, [sp]
 8005a04:	f000 f86e 	bl	8005ae4 <__kernel_sinf>
 8005a08:	eeb1 0a40 	vneg.f32	s0, s0
 8005a0c:	e7e2      	b.n	80059d4 <cosf+0x28>
 8005a0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a12:	ed9d 0a00 	vldr	s0, [sp]
 8005a16:	f000 f80d 	bl	8005a34 <__kernel_cosf>
 8005a1a:	e7f5      	b.n	8005a08 <cosf+0x5c>
 8005a1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a20:	ed9d 0a00 	vldr	s0, [sp]
 8005a24:	2001      	movs	r0, #1
 8005a26:	f000 f85d 	bl	8005ae4 <__kernel_sinf>
 8005a2a:	e7d3      	b.n	80059d4 <cosf+0x28>
 8005a2c:	3f490fd8 	.word	0x3f490fd8
 8005a30:	00000000 	.word	0x00000000

08005a34 <__kernel_cosf>:
 8005a34:	ee10 3a10 	vmov	r3, s0
 8005a38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a3c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005a40:	eef0 6a40 	vmov.f32	s13, s0
 8005a44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005a48:	d204      	bcs.n	8005a54 <__kernel_cosf+0x20>
 8005a4a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005a4e:	ee17 2a90 	vmov	r2, s15
 8005a52:	b342      	cbz	r2, 8005aa6 <__kernel_cosf+0x72>
 8005a54:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005a58:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005ac4 <__kernel_cosf+0x90>
 8005a5c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005ac8 <__kernel_cosf+0x94>
 8005a60:	4a1a      	ldr	r2, [pc, #104]	@ (8005acc <__kernel_cosf+0x98>)
 8005a62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005a66:	4293      	cmp	r3, r2
 8005a68:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005ad0 <__kernel_cosf+0x9c>
 8005a6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005a70:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005ad4 <__kernel_cosf+0xa0>
 8005a74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005a78:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005ad8 <__kernel_cosf+0xa4>
 8005a7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005a80:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005adc <__kernel_cosf+0xa8>
 8005a84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005a88:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005a8c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005a90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005a94:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9c:	d804      	bhi.n	8005aa8 <__kernel_cosf+0x74>
 8005a9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005aa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005aa6:	4770      	bx	lr
 8005aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae0 <__kernel_cosf+0xac>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bf9a      	itte	ls
 8005aae:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005ab2:	ee07 3a10 	vmovls	s14, r3
 8005ab6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005aba:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ac2:	e7ec      	b.n	8005a9e <__kernel_cosf+0x6a>
 8005ac4:	ad47d74e 	.word	0xad47d74e
 8005ac8:	310f74f6 	.word	0x310f74f6
 8005acc:	3e999999 	.word	0x3e999999
 8005ad0:	b493f27c 	.word	0xb493f27c
 8005ad4:	37d00d01 	.word	0x37d00d01
 8005ad8:	bab60b61 	.word	0xbab60b61
 8005adc:	3d2aaaab 	.word	0x3d2aaaab
 8005ae0:	3f480000 	.word	0x3f480000

08005ae4 <__kernel_sinf>:
 8005ae4:	ee10 3a10 	vmov	r3, s0
 8005ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005aec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005af0:	d204      	bcs.n	8005afc <__kernel_sinf+0x18>
 8005af2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005af6:	ee17 3a90 	vmov	r3, s15
 8005afa:	b35b      	cbz	r3, 8005b54 <__kernel_sinf+0x70>
 8005afc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005b00:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005b58 <__kernel_sinf+0x74>
 8005b04:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005b5c <__kernel_sinf+0x78>
 8005b08:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005b0c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005b60 <__kernel_sinf+0x7c>
 8005b10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b14:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005b64 <__kernel_sinf+0x80>
 8005b18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005b1c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005b68 <__kernel_sinf+0x84>
 8005b20:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005b24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b28:	b930      	cbnz	r0, 8005b38 <__kernel_sinf+0x54>
 8005b2a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005b6c <__kernel_sinf+0x88>
 8005b2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005b32:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005b36:	4770      	bx	lr
 8005b38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005b3c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005b40:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005b44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005b48:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005b70 <__kernel_sinf+0x8c>
 8005b4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005b50:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2f2ec9d3 	.word	0x2f2ec9d3
 8005b5c:	b2d72f34 	.word	0xb2d72f34
 8005b60:	3638ef1b 	.word	0x3638ef1b
 8005b64:	b9500d01 	.word	0xb9500d01
 8005b68:	3c088889 	.word	0x3c088889
 8005b6c:	be2aaaab 	.word	0xbe2aaaab
 8005b70:	3e2aaaab 	.word	0x3e2aaaab

08005b74 <__ieee754_rem_pio2f>:
 8005b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b76:	ee10 6a10 	vmov	r6, s0
 8005b7a:	4b88      	ldr	r3, [pc, #544]	@ (8005d9c <__ieee754_rem_pio2f+0x228>)
 8005b7c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005b80:	429d      	cmp	r5, r3
 8005b82:	b087      	sub	sp, #28
 8005b84:	4604      	mov	r4, r0
 8005b86:	d805      	bhi.n	8005b94 <__ieee754_rem_pio2f+0x20>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	ed80 0a00 	vstr	s0, [r0]
 8005b8e:	6043      	str	r3, [r0, #4]
 8005b90:	2000      	movs	r0, #0
 8005b92:	e022      	b.n	8005bda <__ieee754_rem_pio2f+0x66>
 8005b94:	4b82      	ldr	r3, [pc, #520]	@ (8005da0 <__ieee754_rem_pio2f+0x22c>)
 8005b96:	429d      	cmp	r5, r3
 8005b98:	d83a      	bhi.n	8005c10 <__ieee754_rem_pio2f+0x9c>
 8005b9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005da4 <__ieee754_rem_pio2f+0x230>
 8005ba4:	4a80      	ldr	r2, [pc, #512]	@ (8005da8 <__ieee754_rem_pio2f+0x234>)
 8005ba6:	f023 030f 	bic.w	r3, r3, #15
 8005baa:	dd18      	ble.n	8005bde <__ieee754_rem_pio2f+0x6a>
 8005bac:	4293      	cmp	r3, r2
 8005bae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005bb2:	bf09      	itett	eq
 8005bb4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005dac <__ieee754_rem_pio2f+0x238>
 8005bb8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005db0 <__ieee754_rem_pio2f+0x23c>
 8005bbc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005db4 <__ieee754_rem_pio2f+0x240>
 8005bc0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005bc4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bcc:	ed80 7a00 	vstr	s14, [r0]
 8005bd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8005bd8:	2001      	movs	r0, #1
 8005bda:	b007      	add	sp, #28
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bde:	4293      	cmp	r3, r2
 8005be0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005be4:	bf09      	itett	eq
 8005be6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005dac <__ieee754_rem_pio2f+0x238>
 8005bea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005db0 <__ieee754_rem_pio2f+0x23c>
 8005bee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005db4 <__ieee754_rem_pio2f+0x240>
 8005bf2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005bf6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bfe:	ed80 7a00 	vstr	s14, [r0]
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	edc0 7a01 	vstr	s15, [r0, #4]
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	e7e4      	b.n	8005bda <__ieee754_rem_pio2f+0x66>
 8005c10:	4b69      	ldr	r3, [pc, #420]	@ (8005db8 <__ieee754_rem_pio2f+0x244>)
 8005c12:	429d      	cmp	r5, r3
 8005c14:	d873      	bhi.n	8005cfe <__ieee754_rem_pio2f+0x18a>
 8005c16:	f000 f8dd 	bl	8005dd4 <fabsf>
 8005c1a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005dbc <__ieee754_rem_pio2f+0x248>
 8005c1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005c22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c2e:	ee17 0a90 	vmov	r0, s15
 8005c32:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005da4 <__ieee754_rem_pio2f+0x230>
 8005c36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005c3a:	281f      	cmp	r0, #31
 8005c3c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005db0 <__ieee754_rem_pio2f+0x23c>
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	eeb1 6a47 	vneg.f32	s12, s14
 8005c48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005c4c:	ee16 1a90 	vmov	r1, s13
 8005c50:	dc09      	bgt.n	8005c66 <__ieee754_rem_pio2f+0xf2>
 8005c52:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc0 <__ieee754_rem_pio2f+0x24c>)
 8005c54:	1e47      	subs	r7, r0, #1
 8005c56:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005c5a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d107      	bne.n	8005c76 <__ieee754_rem_pio2f+0x102>
 8005c66:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005c6a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005c6e:	2a08      	cmp	r2, #8
 8005c70:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005c74:	dc14      	bgt.n	8005ca0 <__ieee754_rem_pio2f+0x12c>
 8005c76:	6021      	str	r1, [r4, #0]
 8005c78:	ed94 7a00 	vldr	s14, [r4]
 8005c7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005c80:	2e00      	cmp	r6, #0
 8005c82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c86:	ed84 0a01 	vstr	s0, [r4, #4]
 8005c8a:	daa6      	bge.n	8005bda <__ieee754_rem_pio2f+0x66>
 8005c8c:	eeb1 7a47 	vneg.f32	s14, s14
 8005c90:	eeb1 0a40 	vneg.f32	s0, s0
 8005c94:	ed84 7a00 	vstr	s14, [r4]
 8005c98:	ed84 0a01 	vstr	s0, [r4, #4]
 8005c9c:	4240      	negs	r0, r0
 8005c9e:	e79c      	b.n	8005bda <__ieee754_rem_pio2f+0x66>
 8005ca0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005dac <__ieee754_rem_pio2f+0x238>
 8005ca4:	eef0 6a40 	vmov.f32	s13, s0
 8005ca8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005cac:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005cb0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005cb4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005db4 <__ieee754_rem_pio2f+0x240>
 8005cb8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005cbc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005cc0:	ee15 2a90 	vmov	r2, s11
 8005cc4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005cc8:	1a5b      	subs	r3, r3, r1
 8005cca:	2b19      	cmp	r3, #25
 8005ccc:	dc04      	bgt.n	8005cd8 <__ieee754_rem_pio2f+0x164>
 8005cce:	edc4 5a00 	vstr	s11, [r4]
 8005cd2:	eeb0 0a66 	vmov.f32	s0, s13
 8005cd6:	e7cf      	b.n	8005c78 <__ieee754_rem_pio2f+0x104>
 8005cd8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005dc4 <__ieee754_rem_pio2f+0x250>
 8005cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8005ce0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005ce4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005ce8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005dc8 <__ieee754_rem_pio2f+0x254>
 8005cec:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005cf0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005cf4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005cf8:	ed84 7a00 	vstr	s14, [r4]
 8005cfc:	e7bc      	b.n	8005c78 <__ieee754_rem_pio2f+0x104>
 8005cfe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8005d02:	d306      	bcc.n	8005d12 <__ieee754_rem_pio2f+0x19e>
 8005d04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005d08:	edc0 7a01 	vstr	s15, [r0, #4]
 8005d0c:	edc0 7a00 	vstr	s15, [r0]
 8005d10:	e73e      	b.n	8005b90 <__ieee754_rem_pio2f+0x1c>
 8005d12:	15ea      	asrs	r2, r5, #23
 8005d14:	3a86      	subs	r2, #134	@ 0x86
 8005d16:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d22:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005dcc <__ieee754_rem_pio2f+0x258>
 8005d26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005d32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d42:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005d46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	edcd 7a05 	vstr	s15, [sp, #20]
 8005d56:	d11e      	bne.n	8005d96 <__ieee754_rem_pio2f+0x222>
 8005d58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2302      	movne	r3, #2
 8005d66:	491a      	ldr	r1, [pc, #104]	@ (8005dd0 <__ieee754_rem_pio2f+0x25c>)
 8005d68:	9101      	str	r1, [sp, #4]
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	9100      	str	r1, [sp, #0]
 8005d6e:	a803      	add	r0, sp, #12
 8005d70:	4621      	mov	r1, r4
 8005d72:	f000 f837 	bl	8005de4 <__kernel_rem_pio2f>
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	f6bf af2f 	bge.w	8005bda <__ieee754_rem_pio2f+0x66>
 8005d7c:	edd4 7a00 	vldr	s15, [r4]
 8005d80:	eef1 7a67 	vneg.f32	s15, s15
 8005d84:	edc4 7a00 	vstr	s15, [r4]
 8005d88:	edd4 7a01 	vldr	s15, [r4, #4]
 8005d8c:	eef1 7a67 	vneg.f32	s15, s15
 8005d90:	edc4 7a01 	vstr	s15, [r4, #4]
 8005d94:	e782      	b.n	8005c9c <__ieee754_rem_pio2f+0x128>
 8005d96:	2303      	movs	r3, #3
 8005d98:	e7e5      	b.n	8005d66 <__ieee754_rem_pio2f+0x1f2>
 8005d9a:	bf00      	nop
 8005d9c:	3f490fd8 	.word	0x3f490fd8
 8005da0:	4016cbe3 	.word	0x4016cbe3
 8005da4:	3fc90f80 	.word	0x3fc90f80
 8005da8:	3fc90fd0 	.word	0x3fc90fd0
 8005dac:	37354400 	.word	0x37354400
 8005db0:	37354443 	.word	0x37354443
 8005db4:	2e85a308 	.word	0x2e85a308
 8005db8:	43490f80 	.word	0x43490f80
 8005dbc:	3f22f984 	.word	0x3f22f984
 8005dc0:	08006440 	.word	0x08006440
 8005dc4:	2e85a300 	.word	0x2e85a300
 8005dc8:	248d3132 	.word	0x248d3132
 8005dcc:	43800000 	.word	0x43800000
 8005dd0:	080064c0 	.word	0x080064c0

08005dd4 <fabsf>:
 8005dd4:	ee10 3a10 	vmov	r3, s0
 8005dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ddc:	ee00 3a10 	vmov	s0, r3
 8005de0:	4770      	bx	lr
	...

08005de4 <__kernel_rem_pio2f>:
 8005de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	ed2d 8b04 	vpush	{d8-d9}
 8005dec:	b0d9      	sub	sp, #356	@ 0x164
 8005dee:	4690      	mov	r8, r2
 8005df0:	9001      	str	r0, [sp, #4]
 8005df2:	4ab6      	ldr	r2, [pc, #728]	@ (80060cc <__kernel_rem_pio2f+0x2e8>)
 8005df4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005df6:	f118 0f04 	cmn.w	r8, #4
 8005dfa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005dfe:	460f      	mov	r7, r1
 8005e00:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e04:	db26      	blt.n	8005e54 <__kernel_rem_pio2f+0x70>
 8005e06:	f1b8 0203 	subs.w	r2, r8, #3
 8005e0a:	bf48      	it	mi
 8005e0c:	f108 0204 	addmi.w	r2, r8, #4
 8005e10:	10d2      	asrs	r2, r2, #3
 8005e12:	1c55      	adds	r5, r2, #1
 8005e14:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005e16:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 8005e1a:	00e8      	lsls	r0, r5, #3
 8005e1c:	eba2 060b 	sub.w	r6, r2, fp
 8005e20:	9002      	str	r0, [sp, #8]
 8005e22:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005e26:	eb0a 0c0b 	add.w	ip, sl, fp
 8005e2a:	ac1c      	add	r4, sp, #112	@ 0x70
 8005e2c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005e30:	2000      	movs	r0, #0
 8005e32:	4560      	cmp	r0, ip
 8005e34:	dd10      	ble.n	8005e58 <__kernel_rem_pio2f+0x74>
 8005e36:	a91c      	add	r1, sp, #112	@ 0x70
 8005e38:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005e3c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005e40:	2600      	movs	r6, #0
 8005e42:	4556      	cmp	r6, sl
 8005e44:	dc24      	bgt.n	8005e90 <__kernel_rem_pio2f+0xac>
 8005e46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005e4a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 8005e4e:	4684      	mov	ip, r0
 8005e50:	2400      	movs	r4, #0
 8005e52:	e016      	b.n	8005e82 <__kernel_rem_pio2f+0x9e>
 8005e54:	2200      	movs	r2, #0
 8005e56:	e7dc      	b.n	8005e12 <__kernel_rem_pio2f+0x2e>
 8005e58:	42c6      	cmn	r6, r0
 8005e5a:	bf5d      	ittte	pl
 8005e5c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005e60:	ee07 1a90 	vmovpl	s15, r1
 8005e64:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005e68:	eef0 7a47 	vmovmi.f32	s15, s14
 8005e6c:	ece4 7a01 	vstmia	r4!, {s15}
 8005e70:	3001      	adds	r0, #1
 8005e72:	e7de      	b.n	8005e32 <__kernel_rem_pio2f+0x4e>
 8005e74:	ecfe 6a01 	vldmia	lr!, {s13}
 8005e78:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005e7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005e80:	3401      	adds	r4, #1
 8005e82:	455c      	cmp	r4, fp
 8005e84:	ddf6      	ble.n	8005e74 <__kernel_rem_pio2f+0x90>
 8005e86:	ece9 7a01 	vstmia	r9!, {s15}
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	3004      	adds	r0, #4
 8005e8e:	e7d8      	b.n	8005e42 <__kernel_rem_pio2f+0x5e>
 8005e90:	a908      	add	r1, sp, #32
 8005e92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e96:	9104      	str	r1, [sp, #16]
 8005e98:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005e9a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80060d8 <__kernel_rem_pio2f+0x2f4>
 8005e9e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80060d4 <__kernel_rem_pio2f+0x2f0>
 8005ea2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005ea6:	9203      	str	r2, [sp, #12]
 8005ea8:	4654      	mov	r4, sl
 8005eaa:	00a2      	lsls	r2, r4, #2
 8005eac:	9205      	str	r2, [sp, #20]
 8005eae:	aa58      	add	r2, sp, #352	@ 0x160
 8005eb0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005eb4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005eb8:	a944      	add	r1, sp, #272	@ 0x110
 8005eba:	aa08      	add	r2, sp, #32
 8005ebc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005ec0:	4694      	mov	ip, r2
 8005ec2:	4626      	mov	r6, r4
 8005ec4:	2e00      	cmp	r6, #0
 8005ec6:	dc4c      	bgt.n	8005f62 <__kernel_rem_pio2f+0x17e>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ece:	f000 f9f1 	bl	80062b4 <scalbnf>
 8005ed2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ed6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005eda:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005ede:	f000 fa4f 	bl	8006380 <floorf>
 8005ee2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005ee6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ef0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005ef4:	ee17 9a90 	vmov	r9, s15
 8005ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005f00:	dd41      	ble.n	8005f86 <__kernel_rem_pio2f+0x1a2>
 8005f02:	f104 3cff 	add.w	ip, r4, #4294967295
 8005f06:	a908      	add	r1, sp, #32
 8005f08:	f1c5 0e08 	rsb	lr, r5, #8
 8005f0c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005f10:	fa46 f00e 	asr.w	r0, r6, lr
 8005f14:	4481      	add	r9, r0
 8005f16:	fa00 f00e 	lsl.w	r0, r0, lr
 8005f1a:	1a36      	subs	r6, r6, r0
 8005f1c:	f1c5 0007 	rsb	r0, r5, #7
 8005f20:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005f24:	4106      	asrs	r6, r0
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	dd3c      	ble.n	8005fa4 <__kernel_rem_pio2f+0x1c0>
 8005f2a:	f04f 0e00 	mov.w	lr, #0
 8005f2e:	f109 0901 	add.w	r9, r9, #1
 8005f32:	4670      	mov	r0, lr
 8005f34:	4574      	cmp	r4, lr
 8005f36:	dc68      	bgt.n	800600a <__kernel_rem_pio2f+0x226>
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	dd03      	ble.n	8005f44 <__kernel_rem_pio2f+0x160>
 8005f3c:	2d01      	cmp	r5, #1
 8005f3e:	d074      	beq.n	800602a <__kernel_rem_pio2f+0x246>
 8005f40:	2d02      	cmp	r5, #2
 8005f42:	d07d      	beq.n	8006040 <__kernel_rem_pio2f+0x25c>
 8005f44:	2e02      	cmp	r6, #2
 8005f46:	d12d      	bne.n	8005fa4 <__kernel_rem_pio2f+0x1c0>
 8005f48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005f50:	b340      	cbz	r0, 8005fa4 <__kernel_rem_pio2f+0x1c0>
 8005f52:	4628      	mov	r0, r5
 8005f54:	9306      	str	r3, [sp, #24]
 8005f56:	f000 f9ad 	bl	80062b4 <scalbnf>
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005f60:	e020      	b.n	8005fa4 <__kernel_rem_pio2f+0x1c0>
 8005f62:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005f66:	3e01      	subs	r6, #1
 8005f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f70:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005f74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f78:	ecac 0a01 	vstmia	ip!, {s0}
 8005f7c:	ed30 0a01 	vldmdb	r0!, {s0}
 8005f80:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005f84:	e79e      	b.n	8005ec4 <__kernel_rem_pio2f+0xe0>
 8005f86:	d105      	bne.n	8005f94 <__kernel_rem_pio2f+0x1b0>
 8005f88:	1e60      	subs	r0, r4, #1
 8005f8a:	a908      	add	r1, sp, #32
 8005f8c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005f90:	11f6      	asrs	r6, r6, #7
 8005f92:	e7c8      	b.n	8005f26 <__kernel_rem_pio2f+0x142>
 8005f94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005f98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	da31      	bge.n	8006006 <__kernel_rem_pio2f+0x222>
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	f040 8098 	bne.w	80060e0 <__kernel_rem_pio2f+0x2fc>
 8005fb0:	1e60      	subs	r0, r4, #1
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4550      	cmp	r0, sl
 8005fb6:	da4b      	bge.n	8006050 <__kernel_rem_pio2f+0x26c>
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	d065      	beq.n	8006088 <__kernel_rem_pio2f+0x2a4>
 8005fbc:	3c01      	subs	r4, #1
 8005fbe:	ab08      	add	r3, sp, #32
 8005fc0:	3d08      	subs	r5, #8
 8005fc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f8      	beq.n	8005fbc <__kernel_rem_pio2f+0x1d8>
 8005fca:	4628      	mov	r0, r5
 8005fcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005fd0:	f000 f970 	bl	80062b4 <scalbnf>
 8005fd4:	1c63      	adds	r3, r4, #1
 8005fd6:	aa44      	add	r2, sp, #272	@ 0x110
 8005fd8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80060d8 <__kernel_rem_pio2f+0x2f4>
 8005fdc:	0099      	lsls	r1, r3, #2
 8005fde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f280 80a9 	bge.w	800613c <__kernel_rem_pio2f+0x358>
 8005fea:	4623      	mov	r3, r4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f2c0 80c7 	blt.w	8006180 <__kernel_rem_pio2f+0x39c>
 8005ff2:	aa44      	add	r2, sp, #272	@ 0x110
 8005ff4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005ff8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80060d0 <__kernel_rem_pio2f+0x2ec>
 8005ffc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 8006000:	2000      	movs	r0, #0
 8006002:	1ae2      	subs	r2, r4, r3
 8006004:	e0b1      	b.n	800616a <__kernel_rem_pio2f+0x386>
 8006006:	2602      	movs	r6, #2
 8006008:	e78f      	b.n	8005f2a <__kernel_rem_pio2f+0x146>
 800600a:	f852 1b04 	ldr.w	r1, [r2], #4
 800600e:	b948      	cbnz	r0, 8006024 <__kernel_rem_pio2f+0x240>
 8006010:	b121      	cbz	r1, 800601c <__kernel_rem_pio2f+0x238>
 8006012:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006016:	f842 1c04 	str.w	r1, [r2, #-4]
 800601a:	2101      	movs	r1, #1
 800601c:	f10e 0e01 	add.w	lr, lr, #1
 8006020:	4608      	mov	r0, r1
 8006022:	e787      	b.n	8005f34 <__kernel_rem_pio2f+0x150>
 8006024:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006028:	e7f5      	b.n	8006016 <__kernel_rem_pio2f+0x232>
 800602a:	f104 3cff 	add.w	ip, r4, #4294967295
 800602e:	aa08      	add	r2, sp, #32
 8006030:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006034:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006038:	a908      	add	r1, sp, #32
 800603a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800603e:	e781      	b.n	8005f44 <__kernel_rem_pio2f+0x160>
 8006040:	f104 3cff 	add.w	ip, r4, #4294967295
 8006044:	aa08      	add	r2, sp, #32
 8006046:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800604a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800604e:	e7f3      	b.n	8006038 <__kernel_rem_pio2f+0x254>
 8006050:	a908      	add	r1, sp, #32
 8006052:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006056:	3801      	subs	r0, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	e7ab      	b.n	8005fb4 <__kernel_rem_pio2f+0x1d0>
 800605c:	3201      	adds	r2, #1
 800605e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006062:	2e00      	cmp	r6, #0
 8006064:	d0fa      	beq.n	800605c <__kernel_rem_pio2f+0x278>
 8006066:	9905      	ldr	r1, [sp, #20]
 8006068:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800606c:	eb0d 0001 	add.w	r0, sp, r1
 8006070:	18e6      	adds	r6, r4, r3
 8006072:	a91c      	add	r1, sp, #112	@ 0x70
 8006074:	f104 0c01 	add.w	ip, r4, #1
 8006078:	384c      	subs	r0, #76	@ 0x4c
 800607a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800607e:	4422      	add	r2, r4
 8006080:	4562      	cmp	r2, ip
 8006082:	da04      	bge.n	800608e <__kernel_rem_pio2f+0x2aa>
 8006084:	4614      	mov	r4, r2
 8006086:	e710      	b.n	8005eaa <__kernel_rem_pio2f+0xc6>
 8006088:	9804      	ldr	r0, [sp, #16]
 800608a:	2201      	movs	r2, #1
 800608c:	e7e7      	b.n	800605e <__kernel_rem_pio2f+0x27a>
 800608e:	9903      	ldr	r1, [sp, #12]
 8006090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006094:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	ee07 1a90 	vmov	s15, r1
 800609e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a2:	2400      	movs	r4, #0
 80060a4:	ece6 7a01 	vstmia	r6!, {s15}
 80060a8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 80060ac:	46b1      	mov	r9, r6
 80060ae:	455c      	cmp	r4, fp
 80060b0:	dd04      	ble.n	80060bc <__kernel_rem_pio2f+0x2d8>
 80060b2:	ece0 7a01 	vstmia	r0!, {s15}
 80060b6:	f10c 0c01 	add.w	ip, ip, #1
 80060ba:	e7e1      	b.n	8006080 <__kernel_rem_pio2f+0x29c>
 80060bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80060c0:	ed39 7a01 	vldmdb	r9!, {s14}
 80060c4:	3401      	adds	r4, #1
 80060c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80060ca:	e7f0      	b.n	80060ae <__kernel_rem_pio2f+0x2ca>
 80060cc:	08006804 	.word	0x08006804
 80060d0:	080067d8 	.word	0x080067d8
 80060d4:	43800000 	.word	0x43800000
 80060d8:	3b800000 	.word	0x3b800000
 80060dc:	00000000 	.word	0x00000000
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	eeb0 0a48 	vmov.f32	s0, s16
 80060e6:	eba3 0008 	sub.w	r0, r3, r8
 80060ea:	f000 f8e3 	bl	80062b4 <scalbnf>
 80060ee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80060d4 <__kernel_rem_pio2f+0x2f0>
 80060f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80060f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fa:	db19      	blt.n	8006130 <__kernel_rem_pio2f+0x34c>
 80060fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80060d8 <__kernel_rem_pio2f+0x2f4>
 8006100:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006104:	aa08      	add	r2, sp, #32
 8006106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610a:	3508      	adds	r5, #8
 800610c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006110:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006118:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800611c:	ee10 3a10 	vmov	r3, s0
 8006120:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006124:	ee17 3a90 	vmov	r3, s15
 8006128:	3401      	adds	r4, #1
 800612a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800612e:	e74c      	b.n	8005fca <__kernel_rem_pio2f+0x1e6>
 8006130:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006134:	aa08      	add	r2, sp, #32
 8006136:	ee10 3a10 	vmov	r3, s0
 800613a:	e7f6      	b.n	800612a <__kernel_rem_pio2f+0x346>
 800613c:	a808      	add	r0, sp, #32
 800613e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006142:	9001      	str	r0, [sp, #4]
 8006144:	ee07 0a90 	vmov	s15, r0
 8006148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614c:	3b01      	subs	r3, #1
 800614e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006152:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006156:	ed62 7a01 	vstmdb	r2!, {s15}
 800615a:	e743      	b.n	8005fe4 <__kernel_rem_pio2f+0x200>
 800615c:	ecfc 6a01 	vldmia	ip!, {s13}
 8006160:	ecb5 7a01 	vldmia	r5!, {s14}
 8006164:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006168:	3001      	adds	r0, #1
 800616a:	4550      	cmp	r0, sl
 800616c:	dc01      	bgt.n	8006172 <__kernel_rem_pio2f+0x38e>
 800616e:	4290      	cmp	r0, r2
 8006170:	ddf4      	ble.n	800615c <__kernel_rem_pio2f+0x378>
 8006172:	a858      	add	r0, sp, #352	@ 0x160
 8006174:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006178:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800617c:	3b01      	subs	r3, #1
 800617e:	e735      	b.n	8005fec <__kernel_rem_pio2f+0x208>
 8006180:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006182:	2b02      	cmp	r3, #2
 8006184:	dc09      	bgt.n	800619a <__kernel_rem_pio2f+0x3b6>
 8006186:	2b00      	cmp	r3, #0
 8006188:	dc27      	bgt.n	80061da <__kernel_rem_pio2f+0x3f6>
 800618a:	d040      	beq.n	800620e <__kernel_rem_pio2f+0x42a>
 800618c:	f009 0007 	and.w	r0, r9, #7
 8006190:	b059      	add	sp, #356	@ 0x164
 8006192:	ecbd 8b04 	vpop	{d8-d9}
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800619c:	2b03      	cmp	r3, #3
 800619e:	d1f5      	bne.n	800618c <__kernel_rem_pio2f+0x3a8>
 80061a0:	aa30      	add	r2, sp, #192	@ 0xc0
 80061a2:	1f0b      	subs	r3, r1, #4
 80061a4:	4413      	add	r3, r2
 80061a6:	461a      	mov	r2, r3
 80061a8:	4620      	mov	r0, r4
 80061aa:	2800      	cmp	r0, #0
 80061ac:	dc50      	bgt.n	8006250 <__kernel_rem_pio2f+0x46c>
 80061ae:	4622      	mov	r2, r4
 80061b0:	2a01      	cmp	r2, #1
 80061b2:	dc5d      	bgt.n	8006270 <__kernel_rem_pio2f+0x48c>
 80061b4:	ab30      	add	r3, sp, #192	@ 0xc0
 80061b6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 80061ba:	440b      	add	r3, r1
 80061bc:	2c01      	cmp	r4, #1
 80061be:	dc67      	bgt.n	8006290 <__kernel_rem_pio2f+0x4ac>
 80061c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80061c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80061c8:	2e00      	cmp	r6, #0
 80061ca:	d167      	bne.n	800629c <__kernel_rem_pio2f+0x4b8>
 80061cc:	edc7 6a00 	vstr	s13, [r7]
 80061d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80061d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80061d8:	e7d8      	b.n	800618c <__kernel_rem_pio2f+0x3a8>
 80061da:	ab30      	add	r3, sp, #192	@ 0xc0
 80061dc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 80061e0:	440b      	add	r3, r1
 80061e2:	4622      	mov	r2, r4
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	da24      	bge.n	8006232 <__kernel_rem_pio2f+0x44e>
 80061e8:	b34e      	cbz	r6, 800623e <__kernel_rem_pio2f+0x45a>
 80061ea:	eef1 7a47 	vneg.f32	s15, s14
 80061ee:	edc7 7a00 	vstr	s15, [r7]
 80061f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80061f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061fa:	aa31      	add	r2, sp, #196	@ 0xc4
 80061fc:	2301      	movs	r3, #1
 80061fe:	429c      	cmp	r4, r3
 8006200:	da20      	bge.n	8006244 <__kernel_rem_pio2f+0x460>
 8006202:	b10e      	cbz	r6, 8006208 <__kernel_rem_pio2f+0x424>
 8006204:	eef1 7a67 	vneg.f32	s15, s15
 8006208:	edc7 7a01 	vstr	s15, [r7, #4]
 800620c:	e7be      	b.n	800618c <__kernel_rem_pio2f+0x3a8>
 800620e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006210:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80060dc <__kernel_rem_pio2f+0x2f8>
 8006214:	440b      	add	r3, r1
 8006216:	2c00      	cmp	r4, #0
 8006218:	da05      	bge.n	8006226 <__kernel_rem_pio2f+0x442>
 800621a:	b10e      	cbz	r6, 8006220 <__kernel_rem_pio2f+0x43c>
 800621c:	eef1 7a67 	vneg.f32	s15, s15
 8006220:	edc7 7a00 	vstr	s15, [r7]
 8006224:	e7b2      	b.n	800618c <__kernel_rem_pio2f+0x3a8>
 8006226:	ed33 7a01 	vldmdb	r3!, {s14}
 800622a:	3c01      	subs	r4, #1
 800622c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006230:	e7f1      	b.n	8006216 <__kernel_rem_pio2f+0x432>
 8006232:	ed73 7a01 	vldmdb	r3!, {s15}
 8006236:	3a01      	subs	r2, #1
 8006238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800623c:	e7d2      	b.n	80061e4 <__kernel_rem_pio2f+0x400>
 800623e:	eef0 7a47 	vmov.f32	s15, s14
 8006242:	e7d4      	b.n	80061ee <__kernel_rem_pio2f+0x40a>
 8006244:	ecb2 7a01 	vldmia	r2!, {s14}
 8006248:	3301      	adds	r3, #1
 800624a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800624e:	e7d6      	b.n	80061fe <__kernel_rem_pio2f+0x41a>
 8006250:	ed72 7a01 	vldmdb	r2!, {s15}
 8006254:	edd2 6a01 	vldr	s13, [r2, #4]
 8006258:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800625c:	3801      	subs	r0, #1
 800625e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006262:	ed82 7a00 	vstr	s14, [r2]
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	edc2 7a01 	vstr	s15, [r2, #4]
 800626e:	e79c      	b.n	80061aa <__kernel_rem_pio2f+0x3c6>
 8006270:	ed73 7a01 	vldmdb	r3!, {s15}
 8006274:	edd3 6a01 	vldr	s13, [r3, #4]
 8006278:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800627c:	3a01      	subs	r2, #1
 800627e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006282:	ed83 7a00 	vstr	s14, [r3]
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628a:	edc3 7a01 	vstr	s15, [r3, #4]
 800628e:	e78f      	b.n	80061b0 <__kernel_rem_pio2f+0x3cc>
 8006290:	ed33 7a01 	vldmdb	r3!, {s14}
 8006294:	3c01      	subs	r4, #1
 8006296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800629a:	e78f      	b.n	80061bc <__kernel_rem_pio2f+0x3d8>
 800629c:	eef1 6a66 	vneg.f32	s13, s13
 80062a0:	eeb1 7a47 	vneg.f32	s14, s14
 80062a4:	edc7 6a00 	vstr	s13, [r7]
 80062a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80062ac:	eef1 7a67 	vneg.f32	s15, s15
 80062b0:	e790      	b.n	80061d4 <__kernel_rem_pio2f+0x3f0>
 80062b2:	bf00      	nop

080062b4 <scalbnf>:
 80062b4:	ee10 3a10 	vmov	r3, s0
 80062b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80062bc:	d02b      	beq.n	8006316 <scalbnf+0x62>
 80062be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80062c2:	d302      	bcc.n	80062ca <scalbnf+0x16>
 80062c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062c8:	4770      	bx	lr
 80062ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80062ce:	d123      	bne.n	8006318 <scalbnf+0x64>
 80062d0:	4b24      	ldr	r3, [pc, #144]	@ (8006364 <scalbnf+0xb0>)
 80062d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006368 <scalbnf+0xb4>
 80062d6:	4298      	cmp	r0, r3
 80062d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80062dc:	db17      	blt.n	800630e <scalbnf+0x5a>
 80062de:	ee10 3a10 	vmov	r3, s0
 80062e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80062e6:	3a19      	subs	r2, #25
 80062e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80062ec:	4288      	cmp	r0, r1
 80062ee:	dd15      	ble.n	800631c <scalbnf+0x68>
 80062f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800636c <scalbnf+0xb8>
 80062f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006370 <scalbnf+0xbc>
 80062f8:	ee10 3a10 	vmov	r3, s0
 80062fc:	eeb0 7a67 	vmov.f32	s14, s15
 8006300:	2b00      	cmp	r3, #0
 8006302:	bfb8      	it	lt
 8006304:	eef0 7a66 	vmovlt.f32	s15, s13
 8006308:	ee27 0a87 	vmul.f32	s0, s15, s14
 800630c:	4770      	bx	lr
 800630e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006374 <scalbnf+0xc0>
 8006312:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006316:	4770      	bx	lr
 8006318:	0dd2      	lsrs	r2, r2, #23
 800631a:	e7e5      	b.n	80062e8 <scalbnf+0x34>
 800631c:	4410      	add	r0, r2
 800631e:	28fe      	cmp	r0, #254	@ 0xfe
 8006320:	dce6      	bgt.n	80062f0 <scalbnf+0x3c>
 8006322:	2800      	cmp	r0, #0
 8006324:	dd06      	ble.n	8006334 <scalbnf+0x80>
 8006326:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800632a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800632e:	ee00 3a10 	vmov	s0, r3
 8006332:	4770      	bx	lr
 8006334:	f110 0f16 	cmn.w	r0, #22
 8006338:	da09      	bge.n	800634e <scalbnf+0x9a>
 800633a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006374 <scalbnf+0xc0>
 800633e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006378 <scalbnf+0xc4>
 8006342:	ee10 3a10 	vmov	r3, s0
 8006346:	eeb0 7a67 	vmov.f32	s14, s15
 800634a:	2b00      	cmp	r3, #0
 800634c:	e7d9      	b.n	8006302 <scalbnf+0x4e>
 800634e:	3019      	adds	r0, #25
 8006350:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006354:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006358:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800637c <scalbnf+0xc8>
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	e7d7      	b.n	8006312 <scalbnf+0x5e>
 8006362:	bf00      	nop
 8006364:	ffff3cb0 	.word	0xffff3cb0
 8006368:	4c000000 	.word	0x4c000000
 800636c:	7149f2ca 	.word	0x7149f2ca
 8006370:	f149f2ca 	.word	0xf149f2ca
 8006374:	0da24260 	.word	0x0da24260
 8006378:	8da24260 	.word	0x8da24260
 800637c:	33000000 	.word	0x33000000

08006380 <floorf>:
 8006380:	ee10 3a10 	vmov	r3, s0
 8006384:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006388:	3a7f      	subs	r2, #127	@ 0x7f
 800638a:	2a16      	cmp	r2, #22
 800638c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006390:	dc2b      	bgt.n	80063ea <floorf+0x6a>
 8006392:	2a00      	cmp	r2, #0
 8006394:	da12      	bge.n	80063bc <floorf+0x3c>
 8006396:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80063fc <floorf+0x7c>
 800639a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800639e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80063a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a6:	dd06      	ble.n	80063b6 <floorf+0x36>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da24      	bge.n	80063f6 <floorf+0x76>
 80063ac:	2900      	cmp	r1, #0
 80063ae:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <floorf+0x80>)
 80063b0:	bf08      	it	eq
 80063b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80063b6:	ee00 3a10 	vmov	s0, r3
 80063ba:	4770      	bx	lr
 80063bc:	4911      	ldr	r1, [pc, #68]	@ (8006404 <floorf+0x84>)
 80063be:	4111      	asrs	r1, r2
 80063c0:	420b      	tst	r3, r1
 80063c2:	d0fa      	beq.n	80063ba <floorf+0x3a>
 80063c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80063fc <floorf+0x7c>
 80063c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80063cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d4:	ddef      	ble.n	80063b6 <floorf+0x36>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfbe      	ittt	lt
 80063da:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80063de:	fa40 f202 	asrlt.w	r2, r0, r2
 80063e2:	189b      	addlt	r3, r3, r2
 80063e4:	ea23 0301 	bic.w	r3, r3, r1
 80063e8:	e7e5      	b.n	80063b6 <floorf+0x36>
 80063ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80063ee:	d3e4      	bcc.n	80063ba <floorf+0x3a>
 80063f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80063f4:	4770      	bx	lr
 80063f6:	2300      	movs	r3, #0
 80063f8:	e7dd      	b.n	80063b6 <floorf+0x36>
 80063fa:	bf00      	nop
 80063fc:	7149f2ca 	.word	0x7149f2ca
 8006400:	bf800000 	.word	0xbf800000
 8006404:	007fffff 	.word	0x007fffff

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr
