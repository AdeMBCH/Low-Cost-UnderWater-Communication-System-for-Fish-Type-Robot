
Accoustic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000660c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080067a4  080067a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b9c  08006b9c  00007b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba4  08006ba4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006bac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000858c  20000010  08006bbc  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000859c  08006bbc  0000859c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013068  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab6  00000000  00000000  0001b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3e  00000000  00000000  0001ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018457  00000000  00000000  0001f976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c5a  00000000  00000000  00037dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c42f  00000000  00000000  0004ba27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e4  00000000  00000000  000e7e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000ec880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800678c 	.word	0x0800678c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800678c 	.word	0x0800678c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MCP4922_Select>:
static IQTransmitter iq_tx;

#define MCP4922_CS_GPIO GPIOA
#define MCP4922_CS_PIN GPIO_PIN_4

static void MCP4922_Select(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <MCP4922_Select+0x14>)
 8000b7a:	f002 ffd3 	bl	8003b24 <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000

08000b88 <MCP4922_Unselect>:

static void MCP4922_Unselect(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <MCP4922_Unselect+0x14>)
 8000b92:	f002 ffc7 	bl	8003b24 <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <MCP4922_Pack>:

static uint16_t MCP4922_Pack(uint8_t channel, uint16_t val12) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	80bb      	strh	r3, [r7, #4]
    val12 &= 0x0FFF; // 12 bits
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bb6:	80bb      	strh	r3, [r7, #4]
    uint16_t ctrl = (channel ? 0xB000 : 0x3000); // Channel B : 1, A : 0, Gain=1x, buffered
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <MCP4922_Pack+0x24>
 8000bbe:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000bc2:	e001      	b.n	8000bc8 <MCP4922_Pack+0x28>
 8000bc4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000bc8:	81fb      	strh	r3, [r7, #14]
    return ctrl | val12;
 8000bca:	89fa      	ldrh	r2, [r7, #14]
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b29b      	uxth	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <IQTransmitter_InitFromBuffer>:

void IQTransmitter_InitFromBuffer(const int16_t* signal, uint16_t length) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
    iq_tx.buffer = signal;
 8000bec:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <IQTransmitter_InitFromBuffer+0x30>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
    iq_tx.length = length;
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <IQTransmitter_InitFromBuffer+0x30>)
 8000bf6:	6053      	str	r3, [r2, #4]
    iq_tx.index = 0;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <IQTransmitter_InitFromBuffer+0x30>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    iq_tx.active = 0;
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <IQTransmitter_InitFromBuffer+0x30>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	731a      	strb	r2, [r3, #12]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	2000002c 	.word	0x2000002c

08000c14 <IQTransmitter_Start>:


void IQTransmitter_Start(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    iq_tx.active = 1;
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <IQTransmitter_Start+0x1c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	731a      	strb	r2, [r3, #12]
    iq_tx.index = 0;
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <IQTransmitter_Start+0x1c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    HAL_TIM_Base_Start_IT(&htim2);
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <IQTransmitter_Start+0x20>)
 8000c26:	f003 ff5d 	bl	8004ae4 <HAL_TIM_Base_Start_IT>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000002c 	.word	0x2000002c
 8000c34:	2000019c 	.word	0x2000019c

08000c38 <IQTransmitter_Stop>:

void IQTransmitter_Stop(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
    iq_tx.active = 0;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <IQTransmitter_Stop+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	731a      	strb	r2, [r3, #12]
    HAL_TIM_Base_Stop_IT(&htim2);
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <IQTransmitter_Stop+0x50>)
 8000c46:	f003 ffaf 	bl	8004ba8 <HAL_TIM_Base_Stop_IT>

    // 🔧 Forcer la sortie à 0V
    uint16_t spi_word = MCP4922_Pack(0, 0); // canal A, valeur 0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ffa7 	bl	8000ba0 <MCP4922_Pack>
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
    uint8_t spi_buf[2] = { (spi_word >> 8) & 0xFF, spi_word & 0xFF };
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	713b      	strb	r3, [r7, #4]
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	717b      	strb	r3, [r7, #5]

    MCP4922_Select();
 8000c66:	f7ff ff83 	bl	8000b70 <MCP4922_Select>
    HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 8000c6a:	1d39      	adds	r1, r7, #4
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	2202      	movs	r2, #2
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <IQTransmitter_Stop+0x54>)
 8000c74:	f003 fc6b 	bl	800454e <HAL_SPI_Transmit>
    MCP4922_Unselect();
 8000c78:	f7ff ff86 	bl	8000b88 <MCP4922_Unselect>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	2000019c 	.word	0x2000019c
 8000c8c:	200000e4 	.word	0x200000e4

08000c90 <HAL_TIM_PeriodElapsedCallback>:
            IQTransmitter_Stop();
        }
    }
}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && iq_tx.active) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca0:	d147      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ca4:	7b1b      	ldrb	r3, [r3, #12]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d042      	beq.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0xa2>
        if (iq_tx.index < iq_tx.length) {
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d23a      	bcs.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x9e>
        	int16_t sample = iq_tx.buffer[iq_tx.index++];
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	1c59      	adds	r1, r3, #1
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cc4:	6081      	str	r1, [r0, #8]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	81fb      	strh	r3, [r7, #14]
        	uint16_t val = (sample + 2048 > 4095) ? 4095 : (sample + 2048 < 0 ? 0 : sample + 2048);
 8000cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cd6:	da0b      	bge.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cdc:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000ce0:	db04      	blt.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	e003      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000cec:	2300      	movs	r3, #0
 8000cee:	e001      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000cf0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000cf4:	81bb      	strh	r3, [r7, #12]

            uint16_t spi_word = MCP4922_Pack(0, val); // voie A uniquement
 8000cf6:	89bb      	ldrh	r3, [r7, #12]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff50 	bl	8000ba0 <MCP4922_Pack>
 8000d00:	4603      	mov	r3, r0
 8000d02:	817b      	strh	r3, [r7, #10]

            uint8_t spi_buf[2];
            spi_buf[0] = (spi_word >> 8) & 0xFF;
 8000d04:	897b      	ldrh	r3, [r7, #10]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	723b      	strb	r3, [r7, #8]
            spi_buf[1] = spi_word & 0xFF;
 8000d0e:	897b      	ldrh	r3, [r7, #10]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	727b      	strb	r3, [r7, #9]

            MCP4922_Select();
 8000d14:	f7ff ff2c 	bl	8000b70 <MCP4922_Select>
            HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 8000d18:	f107 0108 	add.w	r1, r7, #8
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d24:	f003 fc13 	bl	800454e <HAL_SPI_Transmit>
            MCP4922_Unselect();
 8000d28:	f7ff ff2e 	bl	8000b88 <MCP4922_Unselect>
        } else {
            IQTransmitter_Stop();
        }
    }
}
 8000d2c:	e001      	b.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0xa2>
            IQTransmitter_Stop();
 8000d2e:	f7ff ff83 	bl	8000c38 <IQTransmitter_Stop>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	200000e4 	.word	0x200000e4

08000d44 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile uint8_t adc_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <HAL_ADC_ConvCpltCallback+0x24>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d102      	bne.n	8000d5c <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_ADC_ConvCpltCallback+0x28>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	20006594 	.word	0x20006594

08000d70 <OnFrameReceived>:

void OnFrameReceived(UartProtocol* proto, uint16_t cmd, uint16_t len, uint8_t* payload)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b099      	sub	sp, #100	@ 0x64
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	817b      	strh	r3, [r7, #10]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	813b      	strh	r3, [r7, #8]
	extern uint16_t samples_per_symbol;
    if (cmd == CMD_QPSK_MOD_DEMOD) {
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	f241 0210 	movw	r2, #4112	@ 0x1010
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d17d      	bne.n	8000e88 <OnFrameReceived+0x118>
        // 1. Modulation QPSK et génération du signal à transmettre
        QpskRingBuffer_Init(&tx_ringbuf);
 8000d8c:	4840      	ldr	r0, [pc, #256]	@ (8000e90 <OnFrameReceived+0x120>)
 8000d8e:	f000 fe09 	bl	80019a4 <QpskRingBuffer_Init>
        QpskRingBuffer_Init(&rx_ringbuf);
 8000d92:	4840      	ldr	r0, [pc, #256]	@ (8000e94 <OnFrameReceived+0x124>)
 8000d94:	f000 fe06 	bl	80019a4 <QpskRingBuffer_Init>

        QpskModem_Modulate(&huart2, &modem, payload, len);
 8000d98:	893b      	ldrh	r3, [r7, #8]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	493e      	ldr	r1, [pc, #248]	@ (8000e98 <OnFrameReceived+0x128>)
 8000d9e:	483f      	ldr	r0, [pc, #252]	@ (8000e9c <OnFrameReceived+0x12c>)
 8000da0:	f000 fb28 	bl	80013f4 <QpskModem_Modulate>
        QpskModem_GenerateSignal(&modem, &tx_ringbuf, 1.0f);
 8000da4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000da8:	4939      	ldr	r1, [pc, #228]	@ (8000e90 <OnFrameReceived+0x120>)
 8000daa:	483b      	ldr	r0, [pc, #236]	@ (8000e98 <OnFrameReceived+0x128>)
 8000dac:	f000 fd50 	bl	8001850 <QpskModem_GenerateSignal>

        // 2. Copier le signal modulé dans un buffer linéaire
        static int16_t signal[QPSK_RINGBUF_SIZE];
        uint16_t len_signal = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        while (!QpskRingBuffer_IsEmpty(&tx_ringbuf) && len_signal < QPSK_RINGBUF_SIZE) {
 8000db6:	e00d      	b.n	8000dd4 <OnFrameReceived+0x64>
            signal[len_signal++] = QpskRingBuffer_Get(&tx_ringbuf);
 8000db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8000dc2:	461c      	mov	r4, r3
 8000dc4:	4832      	ldr	r0, [pc, #200]	@ (8000e90 <OnFrameReceived+0x120>)
 8000dc6:	f000 fe57 	bl	8001a78 <QpskRingBuffer_Get>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b34      	ldr	r3, [pc, #208]	@ (8000ea0 <OnFrameReceived+0x130>)
 8000dd0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        while (!QpskRingBuffer_IsEmpty(&tx_ringbuf) && len_signal < QPSK_RINGBUF_SIZE) {
 8000dd4:	482e      	ldr	r0, [pc, #184]	@ (8000e90 <OnFrameReceived+0x120>)
 8000dd6:	f000 fe15 	bl	8001a04 <QpskRingBuffer_IsEmpty>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d104      	bne.n	8000dea <OnFrameReceived+0x7a>
 8000de0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000de8:	d3e6      	bcc.n	8000db8 <OnFrameReceived+0x48>
        }

        // 3. Transmission graphique (facultatif)
        IQTransmitter_InitFromBuffer(signal, len_signal);
 8000dea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000dee:	4619      	mov	r1, r3
 8000df0:	482b      	ldr	r0, [pc, #172]	@ (8000ea0 <OnFrameReceived+0x130>)
 8000df2:	f7ff fef5 	bl	8000be0 <IQTransmitter_InitFromBuffer>
        IQTransmitter_Start();
 8000df6:	f7ff ff0d 	bl	8000c14 <IQTransmitter_Start>

        // 4. Acquisition réelle du signal via DMA
        adc_ready = 0;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <OnFrameReceived+0x134>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN);
 8000e00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e04:	4928      	ldr	r1, [pc, #160]	@ (8000ea8 <OnFrameReceived+0x138>)
 8000e06:	4829      	ldr	r0, [pc, #164]	@ (8000eac <OnFrameReceived+0x13c>)
 8000e08:	f001 fcba 	bl	8002780 <HAL_ADC_Start_DMA>

        // Attente de la fin de la capture DMA
        while (!adc_ready) {
 8000e0c:	e002      	b.n	8000e14 <OnFrameReceived+0xa4>
            HAL_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f001 fb3e 	bl	8002490 <HAL_Delay>
        while (!adc_ready) {
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <OnFrameReceived+0x134>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f7      	beq.n	8000e0e <OnFrameReceived+0x9e>
        }

        QpskRingBuffer_Init(&rx_ringbuf);
 8000e1e:	481d      	ldr	r0, [pc, #116]	@ (8000e94 <OnFrameReceived+0x124>)
 8000e20:	f000 fdc0 	bl	80019a4 <QpskRingBuffer_Init>
        for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000e2a:	e011      	b.n	8000e50 <OnFrameReceived+0xe0>
            int16_t sample = ((int32_t)adc_buffer[i]);
 8000e2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000e30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <OnFrameReceived+0x138>)
 8000e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e36:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            QpskRingBuffer_Put(&rx_ringbuf, sample);
 8000e3a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <OnFrameReceived+0x124>)
 8000e42:	f000 fdf6 	bl	8001a32 <QpskRingBuffer_Put>
        for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000e46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000e50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e58:	d3e8      	bcc.n	8000e2c <OnFrameReceived+0xbc>
        }

        // 6. Démodulation QPSK sur le signal reçu
        uint8_t data_out[QPSK_MAX_SYMBOLS / 4];
        uint16_t len_out = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        QpskModem_Demodulate(&huart2, &modem, &rx_ringbuf, data_out, &len_out);
 8000e60:	f107 0210 	add.w	r2, r7, #16
 8000e64:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <OnFrameReceived+0x124>)
 8000e6e:	490a      	ldr	r1, [pc, #40]	@ (8000e98 <OnFrameReceived+0x128>)
 8000e70:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <OnFrameReceived+0x12c>)
 8000e72:	f000 fb25 	bl	80014c0 <QpskModem_Demodulate>

        // 7. Envoi du résultat démodulé par UART
        UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, len_out, data_out);
 8000e76:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	f249 0110 	movw	r1, #36880	@ 0x9010
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <OnFrameReceived+0x12c>)
 8000e84:	f001 f98a 	bl	800219c <UartProtocol_SendFrame>
    }
}
 8000e88:	bf00      	nop
 8000e8a:	375c      	adds	r7, #92	@ 0x5c
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	20002584 	.word	0x20002584
 8000e94:	2000458c 	.word	0x2000458c
 8000e98:	20002274 	.word	0x20002274
 8000e9c:	2000022c 	.word	0x2000022c
 8000ea0:	20006598 	.word	0x20006598
 8000ea4:	20006594 	.word	0x20006594
 8000ea8:	20000274 	.word	0x20000274
 8000eac:	2000003c 	.word	0x2000003c

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0c6      	sub	sp, #280	@ 0x118
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f001 fa79 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f845 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 fa15 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 f9eb 	bl	800129c <MX_DMA_Init>
  MX_TIM2_Init();
 8000ec6:	f000 f927 	bl	8001118 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000eca:	f000 f9bd 	bl	8001248 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ece:	f000 f8eb 	bl	80010a8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000ed2:	f000 f897 	bl	8001004 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ed6:	f000 f96b 	bl	80011b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UartProtocol_Init(&proto, OnFrameReceived);
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4913      	ldr	r1, [pc, #76]	@ (8000f2c <main+0x7c>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f872 	bl	8001fca <UartProtocol_Init>

  //QpskModem_Init(&modem, 1, 40000.0f, 640000.0f);
  //QpskModem_Init(&modem, 400, 40000.0f, 200000.0f);

  QpskModem_Init(&modem, samples_per_symbol, 40000.0f, SAMPLE_RATE_HZ);
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <main+0x80>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f34 <main+0x84>
 8000eee:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000f38 <main+0x88>
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <main+0x8c>)
 8000ef6:	f000 fa61 	bl	80013bc <QpskModem_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t c;

  // Démarrage du Timer (doit être fait avant l’ADC)
  HAL_TIM_Base_Start(&htim3);
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <main+0x90>)
 8000efc:	f003 fd98 	bl	8004a30 <HAL_TIM_Base_Start>


  while (1)
  {
	  if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8000f00:	1df9      	adds	r1, r7, #7
 8000f02:	230a      	movs	r3, #10
 8000f04:	2201      	movs	r2, #1
 8000f06:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <main+0x94>)
 8000f08:	f004 fad9 	bl	80054be <HAL_UART_Receive>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f6      	bne.n	8000f00 <main+0x50>
	      UartProtocol_ParseByte(&proto, c);
 8000f12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f16:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f872 	bl	800200c <UartProtocol_ParseByte>
	  if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8000f28:	e7ea      	b.n	8000f00 <main+0x50>
 8000f2a:	bf00      	nop
 8000f2c:	08000d71 	.word	0x08000d71
 8000f30:	20000000 	.word	0x20000000
 8000f34:	491c4000 	.word	0x491c4000
 8000f38:	471c4000 	.word	0x471c4000
 8000f3c:	20002274 	.word	0x20002274
 8000f40:	200001e4 	.word	0x200001e4
 8000f44:	2000022c 	.word	0x2000022c

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	@ 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fe78 	bl	8005c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <SystemClock_Config+0xb4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <SystemClock_Config+0xb4>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <SystemClock_Config+0xb4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <SystemClock_Config+0xb8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <SystemClock_Config+0xb8>)
 8000f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <SystemClock_Config+0xb8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fde7 	bl	8003b8c <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fc4:	f000 f9ea 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f84a 	bl	800407c <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fee:	f000 f9d5 	bl	800139c <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	@ 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001016:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001018:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <MX_ADC1_Init+0xa0>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800101c:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001030:	2201      	movs	r2, #1
 8001032:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 800103e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001046:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001054:	2201      	movs	r2, #1
 8001056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001062:	2201      	movs	r2, #1
 8001064:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001068:	f001 fa36 	bl	80024d8 <HAL_ADC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001072:	f000 f993 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <MX_ADC1_Init+0x9c>)
 8001088:	f001 fc8c 	bl	80029a4 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001092:	f000 f983 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000003c 	.word	0x2000003c
 80010a4:	40012000 	.word	0x40012000

080010a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010ae:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <MX_SPI1_Init+0x6c>)
 80010b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010de:	2208      	movs	r2, #8
 80010e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010f6:	220a      	movs	r2, #10
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010fc:	f003 f99e 	bl	800443c <HAL_SPI_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001106:	f000 f949 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000e4 	.word	0x200000e4
 8001114:	40013000 	.word	0x40013000

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (84000000 / 100000) - 1;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_TIM2_Init+0x94>)
 800114a:	f240 3247 	movw	r2, #839	@ 0x347
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115c:	4813      	ldr	r0, [pc, #76]	@ (80011ac <MX_TIM2_Init+0x94>)
 800115e:	f003 fc17 	bl	8004990 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001168:	f000 f918 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_TIM2_Init+0x94>)
 800117a:	f003 fe34 	bl	8004de6 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f90a 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001188:	2320      	movs	r3, #32
 800118a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_TIM2_Init+0x94>)
 8001196:	f004 f835 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f8fc 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000019c 	.word	0x2000019c

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011d4:	220c      	movs	r2, #12
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011e0:	2209      	movs	r2, #9
 80011e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_TIM3_Init+0x90>)
 80011f2:	f003 fbcd 	bl	8004990 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80011fc:	f000 f8ce 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_TIM3_Init+0x90>)
 800120e:	f003 fdea 	bl	8004de6 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001218:	f000 f8c0 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800121c:	2320      	movs	r3, #32
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_TIM3_Init+0x90>)
 800122a:	f003 ffeb 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001234:	f000 f8b2 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001e4 	.word	0x200001e4
 8001244:	40000400 	.word	0x40000400

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f004 f842 	bl	8005308 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f887 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000022c 	.word	0x2000022c
 8001298:	40004400 	.word	0x40004400

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_DMA_Init+0x4c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <MX_DMA_Init+0x4c>)
 80012ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <MX_DMA_Init+0x4c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2038      	movs	r0, #56	@ 0x38
 80012c4:	f001 ff03 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c8:	2038      	movs	r0, #56	@ 0x38
 80012ca:	f001 ff1c 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	203a      	movs	r0, #58	@ 0x3a
 80012d4:	f001 fefb 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012d8:	203a      	movs	r0, #58	@ 0x3a
 80012da:	f001 ff14 	bl	8003106 <HAL_NVIC_EnableIRQ>

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_GPIO_Init+0xa8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <MX_GPIO_Init+0xa8>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <MX_GPIO_Init+0xa8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800131e:	2320      	movs	r3, #32
 8001320:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4818      	ldr	r0, [pc, #96]	@ (8001398 <MX_GPIO_Init+0xac>)
 8001336:	f002 fa71 	bl	800381c <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133a:	2340      	movs	r3, #64	@ 0x40
 800133c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4814      	ldr	r0, [pc, #80]	@ (8001398 <MX_GPIO_Init+0xac>)
 8001346:	f002 fa69 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_GPIO_Init+0xa8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <MX_GPIO_Init+0xa8>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_GPIO_Init+0xa8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2110      	movs	r1, #16
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0xac>)
 800136c:	f002 fbda 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001370:	2310      	movs	r3, #16
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0xac>)
 8001388:	f002 fa48 	bl	800381c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 80013a4:	2120      	movs	r1, #32
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <Error_Handler+0x1c>)
 80013a8:	f002 fbd5 	bl	8003b56 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	@ 0x64
 80013ae:	f001 f86f 	bl	8002490 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 80013b2:	bf00      	nop
 80013b4:	e7f6      	b.n	80013a4 <Error_Handler+0x8>
 80013b6:	bf00      	nop
 80013b8:	40020000 	.word	0x40020000

080013bc <QpskModem_Init>:
static const float PI = 3.14159265358979323846f;
//static const float QPSK_PHASE[4] = { PI/4, 3*PI/4, 5*PI/4, 7*PI/4 };

//QPSK modulation Functions

void QpskModem_Init(QpskModem* modem, uint16_t sample_per_symbol, float f0, float fs){
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	460b      	mov	r3, r1
 80013c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ca:	edc7 0a00 	vstr	s1, [r7]
 80013ce:	817b      	strh	r3, [r7, #10]
	modem->samples_per_symbol = sample_per_symbol;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	897a      	ldrh	r2, [r7, #10]
 80013d4:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
	modem->f0 = f0;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	modem->fs = fs;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <QpskModem_Modulate>:
			modem->symbols[idx++] = (byte >> b) & 0x03;
		}
	}
}*/

void QpskModem_Modulate(UART_HandleTypeDef* huart2, QpskModem* modem, const uint8_t* data, uint16_t len){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	807b      	strh	r3, [r7, #2]
    modem->num_symbols = len*4;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	b29a      	uxth	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    uint16_t idx = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	83fb      	strh	r3, [r7, #30]
    for (uint16_t i =0 ; i < len ; i++){
 8001412:	2300      	movs	r3, #0
 8001414:	83bb      	strh	r3, [r7, #28]
 8001416:	e04a      	b.n	80014ae <QpskModem_Modulate+0xba>
        uint8_t byte = data[i];
 8001418:	8bbb      	ldrh	r3, [r7, #28]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	757b      	strb	r3, [r7, #21]
        for(int b=6; b>= 0 ; b-=2){
 8001422:	2306      	movs	r3, #6
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	e03c      	b.n	80014a2 <QpskModem_Modulate+0xae>
            uint8_t symbol = (byte >> b) & 0x03;
 8001428:	7d7a      	ldrb	r2, [r7, #21]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	fa42 f303 	asr.w	r3, r2, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	753b      	strb	r3, [r7, #20]
            modem->symbols[idx++] = symbol;
 8001438:	8bfb      	ldrh	r3, [r7, #30]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	83fa      	strh	r2, [r7, #30]
 800143e:	4619      	mov	r1, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	7d3a      	ldrb	r2, [r7, #20]
 8001444:	545a      	strb	r2, [r3, r1]

           //Sending the TX IQ Constellation
            int8_t i_val, q_val;
            switch(symbol) {
 8001446:	7d3b      	ldrb	r3, [r7, #20]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d81f      	bhi.n	800148c <QpskModem_Modulate+0x98>
 800144c:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <QpskModem_Modulate+0x60>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001465 	.word	0x08001465
 8001458:	0800146f 	.word	0x0800146f
 800145c:	08001479 	.word	0x08001479
 8001460:	08001483 	.word	0x08001483
                case 0: i_val =  127; q_val =  127; break; // 00
 8001464:	237f      	movs	r3, #127	@ 0x7f
 8001466:	75fb      	strb	r3, [r7, #23]
 8001468:	237f      	movs	r3, #127	@ 0x7f
 800146a:	75bb      	strb	r3, [r7, #22]
 800146c:	e00e      	b.n	800148c <QpskModem_Modulate+0x98>
                case 1: i_val = -127; q_val =  127; break; // 01
 800146e:	2381      	movs	r3, #129	@ 0x81
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	237f      	movs	r3, #127	@ 0x7f
 8001474:	75bb      	strb	r3, [r7, #22]
 8001476:	e009      	b.n	800148c <QpskModem_Modulate+0x98>
                case 2: i_val = -127; q_val = -127; break; // 10
 8001478:	2381      	movs	r3, #129	@ 0x81
 800147a:	75fb      	strb	r3, [r7, #23]
 800147c:	2381      	movs	r3, #129	@ 0x81
 800147e:	75bb      	strb	r3, [r7, #22]
 8001480:	e004      	b.n	800148c <QpskModem_Modulate+0x98>
                case 3: i_val =  127; q_val = -127; break; // 11
 8001482:	237f      	movs	r3, #127	@ 0x7f
 8001484:	75fb      	strb	r3, [r7, #23]
 8001486:	2381      	movs	r3, #129	@ 0x81
 8001488:	75bb      	strb	r3, [r7, #22]
 800148a:	bf00      	nop
            }
            SendIQFrame(huart2, i_val, q_val);
 800148c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001494:	4619      	mov	r1, r3
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 ff44 	bl	8002324 <SendIQFrame>
        for(int b=6; b>= 0 ; b-=2){
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	3b02      	subs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dabf      	bge.n	8001428 <QpskModem_Modulate+0x34>
    for (uint16_t i =0 ; i < len ; i++){
 80014a8:	8bbb      	ldrh	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	83bb      	strh	r3, [r7, #28]
 80014ae:	8bba      	ldrh	r2, [r7, #28]
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3b0      	bcc.n	8001418 <QpskModem_Modulate+0x24>
        }
    }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <QpskModem_Demodulate>:


void QpskModem_Demodulate(UART_HandleTypeDef* huart2,QpskModem* modem, QpskRingBuffer* rxbuf, uint8_t* data_out, uint16_t* len_out) {
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b0d0      	sub	sp, #320	@ 0x140
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 80014ca:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 80014ce:	6020      	str	r0, [r4, #0]
 80014d0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80014d4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80014d8:	6001      	str	r1, [r0, #0]
 80014da:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80014de:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 80014e2:	600a      	str	r2, [r1, #0]
 80014e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80014e8:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80014ec:	6013      	str	r3, [r2, #0]
    uint16_t nb_symbols = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t symbols[QPSK_MAX_SYMBOLS];
    uint32_t global_sample = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    for (uint16_t s = 0; s < QPSK_MAX_SYMBOLS; s++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001500:	e13e      	b.n	8001780 <QpskModem_Demodulate+0x2c0>
        if (QpskRingBuffer_Available(rxbuf) < modem->samples_per_symbol)
 8001502:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001506:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	f000 fad9 	bl	8001ac2 <QpskRingBuffer_Available>
 8001510:	4602      	mov	r2, r0
 8001512:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001516:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8001520:	429a      	cmp	r2, r3
 8001522:	f0c0 8133 	bcc.w	800178c <QpskModem_Demodulate+0x2cc>
            break;
        float I = 0.0f, Q = 0.0f;
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8001536:	2300      	movs	r3, #0
 8001538:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 800153c:	e098      	b.n	8001670 <QpskModem_Demodulate+0x1b0>
            float t = (float)global_sample / modem->fs;
 800153e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800154a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800154e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8001558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155c:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
            float ref_cos = cosf(2 * M_PI * modem->f0 * t);
 8001560:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001564:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f8c0 	bl	80006f4 <__aeabi_f2d>
 8001574:	a3b4      	add	r3, pc, #720	@ (adr r3, 8001848 <QpskModem_Demodulate+0x388>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe2d 	bl	80001d8 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800158a:	f7ff f8b3 	bl	80006f4 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fe1f 	bl	80001d8 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff f8ff 	bl	80007a4 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	ee00 3a10 	vmov	s0, r3
 80015ac:	f004 fb7a 	bl	8005ca4 <cosf>
 80015b0:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
            float ref_sin = sinf(2 * M_PI * modem->f0 * t);
 80015b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015b8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f896 	bl	80006f4 <__aeabi_f2d>
 80015c8:	a39f      	add	r3, pc, #636	@ (adr r3, 8001848 <QpskModem_Demodulate+0x388>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe fe03 	bl	80001d8 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80015de:	f7ff f889 	bl	80006f4 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdf5 	bl	80001d8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff f8d5 	bl	80007a4 <__aeabi_d2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	ee00 3a10 	vmov	s0, r3
 8001600:	f004 fb94 	bl	8005d2c <sinf>
 8001604:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
            int16_t sample = QpskRingBuffer_Get(rxbuf);
 8001608:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800160c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f000 fa31 	bl	8001a78 <QpskRingBuffer_Get>
 8001616:	4603      	mov	r3, r0
 8001618:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
            I += sample * ref_cos;
 800161c:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001628:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	ed97 7a4c 	vldr	s14, [r7, #304]	@ 0x130
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
            Q += sample * ref_sin;
 800163c:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001648:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 800165c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001660:	3301      	adds	r3, #1
 8001662:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 8001666:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800166a:	3301      	adds	r3, #1
 800166c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001670:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001674:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 800167e:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001682:	429a      	cmp	r2, r3
 8001684:	f4ff af5b 	bcc.w	800153e <QpskModem_Demodulate+0x7e>
        }

        uint8_t i_val, q_val;
        uint8_t payload[3];
        payload[0] = 'R';
 8001688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800168c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001690:	2252      	movs	r2, #82	@ 0x52
 8001692:	701a      	strb	r2, [r3, #0]
        payload[1] = (uint8_t)i_val;
 8001694:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001698:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800169c:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 80016a0:	705a      	strb	r2, [r3, #1]
        payload[2] = (uint8_t)q_val;
 80016a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016aa:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 80016ae:	709a      	strb	r2, [r3, #2]
        UartProtocol_SendFrame(huart2, 0x55AA, 3, payload);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80016b8:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 80016bc:	2203      	movs	r2, #3
 80016be:	f245 51aa 	movw	r1, #21930	@ 0x55aa
 80016c2:	6800      	ldr	r0, [r0, #0]
 80016c4:	f000 fd6a 	bl	800219c <UartProtocol_SendFrame>

        uint8_t symbol = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        if (I >= 0 && Q >= 0) symbol = 0;
 80016ce:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80016d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	db0a      	blt.n	80016f2 <QpskModem_Demodulate+0x232>
 80016dc:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 80016e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	db03      	blt.n	80016f2 <QpskModem_Demodulate+0x232>
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 80016f0:	e034      	b.n	800175c <QpskModem_Demodulate+0x29c>
        else if (I < 0 && Q >= 0) symbol = 1;
 80016f2:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80016f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d50a      	bpl.n	8001716 <QpskModem_Demodulate+0x256>
 8001700:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	db03      	blt.n	8001716 <QpskModem_Demodulate+0x256>
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 8001714:	e022      	b.n	800175c <QpskModem_Demodulate+0x29c>
        else if (I < 0 && Q < 0) symbol = 2;
 8001716:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800171a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d50a      	bpl.n	800173a <QpskModem_Demodulate+0x27a>
 8001724:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	d503      	bpl.n	800173a <QpskModem_Demodulate+0x27a>
 8001732:	2302      	movs	r3, #2
 8001734:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 8001738:	e010      	b.n	800175c <QpskModem_Demodulate+0x29c>
        else if (I >= 0 && Q < 0) symbol = 3;
 800173a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800173e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	db09      	blt.n	800175c <QpskModem_Demodulate+0x29c>
 8001748:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 800174c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d502      	bpl.n	800175c <QpskModem_Demodulate+0x29c>
 8001756:	2303      	movs	r3, #3
 8001758:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        symbols[nb_symbols++] = symbol;
 800175c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	f8a7 213e 	strh.w	r2, [r7, #318]	@ 0x13e
 8001766:	4619      	mov	r1, r3
 8001768:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800176c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001770:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8001774:	545a      	strb	r2, [r3, r1]
    for (uint16_t s = 0; s < QPSK_MAX_SYMBOLS; s++) {
 8001776:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800177a:	3301      	adds	r3, #1
 800177c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001780:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8001784:	2bff      	cmp	r3, #255	@ 0xff
 8001786:	f67f aebc 	bls.w	8001502 <QpskModem_Demodulate+0x42>
 800178a:	e000      	b.n	800178e <QpskModem_Demodulate+0x2ce>
            break;
 800178c:	bf00      	nop
    }
    *len_out = nb_symbols / 4;
 800178e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	b29a      	uxth	r2, r3
 8001796:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800179a:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < *len_out; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 80017a2:	e041      	b.n	8001828 <QpskModem_Demodulate+0x368>
        data_out[i] = (symbols[i*4+0] << 6) | (symbols[i*4+1] << 4) | (symbols[i*4+2] << 2) | (symbols[i*4+3]);
 80017a4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80017ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	019b      	lsls	r3, r3, #6
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3301      	adds	r3, #1
 80017c2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80017c6:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80017ca:	5ccb      	ldrb	r3, [r1, r3]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80017e2:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b25a      	sxtb	r2, r3
 80017f2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	3303      	adds	r3, #3
 80017fa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80017fe:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b259      	sxtb	r1, r3
 800180a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800180e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001812:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	4413      	add	r3, r2
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < *len_out; i++) {
 800181e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001822:	3301      	adds	r3, #1
 8001824:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 8001828:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8001832:	429a      	cmp	r2, r3
 8001834:	d3b6      	bcc.n	80017a4 <QpskModem_Demodulate+0x2e4>
    }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	54442d18 	.word	0x54442d18
 800184c:	401921fb 	.word	0x401921fb

08001850 <QpskModem_GenerateSignal>:
		modem->iq[2*i+1] = QPSK_Q[modem->symbols[i]];
	}
	modem->num_iq = modem->num_symbols*2;
}

void QpskModem_GenerateSignal(QpskModem* modem, QpskRingBuffer* txbuf, float amplitude) {
 8001850:	b580      	push	{r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t global_sample = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint16_t s = 0; s < modem->num_symbols; s++) {
 8001866:	2300      	movs	r3, #0
 8001868:	847b      	strh	r3, [r7, #34]	@ 0x22
 800186a:	e082      	b.n	8001972 <QpskModem_GenerateSignal+0x122>
        float I = QPSK_I[modem->symbols[s]] / 127.0f;
 800186c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	461a      	mov	r2, r3
 8001874:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <QpskModem_GenerateSignal+0x140>)
 8001876:	569b      	ldrsb	r3, [r3, r2]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001880:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001994 <QpskModem_GenerateSignal+0x144>
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	edc7 7a07 	vstr	s15, [r7, #28]
        float Q = QPSK_Q[modem->symbols[s]] / 127.0f;
 800188c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	461a      	mov	r2, r3
 8001894:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <QpskModem_GenerateSignal+0x148>)
 8001896:	569b      	ldrsb	r3, [r3, r2]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001994 <QpskModem_GenerateSignal+0x144>
 80018a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a8:	edc7 7a06 	vstr	s15, [r7, #24]
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80018ac:	2300      	movs	r3, #0
 80018ae:	843b      	strh	r3, [r7, #32]
 80018b0:	e056      	b.n	8001960 <QpskModem_GenerateSignal+0x110>
            float t = (float)global_sample / modem->fs;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80018c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c6:	edc7 7a05 	vstr	s15, [r7, #20]
            float sample = amplitude * (I * cosf(2 * PI * modem->f0 * t) + Q * sinf(2 * PI * modem->f0 * t));
 80018ca:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800199c <QpskModem_GenerateSignal+0x14c>
 80018ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80018d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f004 f9dc 	bl	8005ca4 <cosf>
 80018ec:	eeb0 7a40 	vmov.f32	s14, s0
 80018f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80018f8:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800199c <QpskModem_GenerateSignal+0x14c>
 80018fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190a:	edd7 7a05 	vldr	s15, [r7, #20]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f004 fa09 	bl	8005d2c <sinf>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001926:	ee78 7a27 	vadd.f32	s15, s16, s15
 800192a:	ed97 7a01 	vldr	s14, [r7, #4]
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	edc7 7a04 	vstr	s15, [r7, #16]
            QpskRingBuffer_Put(txbuf, (int16_t)(sample * 2047.0f));
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80019a0 <QpskModem_GenerateSignal+0x150>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001946:	ee17 3a90 	vmov	r3, s15
 800194a:	b21b      	sxth	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	68b8      	ldr	r0, [r7, #8]
 8001950:	f000 f86f 	bl	8001a32 <QpskRingBuffer_Put>
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8001954:	8c3b      	ldrh	r3, [r7, #32]
 8001956:	3301      	adds	r3, #1
 8001958:	843b      	strh	r3, [r7, #32]
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8001966:	8c3a      	ldrh	r2, [r7, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d3a2      	bcc.n	80018b2 <QpskModem_GenerateSignal+0x62>
    for (uint16_t s = 0; s < modem->num_symbols; s++) {
 800196c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800196e:	3301      	adds	r3, #1
 8001970:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001978:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800197a:	429a      	cmp	r2, r3
 800197c:	f4ff af76 	bcc.w	800186c <QpskModem_GenerateSignal+0x1c>
        }
    }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	@ 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	ecbd 8b02 	vpop	{d8}
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	080067a4 	.word	0x080067a4
 8001994:	42fe0000 	.word	0x42fe0000
 8001998:	080067a8 	.word	0x080067a8
 800199c:	40490fdb 	.word	0x40490fdb
 80019a0:	44ffe000 	.word	0x44ffe000

080019a4 <QpskRingBuffer_Init>:

//Buffer Functions

void QpskRingBuffer_Init(QpskRingBuffer* rb){
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019b2:	461a      	mov	r2, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	6013      	str	r3, [r2, #0]
	rb->tail = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019be:	461a      	mov	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	6053      	str	r3, [r2, #4]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <QpskRingBuffer_IsFull>:

uint8_t QpskRingBuffer_IsFull(const QpskRingBuffer* rb){
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	return ((rb->head + 1) % QPSK_RINGBUF_SIZE) == rb->tail;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	bf0c      	ite	eq
 80019f2:	2301      	moveq	r3, #1
 80019f4:	2300      	movne	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <QpskRingBuffer_IsEmpty>:

uint8_t QpskRingBuffer_IsEmpty(const QpskRingBuffer* rb){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	return rb->head == rb->tail;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <QpskRingBuffer_Put>:

void QpskRingBuffer_Put(QpskRingBuffer* rb, int16_t value) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
    if (!QpskRingBuffer_IsFull(rb)) {
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffc6 	bl	80019d0 <QpskRingBuffer_IsFull>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d112      	bne.n	8001a70 <QpskRingBuffer_Put+0x3e>
        rb->buf[rb->head] = value;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8879      	ldrh	r1, [r7, #2]
 8001a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        rb->head = (rb->head + 1) % QPSK_RINGBUF_SIZE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a6e:	6013      	str	r3, [r2, #0]
    }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <QpskRingBuffer_Get>:

int16_t QpskRingBuffer_Get(QpskRingBuffer* rb) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    int16_t val = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	81fb      	strh	r3, [r7, #14]
    if (!QpskRingBuffer_IsEmpty(rb)) {
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffbd 	bl	8001a04 <QpskRingBuffer_IsEmpty>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <QpskRingBuffer_Get+0x3e>
        val = rb->buf[rb->tail];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a9e:	81fb      	strh	r3, [r7, #14]
        rb->tail = (rb->tail + 1) % QPSK_RINGBUF_SIZE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ab4:	6053      	str	r3, [r2, #4]
    }
    return val;
 8001ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <QpskRingBuffer_Available>:

uint32_t QpskRingBuffer_Available(const QpskRingBuffer* rb) {
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
    // Returns the number of elements currently in the buffer
    if (rb->head >= rb->tail)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d309      	bcc.n	8001af2 <QpskRingBuffer_Available+0x30>
        return rb->head - rb->tail;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	e00a      	b.n	8001b08 <QpskRingBuffer_Available+0x46>
    else
        return QPSK_RINGBUF_SIZE - (rb->tail - rb->head);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a33      	ldr	r2, [pc, #204]	@ (8001c50 <HAL_ADC_MspInit+0xec>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d160      	bne.n	8001c48 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a31      	ldr	r2, [pc, #196]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a2a      	ldr	r2, [pc, #168]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <HAL_ADC_MspInit+0xf0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4821      	ldr	r0, [pc, #132]	@ (8001c58 <HAL_ADC_MspInit+0xf4>)
 8001bd2:	f001 fe23 	bl	800381c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001bd8:	4a21      	ldr	r2, [pc, #132]	@ (8001c60 <HAL_ADC_MspInit+0xfc>)
 8001bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001bf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c1c:	480f      	ldr	r0, [pc, #60]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c1e:	f001 fa8d 	bl	800313c <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c28:	f7ff fbb8 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_ADC_MspInit+0xf8>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2012      	movs	r0, #18
 8001c3e:	f001 fa46 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c42:	2012      	movs	r0, #18
 8001c44:	f001 fa5f 	bl	8003106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	@ 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40012000 	.word	0x40012000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	20000084 	.word	0x20000084
 8001c60:	40026410 	.word	0x40026410

08001c64 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a32      	ldr	r2, [pc, #200]	@ (8001d4c <HAL_SPI_MspInit+0xe8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d15d      	bne.n	8001d42 <HAL_SPI_MspInit+0xde>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_SPI_MspInit+0xec>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cbe:	23a0      	movs	r3, #160	@ 0xa0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481e      	ldr	r0, [pc, #120]	@ (8001d54 <HAL_SPI_MspInit+0xf0>)
 8001cda:	f001 fd9f 	bl	800381c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_SPI_MspInit+0xf8>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001ce6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001cee:	2240      	movs	r2, #64	@ 0x40
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d1e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d26:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d28:	f001 fa08 	bl	800313c <HAL_DMA_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001d32:	f7ff fb33 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d3a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d3c:	4a06      	ldr	r2, [pc, #24]	@ (8001d58 <HAL_SPI_MspInit+0xf4>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	2000013c 	.word	0x2000013c
 8001d5c:	40026440 	.word	0x40026440

08001d60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d70:	d116      	bne.n	8001da0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a15      	ldr	r2, [pc, #84]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	201c      	movs	r0, #28
 8001d94:	f001 f99b 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d98:	201c      	movs	r0, #28
 8001d9a:	f001 f9b4 	bl	8003106 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d9e:	e012      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x74>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10d      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <HAL_UART_MspInit+0x84>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12b      	bne.n	8001e52 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_UART_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e32:	230c      	movs	r3, #12
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e42:	2307      	movs	r3, #7
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <HAL_UART_MspInit+0x8c>)
 8001e4e:	f001 fce5 	bl	800381c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <NMI_Handler+0x4>

08001e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <MemManage_Handler+0x4>

08001e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebe:	f000 fac7 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <ADC_IRQHandler+0x10>)
 8001ece:	f000 fb46 	bl	800255e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000003c 	.word	0x2000003c

08001edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <TIM2_IRQHandler+0x10>)
 8001ee2:	f002 fe90 	bl	8004c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000019c 	.word	0x2000019c

08001ef0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA2_Stream0_IRQHandler+0x10>)
 8001ef6:	f001 fa27 	bl	8003348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000084 	.word	0x20000084

08001f04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA2_Stream2_IRQHandler+0x10>)
 8001f0a:	f001 fa1d 	bl	8003348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000013c 	.word	0x2000013c

08001f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <CalcChecksum>:

#include "uart_protocol.h"
#include "stm32f4xx_hal.h"
#include "CMD.h"

static uint8_t CalcChecksum(uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	603a      	str	r2, [r7, #0]
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	80bb      	strh	r3, [r7, #4]
    uint8_t cs = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
    cs ^= 0xFE;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	43db      	mvns	r3, r3
 8001f58:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 8) & 0xFF;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4053      	eors	r3, r2
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 0) & 0xFF;
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4053      	eors	r3, r2
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 8) & 0xFF;
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b25a      	sxtb	r2, r3
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4053      	eors	r3, r2
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 0) & 0xFF;
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4053      	eors	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	81bb      	strh	r3, [r7, #12]
 8001f9e:	e009      	b.n	8001fb4 <CalcChecksum+0x78>
        cs ^= payload[i];
 8001fa0:	89bb      	ldrh	r3, [r7, #12]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4053      	eors	r3, r2
 8001fac:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001fae:	89bb      	ldrh	r3, [r7, #12]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	81bb      	strh	r3, [r7, #12]
 8001fb4:	89ba      	ldrh	r2, [r7, #12]
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3f1      	bcc.n	8001fa0 <CalcChecksum+0x64>
    }
    return cs;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <UartProtocol_Init>:

void UartProtocol_Init(UartProtocol* proto, FrameReceivedCallback cb) {
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
    proto->rx_state = WAIT_SOF;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    proto->rx_cmd = 0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	805a      	strh	r2, [r3, #2]
    proto->rx_len = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	809a      	strh	r2, [r3, #4]
    proto->rx_payload_idx = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	80da      	strh	r2, [r3, #6]
    proto->rx_checksum = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	721a      	strb	r2, [r3, #8]
    proto->rx_calc_checksum = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	725a      	strb	r2, [r3, #9]
    proto->onFrameReceived = cb;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <UartProtocol_ParseByte>:

void UartProtocol_ParseByte(UartProtocol* proto, uint8_t c) {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
    switch(proto->rx_state) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b06      	cmp	r3, #6
 800201e:	f200 80b1 	bhi.w	8002184 <UartProtocol_ParseByte+0x178>
 8002022:	a201      	add	r2, pc, #4	@ (adr r2, 8002028 <UartProtocol_ParseByte+0x1c>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002045 	.word	0x08002045
 800202c:	0800205b 	.word	0x0800205b
 8002030:	0800207d 	.word	0x0800207d
 8002034:	080020a3 	.word	0x080020a3
 8002038:	080020c5 	.word	0x080020c5
 800203c:	08002113 	.word	0x08002113
 8002040:	0800214b 	.word	0x0800214b
        case WAIT_SOF:
            if (c == 0xFE) {
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2bfe      	cmp	r3, #254	@ 0xfe
 8002048:	f040 80a0 	bne.w	800218c <UartProtocol_ParseByte+0x180>
                proto->rx_state = READ_CMD_MSB;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
                proto->rx_calc_checksum = 0xFE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	22fe      	movs	r2, #254	@ 0xfe
 8002056:	725a      	strb	r2, [r3, #9]
            }
            break;
 8002058:	e098      	b.n	800218c <UartProtocol_ParseByte+0x180>
        case READ_CMD_MSB:
            proto->rx_cmd = ((uint16_t)c) << 8;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	b29b      	uxth	r3, r3
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7a5a      	ldrb	r2, [r3, #9]
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	4053      	eors	r3, r2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_CMD_LSB;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
            break;
 800207a:	e08a      	b.n	8002192 <UartProtocol_ParseByte+0x186>
        case READ_CMD_LSB:
            proto->rx_cmd |= c;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	885a      	ldrh	r2, [r3, #2]
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7a5a      	ldrb	r2, [r3, #9]
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	4053      	eors	r3, r2
 8002094:	b2da      	uxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_MSB;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]
            break;
 80020a0:	e077      	b.n	8002192 <UartProtocol_ParseByte+0x186>
        case READ_LEN_MSB:
            proto->rx_len = ((uint16_t)c) << 8;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7a5a      	ldrb	r2, [r3, #9]
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	4053      	eors	r3, r2
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_LSB;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	701a      	strb	r2, [r3, #0]
            break;
 80020c2:	e066      	b.n	8002192 <UartProtocol_ParseByte+0x186>
        case READ_LEN_LSB:
            proto->rx_len |= c;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	889a      	ldrh	r2, [r3, #4]
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7a5a      	ldrb	r2, [r3, #9]
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	4053      	eors	r3, r2
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	725a      	strb	r2, [r3, #9]
            if (proto->rx_len > FRAME_MAX_PAYLOAD) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	889b      	ldrh	r3, [r3, #4]
 80020e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ea:	d903      	bls.n	80020f4 <UartProtocol_ParseByte+0xe8>
                proto->rx_state = WAIT_SOF;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
                proto->rx_state = READ_CHECKSUM;
            } else {
                proto->rx_payload_idx = 0;
                proto->rx_state = READ_PAYLOAD;
            }
            break;
 80020f2:	e04e      	b.n	8002192 <UartProtocol_ParseByte+0x186>
            } else if (proto->rx_len == 0) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	889b      	ldrh	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <UartProtocol_ParseByte+0xf8>
                proto->rx_state = READ_CHECKSUM;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2206      	movs	r2, #6
 8002100:	701a      	strb	r2, [r3, #0]
            break;
 8002102:	e046      	b.n	8002192 <UartProtocol_ParseByte+0x186>
                proto->rx_payload_idx = 0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	80da      	strh	r2, [r3, #6]
                proto->rx_state = READ_PAYLOAD;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2205      	movs	r2, #5
 800210e:	701a      	strb	r2, [r3, #0]
            break;
 8002110:	e03f      	b.n	8002192 <UartProtocol_ParseByte+0x186>
        case READ_PAYLOAD:
            proto->frame_payload[proto->rx_payload_idx++] = c;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	88db      	ldrh	r3, [r3, #6]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	b291      	uxth	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	80d1      	strh	r1, [r2, #6]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	729a      	strb	r2, [r3, #10]
            proto->rx_calc_checksum ^= c;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7a5a      	ldrb	r2, [r3, #9]
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	4053      	eors	r3, r2
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	725a      	strb	r2, [r3, #9]
            if (proto->rx_payload_idx >= proto->rx_len) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	88da      	ldrh	r2, [r3, #6]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	889b      	ldrh	r3, [r3, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d326      	bcc.n	8002190 <UartProtocol_ParseByte+0x184>
                proto->rx_state = READ_CHECKSUM;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2206      	movs	r2, #6
 8002146:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002148:	e022      	b.n	8002190 <UartProtocol_ParseByte+0x184>
        case READ_CHECKSUM:
            proto->rx_checksum = c;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	721a      	strb	r2, [r3, #8]
            if (proto->rx_checksum == proto->rx_calc_checksum && proto->onFrameReceived) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7a1a      	ldrb	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7a5b      	ldrb	r3, [r3, #9]
 8002158:	429a      	cmp	r2, r3
 800215a:	d10f      	bne.n	800217c <UartProtocol_ParseByte+0x170>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <UartProtocol_ParseByte+0x170>
                proto->onFrameReceived(proto, proto->rx_cmd, proto->rx_len, proto->frame_payload);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 410c 	ldr.w	r4, [r3, #268]	@ 0x10c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8859      	ldrh	r1, [r3, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	889a      	ldrh	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	330a      	adds	r3, #10
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	47a0      	blx	r4
            }
            proto->rx_state = WAIT_SOF;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
            break;
 8002182:	e006      	b.n	8002192 <UartProtocol_ParseByte+0x186>
        default:
            proto->rx_state = WAIT_SOF;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
            break;
 800218a:	e002      	b.n	8002192 <UartProtocol_ParseByte+0x186>
            break;
 800218c:	bf00      	nop
 800218e:	e000      	b.n	8002192 <UartProtocol_ParseByte+0x186>
            break;
 8002190:	bf00      	nop
    }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop

0800219c <UartProtocol_SendFrame>:

void UartProtocol_SendFrame(UART_HandleTypeDef* huart, uint16_t cmd, uint16_t len, uint8_t* payload) {
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b0c9      	sub	sp, #292	@ 0x124
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80021a6:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80021aa:	6020      	str	r0, [r4, #0]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80021b4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021be:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80021c2:	4602      	mov	r2, r0
 80021c4:	801a      	strh	r2, [r3, #0]
 80021c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021ce:	460a      	mov	r2, r1
 80021d0:	801a      	strh	r2, [r3, #0]
    uint8_t tx_buf[6 + FRAME_MAX_PAYLOAD];
    int pos = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tx_buf[pos++] = 0xFE;
 80021d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80021e2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80021e6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80021ea:	21fe      	movs	r1, #254	@ 0xfe
 80021ec:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 8) & 0xFF;
 80021ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021f2:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	b299      	uxth	r1, r3
 80021fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002206:	b2c9      	uxtb	r1, r1
 8002208:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800220c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002210:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 0) & 0xFF;
 8002212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800221c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002220:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	b2d1      	uxtb	r1, r2
 8002228:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800222c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002230:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 8) & 0xFF;
 8002232:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002236:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	b299      	uxth	r1, r3
 8002240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800224a:	b2c9      	uxtb	r1, r1
 800224c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002250:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002254:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 0) & 0xFF;
 8002256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002260:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002264:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	b2d1      	uxtb	r1, r2
 800226c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002270:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002274:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800227c:	e017      	b.n	80022ae <UartProtocol_SendFrame+0x112>
        tx_buf[pos++] = payload[i];
 800227e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002282:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002286:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	441a      	add	r2, r3
 800228e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8002298:	7811      	ldrb	r1, [r2, #0]
 800229a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800229e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80022a2:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 80022a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80022ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbde      	blt.n	800227e <UartProtocol_SendFrame+0xe2>
    }
    uint8_t cs = CalcChecksum(cmd, len, payload);
 80022c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022c8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80022cc:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80022d0:	8811      	ldrh	r1, [r2, #0]
 80022d2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80022d6:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 80022da:	8810      	ldrh	r0, [r2, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f7ff fe2d 	bl	8001f3c <CalcChecksum>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    tx_buf[pos++] = cs;
 80022e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80022f2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80022f6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80022fa:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 80022fe:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(huart, tx_buf, pos, 100);
 8002300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002304:	b29a      	uxth	r2, r3
 8002306:	f107 0110 	add.w	r1, r7, #16
 800230a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800230e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002312:	2364      	movs	r3, #100	@ 0x64
 8002314:	6800      	ldr	r0, [r0, #0]
 8002316:	f003 f847 	bl	80053a8 <HAL_UART_Transmit>
}
 800231a:	bf00      	nop
 800231c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <SendIQFrame>:
    uint8_t cs = CalcChecksum(cmd, len, payload);
    out_buf[pos++] = cs;
    return pos;
}

void SendIQFrame(UART_HandleTypeDef* huart, int8_t i, int8_t q) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	4613      	mov	r3, r2
 8002332:	70bb      	strb	r3, [r7, #2]
    uint8_t payload[3];
    payload[0] = 'T'; // Pour TX
 8002334:	2354      	movs	r3, #84	@ 0x54
 8002336:	733b      	strb	r3, [r7, #12]
    payload[1] = (uint8_t)i;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	737b      	strb	r3, [r7, #13]
    payload[2] = (uint8_t)q;
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	73bb      	strb	r3, [r7, #14]
    UartProtocol_SendFrame(huart, CMD_IQ_DATA, 3, payload);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2203      	movs	r2, #3
 8002346:	f245 51aa 	movw	r1, #21930	@ 0x55aa
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff26 	bl	800219c <UartProtocol_SendFrame>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002390 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800235c:	f7ff fddc 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f003 fc69 	bl	8005c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238a:	f7fe fd91 	bl	8000eb0 <main>
  bx  lr    
 800238e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800239c:	08006bac 	.word	0x08006bac
  ldr r2, =_sbss
 80023a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023a4:	2000859c 	.word	0x2000859c

080023a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <DMA1_Stream0_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fe6f 	bl	80030b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 f808 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff fb98 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_InitTick+0x54>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_InitTick+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fe87 	bl	8003122 <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00e      	b.n	800243c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d80a      	bhi.n	800243a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f000 fe4f 	bl	80030ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002430:	4a06      	ldr	r2, [pc, #24]	@ (800244c <HAL_InitTick+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000004 	.word	0x20000004
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_IncTick+0x20>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x24>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <HAL_IncTick+0x24>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000000c 	.word	0x2000000c
 8002474:	20008598 	.word	0x20008598

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20008598 	.word	0x20008598

08002490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff ffee 	bl	8002478 <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d005      	beq.n	80024b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024aa:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_Delay+0x44>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b6:	bf00      	nop
 80024b8:	f7ff ffde 	bl	8002478 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d8f7      	bhi.n	80024b8 <HAL_Delay+0x28>
  {
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000000c 	.word	0x2000000c

080024d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e033      	b.n	8002556 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fb34 	bl	8001b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800251e:	f023 0302 	bic.w	r3, r3, #2
 8002522:	f043 0202 	orr.w	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fb6c 	bl	8002c08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40
 8002546:	e001      	b.n	800254c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d049      	beq.n	8002628 <HAL_ADC_IRQHandler+0xca>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d046      	beq.n	8002628 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12b      	bne.n	8002618 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d127      	bne.n	8002618 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d119      	bne.n	8002618 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0220 	bic.w	r2, r2, #32
 80025f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fb93 	bl	8000d44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f06f 0212 	mvn.w	r2, #18
 8002626:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d057      	beq.n	80026ee <HAL_ADC_IRQHandler+0x190>
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d054      	beq.n	80026ee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d139      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002670:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12b      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002690:	2b00      	cmp	r3, #0
 8002692:	d124      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d11d      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d119      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fc10 	bl	8002f04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 020c 	mvn.w	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d017      	beq.n	8002734 <HAL_ADC_IRQHandler+0x1d6>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d014      	beq.n	8002734 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f929 	bl	800297c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f06f 0201 	mvn.w	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002742:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_ADC_IRQHandler+0x218>
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0220 	mvn.w	r2, #32
 8002764:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f912 	bl	8002990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0220 	mvn.w	r2, #32
 8002774:	601a      	str	r2, [r3, #0]
  }
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x22>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0d0      	b.n	8002944 <HAL_ADC_Start_DMA+0x1c4>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d018      	beq.n	80027ea <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_ADC_Start_DMA+0x1cc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a60      	ldr	r2, [pc, #384]	@ (8002950 <HAL_ADC_Start_DMA+0x1d0>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9a      	lsrs	r2, r3, #18
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f8:	d107      	bne.n	800280a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 8088 	bne.w	800292a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002844:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002858:	d106      	bne.n	8002868 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f023 0206 	bic.w	r2, r3, #6
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
 8002866:	e002      	b.n	800286e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002876:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <HAL_ADC_Start_DMA+0x1d4>)
 8002878:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	4a36      	ldr	r2, [pc, #216]	@ (8002958 <HAL_ADC_Start_DMA+0x1d8>)
 8002880:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	4a35      	ldr	r2, [pc, #212]	@ (800295c <HAL_ADC_Start_DMA+0x1dc>)
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288e:	4a34      	ldr	r2, [pc, #208]	@ (8002960 <HAL_ADC_Start_DMA+0x1e0>)
 8002890:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800289a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80028aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	334c      	adds	r3, #76	@ 0x4c
 80028c6:	4619      	mov	r1, r3
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f000 fce4 	bl	8003298 <HAL_DMA_Start_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d129      	bne.n	8002942 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	e020      	b.n	8002942 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <HAL_ADC_Start_DMA+0x1e4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11b      	bne.n	8002942 <HAL_ADC_Start_DMA+0x1c2>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d114      	bne.n	8002942 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e00b      	b.n	8002942 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002942:	7ffb      	ldrb	r3, [r7, #31]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000004 	.word	0x20000004
 8002950:	431bde83 	.word	0x431bde83
 8002954:	40012300 	.word	0x40012300
 8002958:	08002e01 	.word	0x08002e01
 800295c:	08002ebb 	.word	0x08002ebb
 8002960:	08002ed7 	.word	0x08002ed7
 8002964:	40012000 	.word	0x40012000

08002968 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e113      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x244>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d925      	bls.n	8002a1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	3b1e      	subs	r3, #30
 80029e6:	2207      	movs	r2, #7
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43da      	mvns	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	400a      	ands	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68d9      	ldr	r1, [r3, #12]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	4603      	mov	r3, r0
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4403      	add	r3, r0
 8002a0e:	3b1e      	subs	r3, #30
 8002a10:	409a      	lsls	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e022      	b.n	8002a62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	2207      	movs	r2, #7
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4618      	mov	r0, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4403      	add	r3, r0
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d824      	bhi.n	8002ab4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b05      	subs	r3, #5
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b05      	subs	r3, #5
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ab2:	e04c      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d824      	bhi.n	8002b06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b23      	subs	r3, #35	@ 0x23
 8002ace:	221f      	movs	r2, #31
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	400a      	ands	r2, r1
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b23      	subs	r3, #35	@ 0x23
 8002af8:	fa00 f203 	lsl.w	r2, r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b04:	e023      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b41      	subs	r3, #65	@ 0x41
 8002b18:	221f      	movs	r2, #31
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	400a      	ands	r2, r1
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b41      	subs	r3, #65	@ 0x41
 8002b42:	fa00 f203 	lsl.w	r2, r0, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b4e:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x250>)
 8002b50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x254>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10f      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b12      	cmp	r3, #18
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x254>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12b      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bfc <HAL_ADC_ConfigChannel+0x258>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x1f4>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b11      	cmp	r3, #17
 8002b96:	d122      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_ADC_ConfigChannel+0x258>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d111      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_ADC_ConfigChannel+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a11      	ldr	r2, [pc, #68]	@ (8002c04 <HAL_ADC_ConfigChannel+0x260>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9a      	lsrs	r2, r3, #18
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40012300 	.word	0x40012300
 8002bf8:	40012000 	.word	0x40012000
 8002bfc:	10000012 	.word	0x10000012
 8002c00:	20000004 	.word	0x20000004
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c10:	4b79      	ldr	r3, [pc, #484]	@ (8002df8 <ADC_Init+0x1f0>)
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	4a58      	ldr	r2, [pc, #352]	@ (8002dfc <ADC_Init+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e00f      	b.n	8002d06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0202 	bic.w	r2, r2, #2
 8002d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	005a      	lsls	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	035a      	lsls	r2, r3, #13
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	e007      	b.n	8002d7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	051a      	lsls	r2, r3, #20
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dbe:	025a      	lsls	r2, r3, #9
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	029a      	lsls	r2, r3, #10
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	0f000001 	.word	0x0f000001

08002e00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13c      	bne.n	8002e94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12b      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d127      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d119      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0220 	bic.w	r2, r2, #32
 8002e66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7fd ff59 	bl	8000d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e92:	e00e      	b.n	8002eb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fd75 	bl	8002990 <HAL_ADC_ErrorCallback>
}
 8002ea6:	e004      	b.n	8002eb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fd4d 	bl	8002968 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2240      	movs	r2, #64	@ 0x40
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff fd4a 	bl	8002990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	@ (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	@ (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	@ (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	@ (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003084:	d301      	bcc.n	800308a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003086:	2301      	movs	r3, #1
 8003088:	e00f      	b.n	80030aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <SysTick_Config+0x40>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003092:	210f      	movs	r1, #15
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f7ff ff8e 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <SysTick_Config+0x40>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a2:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <SysTick_Config+0x40>)
 80030a4:	2207      	movs	r2, #7
 80030a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	e000e010 	.word	0xe000e010

080030b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff29 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e0:	f7ff ff3e 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 80030e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff ff8e 	bl	800300c <NVIC_EncodePriority>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5d 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff31 	bl	8002f7c <__NVIC_EnableIRQ>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffa2 	bl	8003074 <SysTick_Config>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff f996 	bl	8002478 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e099      	b.n	800328c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003178:	e00f      	b.n	800319a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800317a:	f7ff f97d 	bl	8002478 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b05      	cmp	r3, #5
 8003186:	d908      	bls.n	800319a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2203      	movs	r2, #3
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e078      	b.n	800328c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e8      	bne.n	800317a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4b38      	ldr	r3, [pc, #224]	@ (8003294 <HAL_DMA_Init+0x158>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d107      	bne.n	8003204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	4313      	orrs	r3, r2
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0307 	bic.w	r3, r3, #7
 800321a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	2b04      	cmp	r3, #4
 800322c:	d117      	bne.n	800325e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa6f 	bl	8003724 <DMA_CheckFifoParam>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2240      	movs	r2, #64	@ 0x40
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800325a:	2301      	movs	r3, #1
 800325c:	e016      	b.n	800328c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa26 	bl	80036b8 <DMA_CalcBaseAndBitshift>
 800326c:	4603      	mov	r3, r0
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	223f      	movs	r2, #63	@ 0x3f
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	f010803f 	.word	0xf010803f

08003298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_DMA_Start_IT+0x26>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e040      	b.n	8003340 <HAL_DMA_Start_IT+0xa8>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d12f      	bne.n	8003332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f9b8 	bl	800365c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	223f      	movs	r2, #63	@ 0x3f
 80032f2:	409a      	lsls	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0216 	orr.w	r2, r2, #22
 8003306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0208 	orr.w	r2, r2, #8
 800331e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e005      	b.n	800333e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800333a:	2302      	movs	r3, #2
 800333c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800333e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003354:	4b8e      	ldr	r3, [pc, #568]	@ (8003590 <HAL_DMA_IRQHandler+0x248>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a8e      	ldr	r2, [pc, #568]	@ (8003594 <HAL_DMA_IRQHandler+0x24c>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	2208      	movs	r2, #8
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01a      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	2208      	movs	r2, #8
 80033a2:	409a      	lsls	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	2204      	movs	r2, #4
 80033f0:	409a      	lsls	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d012      	beq.n	8003420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	2204      	movs	r2, #4
 800340e:	409a      	lsls	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	2210      	movs	r2, #16
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d043      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03c      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	2210      	movs	r2, #16
 8003444:	409a      	lsls	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d018      	beq.n	800348a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d024      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
 8003476:	e01f      	b.n	80034b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e016      	b.n	80034b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0208 	bic.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	2220      	movs	r2, #32
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 808f 	beq.w	80035e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8087 	beq.w	80035e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	2220      	movs	r2, #32
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d136      	bne.n	8003560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0216 	bic.w	r2, r2, #22
 8003500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <HAL_DMA_IRQHandler+0x1da>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0208 	bic.w	r2, r2, #8
 8003530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	223f      	movs	r2, #63	@ 0x3f
 8003538:	409a      	lsls	r2, r3
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003552:	2b00      	cmp	r3, #0
 8003554:	d07e      	beq.n	8003654 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
        }
        return;
 800355e:	e079      	b.n	8003654 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01d      	beq.n	80035aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003580:	2b00      	cmp	r3, #0
 8003582:	d031      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e02c      	b.n	80035e8 <HAL_DMA_IRQHandler+0x2a0>
 800358e:	bf00      	nop
 8003590:	20000004 	.word	0x20000004
 8003594:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d023      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
 80035a8:	e01e      	b.n	80035e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0210 	bic.w	r2, r2, #16
 80035c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d032      	beq.n	8003656 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2205      	movs	r2, #5
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3301      	adds	r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d307      	bcc.n	8003630 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f2      	bne.n	8003614 <HAL_DMA_IRQHandler+0x2cc>
 800362e:	e000      	b.n	8003632 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003630:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
 8003652:	e000      	b.n	8003656 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003654:	bf00      	nop
    }
  }
}
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	d108      	bne.n	800369c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800369a:	e007      	b.n	80036ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	3b10      	subs	r3, #16
 80036c8:	4a14      	ldr	r2, [pc, #80]	@ (800371c <DMA_CalcBaseAndBitshift+0x64>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <DMA_CalcBaseAndBitshift+0x68>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d909      	bls.n	80036fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036f8:	e007      	b.n	800370a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	aaaaaaab 	.word	0xaaaaaaab
 8003720:	080067c4 	.word	0x080067c4

08003724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11f      	bne.n	800377e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d856      	bhi.n	80037f2 <DMA_CheckFifoParam+0xce>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <DMA_CheckFifoParam+0x28>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	0800375d 	.word	0x0800375d
 8003750:	0800376f 	.word	0x0800376f
 8003754:	0800375d 	.word	0x0800375d
 8003758:	080037f3 	.word	0x080037f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d046      	beq.n	80037f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e043      	b.n	80037f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003776:	d140      	bne.n	80037fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e03d      	b.n	80037fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003786:	d121      	bne.n	80037cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d837      	bhi.n	80037fe <DMA_CheckFifoParam+0xda>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <DMA_CheckFifoParam+0x70>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037a5 	.word	0x080037a5
 80037a0:	080037bd 	.word	0x080037bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e030      	b.n	800380c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d025      	beq.n	8003802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e022      	b.n	8003802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c4:	d11f      	bne.n	8003806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ca:	e01c      	b.n	8003806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d903      	bls.n	80037da <DMA_CheckFifoParam+0xb6>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d003      	beq.n	80037e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037d8:	e018      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      break;
 80037de:	e015      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e00b      	b.n	800380a <DMA_CheckFifoParam+0xe6>
      break;
 80037f2:	bf00      	nop
 80037f4:	e00a      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e008      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e006      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;   
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
    }
  } 
  
  return status; 
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	@ 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e159      	b.n	8003aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	f040 8148 	bne.w	8003ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d005      	beq.n	800386e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	2b02      	cmp	r3, #2
 800386c:	d130      	bne.n	80038d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 0201 	and.w	r2, r3, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d017      	beq.n	800390c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d123      	bne.n	8003960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	220f      	movs	r2, #15
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	08da      	lsrs	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3208      	adds	r2, #8
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a2 	beq.w	8003ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b57      	ldr	r3, [pc, #348]	@ (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	4a56      	ldr	r2, [pc, #344]	@ (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039b2:	4b54      	ldr	r3, [pc, #336]	@ (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039be:	4a52      	ldr	r2, [pc, #328]	@ (8003b08 <HAL_GPIO_Init+0x2ec>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a49      	ldr	r2, [pc, #292]	@ (8003b0c <HAL_GPIO_Init+0x2f0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x202>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a48      	ldr	r2, [pc, #288]	@ (8003b10 <HAL_GPIO_Init+0x2f4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x1fe>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a47      	ldr	r2, [pc, #284]	@ (8003b14 <HAL_GPIO_Init+0x2f8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x1fa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a46      	ldr	r2, [pc, #280]	@ (8003b18 <HAL_GPIO_Init+0x2fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x1f6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a45      	ldr	r2, [pc, #276]	@ (8003b1c <HAL_GPIO_Init+0x300>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x1f2>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a0e:	2307      	movs	r3, #7
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	@ (8003b08 <HAL_GPIO_Init+0x2ec>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3e:	4b38      	ldr	r3, [pc, #224]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a62:	4a2f      	ldr	r2, [pc, #188]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a68:	4b2d      	ldr	r3, [pc, #180]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a8c:	4a24      	ldr	r2, [pc, #144]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a92:	4b23      	ldr	r3, [pc, #140]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003abc:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <HAL_GPIO_Init+0x304>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f67f aea2 	bls.w	8003838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	@ 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b40:	e003      	b.n	8003b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	041a      	lsls	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b68:	887a      	ldrh	r2, [r7, #2]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	041a      	lsls	r2, r3, #16
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	400b      	ands	r3, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e267      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d075      	beq.n	8003c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003baa:	4b88      	ldr	r3, [pc, #544]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4b85      	ldr	r3, [pc, #532]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b82      	ldr	r3, [pc, #520]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x108>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e242      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x74>
 8003bf2:	4b76      	ldr	r3, [pc, #472]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a75      	ldr	r2, [pc, #468]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x98>
 8003c0a:	4b70      	ldr	r3, [pc, #448]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b6d      	ldr	r3, [pc, #436]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c24:	4b69      	ldr	r3, [pc, #420]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a68      	ldr	r2, [pc, #416]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b66      	ldr	r3, [pc, #408]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a65      	ldr	r2, [pc, #404]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fe fc18 	bl	8002478 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fc14 	bl	8002478 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e207      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xc0>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fc04 	bl	8002478 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fc00 	bl	8002478 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1f3      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b51      	ldr	r3, [pc, #324]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0xe8>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d063      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b44      	ldr	r3, [pc, #272]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1c7      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4937      	ldr	r1, [pc, #220]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e03a      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x244>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fbb9 	bl	8002478 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fbb5 	bl	8002478 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1a8      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4925      	ldr	r1, [pc, #148]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	e015      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HAL_RCC_OscConfig+0x244>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe fb98 	bl	8002478 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fb94 	bl	8002478 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e187      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d036      	beq.n	8003de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_RCC_OscConfig+0x248>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fe fb78 	bl	8002478 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fe fb74 	bl	8002478 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e167      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x200>
 8003daa:	e01b      	b.n	8003de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_OscConfig+0x248>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7fe fb61 	bl	8002478 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	e00e      	b.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fe fb5d 	bl	8002478 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d907      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e150      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470000 	.word	0x42470000
 8003dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ea      	bne.n	8003dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8097 	beq.w	8003f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b81      	ldr	r3, [pc, #516]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b7d      	ldr	r3, [pc, #500]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e12:	4b7a      	ldr	r3, [pc, #488]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b77      	ldr	r3, [pc, #476]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b74      	ldr	r3, [pc, #464]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a73      	ldr	r2, [pc, #460]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fb1d 	bl	8002478 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe fb19 	bl	8002478 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e10c      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b6a      	ldr	r3, [pc, #424]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a63      	ldr	r2, [pc, #396]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x324>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x30c>
 8003e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a5e      	ldr	r2, [pc, #376]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x324>
 8003e98:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	4a57      	ldr	r2, [pc, #348]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea4:	4b55      	ldr	r3, [pc, #340]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a54      	ldr	r2, [pc, #336]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fe fade 	bl	8002478 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fe fada 	bl	8002478 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0cb      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x334>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fac8 	bl	8002478 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe fac4 	bl	8002478 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0b5      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f02:	4b3e      	ldr	r3, [pc, #248]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ee      	bne.n	8003eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	4a38      	ldr	r2, [pc, #224]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80a1 	beq.w	800406c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2a:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d05c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d141      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b31      	ldr	r3, [pc, #196]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe fa98 	bl	8002478 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe fa94 	bl	8002478 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e087      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	491b      	ldr	r1, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fa6d 	bl	8002478 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fe fa69 	bl	8002478 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e05c      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x416>
 8003fc0:	e054      	b.n	800406c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fa56 	bl	8002478 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe fa52 	bl	8002478 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e045      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x444>
 8003fee:	e03d      	b.n	800406c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e038      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000
 8004004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004008:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_RCC_OscConfig+0x4ec>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d028      	beq.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d121      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d11a      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800403e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004040:	4293      	cmp	r3, r2
 8004042:	d111      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d107      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800

0800407c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0cc      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004090:	4b68      	ldr	r3, [pc, #416]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d90c      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b65      	ldr	r3, [pc, #404]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a52      	ldr	r2, [pc, #328]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d044      	beq.n	800419c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d119      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d003      	beq.n	800413a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b3f      	ldr	r3, [pc, #252]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e067      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4934      	ldr	r1, [pc, #208]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800416c:	f7fe f984 	bl	8002478 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	e00a      	b.n	800418a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fe f980 	bl	8002478 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e04f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 020c 	and.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d1eb      	bne.n	8004174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800419c:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d20c      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ee:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490a      	ldr	r1, [pc, #40]	@ (800423c <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	@ (8004240 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f8e4 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00
 8004238:	40023800 	.word	0x40023800
 800423c:	080067ac 	.word	0x080067ac
 8004240:	20000004 	.word	0x20000004
 8004244:	20000008 	.word	0x20000008

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800424c:	b090      	sub	sp, #64	@ 0x40
 800424e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004260:	4b59      	ldr	r3, [pc, #356]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	d00d      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x40>
 800426c:	2b08      	cmp	r3, #8
 800426e:	f200 80a1 	bhi.w	80043b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x34>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d003      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x3a>
 800427a:	e09b      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b53      	ldr	r3, [pc, #332]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x184>)
 800427e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004280:	e09b      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004282:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004284:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004286:	e098      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004288:	4b4f      	ldr	r3, [pc, #316]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004292:	4b4d      	ldr	r3, [pc, #308]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d028      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b4a      	ldr	r3, [pc, #296]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	2200      	movs	r2, #0
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b0:	2100      	movs	r1, #0
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b4:	fb03 f201 	mul.w	r2, r3, r1
 80042b8:	2300      	movs	r3, #0
 80042ba:	fb00 f303 	mul.w	r3, r0, r3
 80042be:	4413      	add	r3, r2
 80042c0:	4a43      	ldr	r2, [pc, #268]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c2:	fba0 1202 	umull	r1, r2, r0, r2
 80042c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c8:	460a      	mov	r2, r1
 80042ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ce:	4413      	add	r3, r2
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	2200      	movs	r2, #0
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	61fa      	str	r2, [r7, #28]
 80042da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042e2:	f7fc faaf 	bl	8000844 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4613      	mov	r3, r2
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ee:	e053      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b35      	ldr	r3, [pc, #212]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	2200      	movs	r2, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	617a      	str	r2, [r7, #20]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004302:	f04f 0b00 	mov.w	fp, #0
 8004306:	4652      	mov	r2, sl
 8004308:	465b      	mov	r3, fp
 800430a:	f04f 0000 	mov.w	r0, #0
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	0159      	lsls	r1, r3, #5
 8004314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004318:	0150      	lsls	r0, r2, #5
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	ebb2 080a 	subs.w	r8, r2, sl
 8004322:	eb63 090b 	sbc.w	r9, r3, fp
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004332:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004336:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800433a:	ebb2 0408 	subs.w	r4, r2, r8
 800433e:	eb63 0509 	sbc.w	r5, r3, r9
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	00eb      	lsls	r3, r5, #3
 800434c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004350:	00e2      	lsls	r2, r4, #3
 8004352:	4614      	mov	r4, r2
 8004354:	461d      	mov	r5, r3
 8004356:	eb14 030a 	adds.w	r3, r4, sl
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	eb45 030b 	adc.w	r3, r5, fp
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800436e:	4629      	mov	r1, r5
 8004370:	028b      	lsls	r3, r1, #10
 8004372:	4621      	mov	r1, r4
 8004374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004378:	4621      	mov	r1, r4
 800437a:	028a      	lsls	r2, r1, #10
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	2200      	movs	r2, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438c:	f7fc fa5a 	bl	8000844 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x184>)
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	@ 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	017d7840 	.word	0x017d7840

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000004 	.word	0x20000004

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043f0:	f7ff fff0 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0a9b      	lsrs	r3, r3, #10
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4903      	ldr	r1, [pc, #12]	@ (8004410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	080067bc 	.word	0x080067bc

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004418:	f7ff ffdc 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0b5b      	lsrs	r3, r3, #13
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	@ (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	080067bc 	.word	0x080067bc

0800443c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07b      	b.n	8004546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800445e:	d009      	beq.n	8004474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
 8004466:	e005      	b.n	8004474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fbe8 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0104 	and.w	r1, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	f003 0210 	and.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800455e:	f7fd ff8b 	bl	8002478 <HAL_GetTick>
 8004562:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d001      	beq.n	8004578 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
 8004576:	e12a      	b.n	80047ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x36>
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e122      	b.n	80047ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Transmit+0x48>
 8004592:	2302      	movs	r3, #2
 8004594:	e11b      	b.n	80047ce <HAL_SPI_Transmit+0x280>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2203      	movs	r2, #3
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e4:	d10f      	bne.n	8004606 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004604:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d007      	beq.n	8004624 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	d152      	bne.n	80046d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_SPI_Transmit+0xee>
 8004636:	8b7b      	ldrh	r3, [r7, #26]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d145      	bne.n	80046c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004660:	e032      	b.n	80046c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d112      	bne.n	8004696 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004694:	e018      	b.n	80046c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004696:	f7fd feef 	bl	8002478 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d803      	bhi.n	80046ae <HAL_SPI_Transmit+0x160>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_Transmit+0x166>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e082      	b.n	80047ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1c7      	bne.n	8004662 <HAL_SPI_Transmit+0x114>
 80046d2:	e053      	b.n	800477c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_Transmit+0x194>
 80046dc:	8b7b      	ldrh	r3, [r7, #26]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d147      	bne.n	8004772 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004708:	e033      	b.n	8004772 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d113      	bne.n	8004740 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800473e:	e018      	b.n	8004772 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004740:	f7fd fe9a 	bl	8002478 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d803      	bhi.n	8004758 <HAL_SPI_Transmit+0x20a>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d102      	bne.n	800475e <HAL_SPI_Transmit+0x210>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e02d      	b.n	80047ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1c6      	bne.n	800470a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8b1 	bl	80048e8 <SPI_EndRxTxTransaction>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e8:	f7fd fe46 	bl	8002478 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f8:	f7fd fe3e 	bl	8002478 <HAL_GetTick>
 80047fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	015b      	lsls	r3, r3, #5
 8004804:	0d1b      	lsrs	r3, r3, #20
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480e:	e055      	b.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d051      	beq.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004818:	f7fd fe2e 	bl	8002478 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	429a      	cmp	r2, r3
 8004826:	d902      	bls.n	800482e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d13d      	bne.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800483c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004846:	d111      	bne.n	800486c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	d004      	beq.n	800485c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485a:	d107      	bne.n	800486c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004874:	d10f      	bne.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e018      	b.n	80048dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e002      	b.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d19a      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000004 	.word	0x20000004

080048e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2201      	movs	r2, #1
 80048fc:	2102      	movs	r1, #2
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff6a 	bl	80047d8 <SPI_WaitFlagStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e032      	b.n	8004980 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800491a:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <SPI_EndRxTxTransaction+0xa0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <SPI_EndRxTxTransaction+0xa4>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	0d5b      	lsrs	r3, r3, #21
 8004926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004938:	d112      	bne.n	8004960 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	@ 0x80
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff ff47 	bl	80047d8 <SPI_WaitFlagStateUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d016      	beq.n	800497e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e00f      	b.n	8004980 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	3b01      	subs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d0f2      	beq.n	8004960 <SPI_EndRxTxTransaction+0x78>
 800497a:	e000      	b.n	800497e <SPI_EndRxTxTransaction+0x96>
        break;
 800497c:	bf00      	nop
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000004 	.word	0x20000004
 800498c:	165e9f81 	.word	0x165e9f81

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e041      	b.n	8004a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd f9d2 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 faf8 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d001      	beq.n	8004a48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e03c      	b.n	8004ac2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad0 <HAL_TIM_Base_Start+0xa0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_TIM_Base_Start+0x5c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a62:	d013      	beq.n	8004a8c <HAL_TIM_Base_Start+0x5c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad4 <HAL_TIM_Base_Start+0xa4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIM_Base_Start+0x5c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <HAL_TIM_Base_Start+0xa8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIM_Base_Start+0x5c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <HAL_TIM_Base_Start+0xac>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_Base_Start+0x5c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_TIM_Base_Start+0xb0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d111      	bne.n	8004ab0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d010      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0201 	orr.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	e007      	b.n	8004ac0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40014000 	.word	0x40014000

08004ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e044      	b.n	8004b86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x6c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b26:	d013      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x6c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b98 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x6c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a19      	ldr	r2, [pc, #100]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xb8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x6c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a17      	ldr	r2, [pc, #92]	@ (8004ba0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x6c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ba4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d111      	bne.n	8004b74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d010      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0202 	mvn.w	r2, #2
 8004c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f999 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004c56:	e005      	b.n	8004c64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f98b 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f99c 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0204 	mvn.w	r2, #4
 8004c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f973 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004ca2:	e005      	b.n	8004cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f965 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f976 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01b      	beq.n	8004d02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0208 	mvn.w	r2, #8
 8004cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f94d 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004cee:	e005      	b.n	8004cfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f93f 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f950 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0210 	mvn.w	r2, #16
 8004d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2208      	movs	r2, #8
 8004d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f927 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004d3a:	e005      	b.n	8004d48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f919 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f92a 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0201 	mvn.w	r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff8f 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 faaf 	bl	80052f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8fb 	bl	8004fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00c      	beq.n	8004dde <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0220 	mvn.w	r2, #32
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fa81 	bl	80052e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_ConfigClockSource+0x1c>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0b4      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x186>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3a:	d03e      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xd4>
 8004e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e40:	f200 8087 	bhi.w	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e48:	f000 8086 	beq.w	8004f58 <HAL_TIM_ConfigClockSource+0x172>
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e50:	d87f      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e52:	2b70      	cmp	r3, #112	@ 0x70
 8004e54:	d01a      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xa6>
 8004e56:	2b70      	cmp	r3, #112	@ 0x70
 8004e58:	d87b      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5a:	2b60      	cmp	r3, #96	@ 0x60
 8004e5c:	d050      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0x11a>
 8004e5e:	2b60      	cmp	r3, #96	@ 0x60
 8004e60:	d877      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e62:	2b50      	cmp	r3, #80	@ 0x50
 8004e64:	d03c      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0xfa>
 8004e66:	2b50      	cmp	r3, #80	@ 0x50
 8004e68:	d873      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6a:	2b40      	cmp	r3, #64	@ 0x40
 8004e6c:	d058      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x13a>
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d86f      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e72:	2b30      	cmp	r3, #48	@ 0x30
 8004e74:	d064      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x15a>
 8004e76:	2b30      	cmp	r3, #48	@ 0x30
 8004e78:	d86b      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d060      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d867      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d05c      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x15a>
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d05a      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8a:	e062      	b.n	8004f52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e9c:	f000 f992 	bl	80051c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004eae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
      break;
 8004eb8:	e04f      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	f000 f97b 	bl	80051c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004edc:	609a      	str	r2, [r3, #8]
      break;
 8004ede:	e03c      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eec:	461a      	mov	r2, r3
 8004eee:	f000 f8ef 	bl	80050d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2150      	movs	r1, #80	@ 0x50
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f948 	bl	800518e <TIM_ITRx_SetConfig>
      break;
 8004efe:	e02c      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f000 f90e 	bl	800512e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2160      	movs	r1, #96	@ 0x60
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f938 	bl	800518e <TIM_ITRx_SetConfig>
      break;
 8004f1e:	e01c      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f000 f8cf 	bl	80050d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2140      	movs	r1, #64	@ 0x40
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f928 	bl	800518e <TIM_ITRx_SetConfig>
      break;
 8004f3e:	e00c      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 f91f 	bl	800518e <TIM_ITRx_SetConfig>
      break;
 8004f50:	e003      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      break;
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a37      	ldr	r2, [pc, #220]	@ (80050b4 <TIM_Base_SetConfig+0xf0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a34      	ldr	r2, [pc, #208]	@ (80050b8 <TIM_Base_SetConfig+0xf4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a33      	ldr	r2, [pc, #204]	@ (80050bc <TIM_Base_SetConfig+0xf8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <TIM_Base_SetConfig+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a28      	ldr	r2, [pc, #160]	@ (80050b4 <TIM_Base_SetConfig+0xf0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01b      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d017      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a25      	ldr	r2, [pc, #148]	@ (80050b8 <TIM_Base_SetConfig+0xf4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a24      	ldr	r2, [pc, #144]	@ (80050bc <TIM_Base_SetConfig+0xf8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00f      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <TIM_Base_SetConfig+0xfc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a22      	ldr	r2, [pc, #136]	@ (80050c4 <TIM_Base_SetConfig+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a21      	ldr	r2, [pc, #132]	@ (80050c8 <TIM_Base_SetConfig+0x104>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a20      	ldr	r2, [pc, #128]	@ (80050cc <TIM_Base_SetConfig+0x108>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a0c      	ldr	r2, [pc, #48]	@ (80050b4 <TIM_Base_SetConfig+0xf0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d103      	bne.n	800508e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0201 	bic.w	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 030a 	bic.w	r3, r3, #10
 800510c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800512e:	b480      	push	{r7}
 8005130:	b087      	sub	sp, #28
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f023 0210 	bic.w	r2, r3, #16
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	031b      	lsls	r3, r3, #12
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800516a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f043 0307 	orr.w	r3, r3, #7
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	021a      	lsls	r2, r3, #8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e050      	b.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d013      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10c      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40014000 	.word	0x40014000

080052e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e042      	b.n	80053a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fd52 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	@ 0x24
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fa09 	bl	8005764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	@ 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d175      	bne.n	80054b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_UART_Transmit+0x2c>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e06e      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2221      	movs	r2, #33	@ 0x21
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e6:	f7fd f847 	bl	8002478 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005400:	d108      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e003      	b.n	800541c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800541c:	e02e      	b.n	800547c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f8df 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e03a      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3302      	adds	r3, #2
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e007      	b.n	800546e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1cb      	bne.n	800541e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2140      	movs	r1, #64	@ 0x40
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f8ab 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	@ 0x28
 80054c2:	af02      	add	r7, sp, #8
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b20      	cmp	r3, #32
 80054dc:	f040 8081 	bne.w	80055e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Receive+0x2e>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e079      	b.n	80055e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2222      	movs	r2, #34	@ 0x22
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005504:	f7fc ffb8 	bl	8002478 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d108      	bne.n	8005532 <HAL_UART_Receive+0x74>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e003      	b.n	800553a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800553a:	e047      	b.n	80055cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	2120      	movs	r1, #32
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f850 	bl	80055ec <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e042      	b.n	80055e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10c      	bne.n	800557e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005570:	b29a      	uxth	r2, r3
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e01f      	b.n	80055be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005586:	d007      	beq.n	8005598 <HAL_UART_Receive+0xda>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_UART_Receive+0xe8>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	e008      	b.n	80055b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	3301      	adds	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1b2      	bne.n	800553c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fc:	e03b      	b.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d037      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fc ff37 	bl	8002478 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <UART_WaitOnFlagUntilTimeout+0x30>
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e03a      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d023      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b80      	cmp	r3, #128	@ 0x80
 8005632:	d020      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d01d      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b08      	cmp	r3, #8
 8005646:	d116      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f81d 	bl	800569e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2208      	movs	r2, #8
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00f      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d0b4      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800569e:	b480      	push	{r7}
 80056a0:	b095      	sub	sp, #84	@ 0x54
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	2b01      	cmp	r3, #1
 8005714:	d119      	bne.n	800574a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	60bb      	str	r3, [r7, #8]
   return(result);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f023 0310 	bic.w	r3, r3, #16
 800572c:	647b      	str	r3, [r7, #68]	@ 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005736:	61ba      	str	r2, [r7, #24]
 8005738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6979      	ldr	r1, [r7, #20]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	613b      	str	r3, [r7, #16]
   return(result);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e5      	bne.n	8005716 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005758:	bf00      	nop
 800575a:	3754      	adds	r7, #84	@ 0x54
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005768:	b0c0      	sub	sp, #256	@ 0x100
 800576a:	af00      	add	r7, sp, #0
 800576c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	68d9      	ldr	r1, [r3, #12]
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	ea40 0301 	orr.w	r3, r0, r1
 800578c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	431a      	orrs	r2, r3
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057bc:	f021 010c 	bic.w	r1, r1, #12
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057ca:	430b      	orrs	r3, r1
 80057cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	6999      	ldr	r1, [r3, #24]
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	ea40 0301 	orr.w	r3, r0, r1
 80057ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005a30 <UART_SetConfig+0x2cc>)
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d005      	beq.n	8005804 <UART_SetConfig+0xa0>
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005a34 <UART_SetConfig+0x2d0>)
 8005800:	429a      	cmp	r2, r3
 8005802:	d104      	bne.n	800580e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005804:	f7fe fe06 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005808:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800580c:	e003      	b.n	8005816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800580e:	f7fe fded 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005812:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005820:	f040 810c 	bne.w	8005a3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005828:	2200      	movs	r2, #0
 800582a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800582e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	1891      	adds	r1, r2, r2
 800583c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800583e:	415b      	adcs	r3, r3
 8005840:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005846:	4621      	mov	r1, r4
 8005848:	eb12 0801 	adds.w	r8, r2, r1
 800584c:	4629      	mov	r1, r5
 800584e:	eb43 0901 	adc.w	r9, r3, r1
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800585e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005866:	4690      	mov	r8, r2
 8005868:	4699      	mov	r9, r3
 800586a:	4623      	mov	r3, r4
 800586c:	eb18 0303 	adds.w	r3, r8, r3
 8005870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005874:	462b      	mov	r3, r5
 8005876:	eb49 0303 	adc.w	r3, r9, r3
 800587a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800588a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800588e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005892:	460b      	mov	r3, r1
 8005894:	18db      	adds	r3, r3, r3
 8005896:	653b      	str	r3, [r7, #80]	@ 0x50
 8005898:	4613      	mov	r3, r2
 800589a:	eb42 0303 	adc.w	r3, r2, r3
 800589e:	657b      	str	r3, [r7, #84]	@ 0x54
 80058a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058a8:	f7fa ffcc 	bl	8000844 <__aeabi_uldivmod>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4b61      	ldr	r3, [pc, #388]	@ (8005a38 <UART_SetConfig+0x2d4>)
 80058b2:	fba3 2302 	umull	r2, r3, r3, r2
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	011c      	lsls	r4, r3, #4
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	1891      	adds	r1, r2, r2
 80058d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058d4:	415b      	adcs	r3, r3
 80058d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058dc:	4641      	mov	r1, r8
 80058de:	eb12 0a01 	adds.w	sl, r2, r1
 80058e2:	4649      	mov	r1, r9
 80058e4:	eb43 0b01 	adc.w	fp, r3, r1
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058fc:	4692      	mov	sl, r2
 80058fe:	469b      	mov	fp, r3
 8005900:	4643      	mov	r3, r8
 8005902:	eb1a 0303 	adds.w	r3, sl, r3
 8005906:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800590a:	464b      	mov	r3, r9
 800590c:	eb4b 0303 	adc.w	r3, fp, r3
 8005910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005920:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005928:	460b      	mov	r3, r1
 800592a:	18db      	adds	r3, r3, r3
 800592c:	643b      	str	r3, [r7, #64]	@ 0x40
 800592e:	4613      	mov	r3, r2
 8005930:	eb42 0303 	adc.w	r3, r2, r3
 8005934:	647b      	str	r3, [r7, #68]	@ 0x44
 8005936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800593a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800593e:	f7fa ff81 	bl	8000844 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4611      	mov	r1, r2
 8005948:	4b3b      	ldr	r3, [pc, #236]	@ (8005a38 <UART_SetConfig+0x2d4>)
 800594a:	fba3 2301 	umull	r2, r3, r3, r1
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	2264      	movs	r2, #100	@ 0x64
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	1acb      	subs	r3, r1, r3
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800595e:	4b36      	ldr	r3, [pc, #216]	@ (8005a38 <UART_SetConfig+0x2d4>)
 8005960:	fba3 2302 	umull	r2, r3, r3, r2
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800596c:	441c      	add	r4, r3
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005978:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800597c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005988:	415b      	adcs	r3, r3
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800598c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005990:	4641      	mov	r1, r8
 8005992:	1851      	adds	r1, r2, r1
 8005994:	6339      	str	r1, [r7, #48]	@ 0x30
 8005996:	4649      	mov	r1, r9
 8005998:	414b      	adcs	r3, r1
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059a8:	4659      	mov	r1, fp
 80059aa:	00cb      	lsls	r3, r1, #3
 80059ac:	4651      	mov	r1, sl
 80059ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b2:	4651      	mov	r1, sl
 80059b4:	00ca      	lsls	r2, r1, #3
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	4642      	mov	r2, r8
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059c4:	464b      	mov	r3, r9
 80059c6:	460a      	mov	r2, r1
 80059c8:	eb42 0303 	adc.w	r3, r2, r3
 80059cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059e4:	460b      	mov	r3, r1
 80059e6:	18db      	adds	r3, r3, r3
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ea:	4613      	mov	r3, r2
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059fa:	f7fa ff23 	bl	8000844 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <UART_SetConfig+0x2d4>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	@ 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	3332      	adds	r3, #50	@ 0x32
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UART_SetConfig+0x2d4>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 0207 	and.w	r2, r3, #7
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4422      	add	r2, r4
 8005a2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a2c:	e106      	b.n	8005c3c <UART_SetConfig+0x4d8>
 8005a2e:	bf00      	nop
 8005a30:	40011000 	.word	0x40011000
 8005a34:	40011400 	.word	0x40011400
 8005a38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a4e:	4642      	mov	r2, r8
 8005a50:	464b      	mov	r3, r9
 8005a52:	1891      	adds	r1, r2, r2
 8005a54:	6239      	str	r1, [r7, #32]
 8005a56:	415b      	adcs	r3, r3
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a5e:	4641      	mov	r1, r8
 8005a60:	1854      	adds	r4, r2, r1
 8005a62:	4649      	mov	r1, r9
 8005a64:	eb43 0501 	adc.w	r5, r3, r1
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	00eb      	lsls	r3, r5, #3
 8005a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a76:	00e2      	lsls	r2, r4, #3
 8005a78:	4614      	mov	r4, r2
 8005a7a:	461d      	mov	r5, r3
 8005a7c:	4643      	mov	r3, r8
 8005a7e:	18e3      	adds	r3, r4, r3
 8005a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a84:	464b      	mov	r3, r9
 8005a86:	eb45 0303 	adc.w	r3, r5, r3
 8005a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005aaa:	4629      	mov	r1, r5
 8005aac:	008b      	lsls	r3, r1, #2
 8005aae:	4621      	mov	r1, r4
 8005ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	008a      	lsls	r2, r1, #2
 8005ab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005abc:	f7fa fec2 	bl	8000844 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4b60      	ldr	r3, [pc, #384]	@ (8005c48 <UART_SetConfig+0x4e4>)
 8005ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	011c      	lsls	r4, r3, #4
 8005ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ad8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005adc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	1891      	adds	r1, r2, r2
 8005ae6:	61b9      	str	r1, [r7, #24]
 8005ae8:	415b      	adcs	r3, r3
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af0:	4641      	mov	r1, r8
 8005af2:	1851      	adds	r1, r2, r1
 8005af4:	6139      	str	r1, [r7, #16]
 8005af6:	4649      	mov	r1, r9
 8005af8:	414b      	adcs	r3, r1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b08:	4659      	mov	r1, fp
 8005b0a:	00cb      	lsls	r3, r1, #3
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b12:	4651      	mov	r1, sl
 8005b14:	00ca      	lsls	r2, r1, #3
 8005b16:	4610      	mov	r0, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b24:	464b      	mov	r3, r9
 8005b26:	460a      	mov	r2, r1
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b48:	4649      	mov	r1, r9
 8005b4a:	008b      	lsls	r3, r1, #2
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b52:	4641      	mov	r1, r8
 8005b54:	008a      	lsls	r2, r1, #2
 8005b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b5a:	f7fa fe73 	bl	8000844 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	4b38      	ldr	r3, [pc, #224]	@ (8005c48 <UART_SetConfig+0x4e4>)
 8005b66:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2264      	movs	r2, #100	@ 0x64
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	3332      	adds	r3, #50	@ 0x32
 8005b78:	4a33      	ldr	r2, [pc, #204]	@ (8005c48 <UART_SetConfig+0x4e4>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b84:	441c      	add	r4, r3
 8005b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	1851      	adds	r1, r2, r1
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	4649      	mov	r1, r9
 8005bac:	414b      	adcs	r3, r1
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	00cb      	lsls	r3, r1, #3
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	00ca      	lsls	r2, r1, #3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	189b      	adds	r3, r3, r2
 8005bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	460a      	mov	r2, r1
 8005bda:	eb42 0303 	adc.w	r3, r2, r3
 8005bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bea:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	008b      	lsls	r3, r1, #2
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c02:	4641      	mov	r1, r8
 8005c04:	008a      	lsls	r2, r1, #2
 8005c06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c0a:	f7fa fe1b 	bl	8000844 <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <UART_SetConfig+0x4e4>)
 8005c14:	fba3 1302 	umull	r1, r3, r3, r2
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	2164      	movs	r1, #100	@ 0x64
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	3332      	adds	r3, #50	@ 0x32
 8005c26:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <UART_SetConfig+0x4e4>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f003 020f 	and.w	r2, r3, #15
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4422      	add	r2, r4
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <memset>:
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d100      	bne.n	8005c56 <memset+0xa>
 8005c54:	4770      	bx	lr
 8005c56:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5a:	e7f9      	b.n	8005c50 <memset+0x4>

08005c5c <__libc_init_array>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c94 <__libc_init_array+0x38>)
 8005c60:	4c0d      	ldr	r4, [pc, #52]	@ (8005c98 <__libc_init_array+0x3c>)
 8005c62:	1b64      	subs	r4, r4, r5
 8005c64:	10a4      	asrs	r4, r4, #2
 8005c66:	2600      	movs	r6, #0
 8005c68:	42a6      	cmp	r6, r4
 8005c6a:	d109      	bne.n	8005c80 <__libc_init_array+0x24>
 8005c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c9c <__libc_init_array+0x40>)
 8005c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca0 <__libc_init_array+0x44>)
 8005c70:	f000 fd8c 	bl	800678c <_init>
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	2600      	movs	r6, #0
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	d105      	bne.n	8005c8a <__libc_init_array+0x2e>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c84:	4798      	blx	r3
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7ee      	b.n	8005c68 <__libc_init_array+0xc>
 8005c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8e:	4798      	blx	r3
 8005c90:	3601      	adds	r6, #1
 8005c92:	e7f2      	b.n	8005c7a <__libc_init_array+0x1e>
 8005c94:	08006ba4 	.word	0x08006ba4
 8005c98:	08006ba4 	.word	0x08006ba4
 8005c9c:	08006ba4 	.word	0x08006ba4
 8005ca0:	08006ba8 	.word	0x08006ba8

08005ca4 <cosf>:
 8005ca4:	ee10 3a10 	vmov	r3, s0
 8005ca8:	b507      	push	{r0, r1, r2, lr}
 8005caa:	4a1e      	ldr	r2, [pc, #120]	@ (8005d24 <cosf+0x80>)
 8005cac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d806      	bhi.n	8005cc2 <cosf+0x1e>
 8005cb4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005d28 <cosf+0x84>
 8005cb8:	b003      	add	sp, #12
 8005cba:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cbe:	f000 b87b 	b.w	8005db8 <__kernel_cosf>
 8005cc2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005cc6:	d304      	bcc.n	8005cd2 <cosf+0x2e>
 8005cc8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005ccc:	b003      	add	sp, #12
 8005cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cd2:	4668      	mov	r0, sp
 8005cd4:	f000 f910 	bl	8005ef8 <__ieee754_rem_pio2f>
 8005cd8:	f000 0003 	and.w	r0, r0, #3
 8005cdc:	2801      	cmp	r0, #1
 8005cde:	d009      	beq.n	8005cf4 <cosf+0x50>
 8005ce0:	2802      	cmp	r0, #2
 8005ce2:	d010      	beq.n	8005d06 <cosf+0x62>
 8005ce4:	b9b0      	cbnz	r0, 8005d14 <cosf+0x70>
 8005ce6:	eddd 0a01 	vldr	s1, [sp, #4]
 8005cea:	ed9d 0a00 	vldr	s0, [sp]
 8005cee:	f000 f863 	bl	8005db8 <__kernel_cosf>
 8005cf2:	e7eb      	b.n	8005ccc <cosf+0x28>
 8005cf4:	eddd 0a01 	vldr	s1, [sp, #4]
 8005cf8:	ed9d 0a00 	vldr	s0, [sp]
 8005cfc:	f000 f8b4 	bl	8005e68 <__kernel_sinf>
 8005d00:	eeb1 0a40 	vneg.f32	s0, s0
 8005d04:	e7e2      	b.n	8005ccc <cosf+0x28>
 8005d06:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d0a:	ed9d 0a00 	vldr	s0, [sp]
 8005d0e:	f000 f853 	bl	8005db8 <__kernel_cosf>
 8005d12:	e7f5      	b.n	8005d00 <cosf+0x5c>
 8005d14:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d18:	ed9d 0a00 	vldr	s0, [sp]
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f000 f8a3 	bl	8005e68 <__kernel_sinf>
 8005d22:	e7d3      	b.n	8005ccc <cosf+0x28>
 8005d24:	3f490fd8 	.word	0x3f490fd8
 8005d28:	00000000 	.word	0x00000000

08005d2c <sinf>:
 8005d2c:	ee10 3a10 	vmov	r3, s0
 8005d30:	b507      	push	{r0, r1, r2, lr}
 8005d32:	4a1f      	ldr	r2, [pc, #124]	@ (8005db0 <sinf+0x84>)
 8005d34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d807      	bhi.n	8005d4c <sinf+0x20>
 8005d3c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005db4 <sinf+0x88>
 8005d40:	2000      	movs	r0, #0
 8005d42:	b003      	add	sp, #12
 8005d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d48:	f000 b88e 	b.w	8005e68 <__kernel_sinf>
 8005d4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d50:	d304      	bcc.n	8005d5c <sinf+0x30>
 8005d52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005d56:	b003      	add	sp, #12
 8005d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d5c:	4668      	mov	r0, sp
 8005d5e:	f000 f8cb 	bl	8005ef8 <__ieee754_rem_pio2f>
 8005d62:	f000 0003 	and.w	r0, r0, #3
 8005d66:	2801      	cmp	r0, #1
 8005d68:	d00a      	beq.n	8005d80 <sinf+0x54>
 8005d6a:	2802      	cmp	r0, #2
 8005d6c:	d00f      	beq.n	8005d8e <sinf+0x62>
 8005d6e:	b9c0      	cbnz	r0, 8005da2 <sinf+0x76>
 8005d70:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d74:	ed9d 0a00 	vldr	s0, [sp]
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f000 f875 	bl	8005e68 <__kernel_sinf>
 8005d7e:	e7ea      	b.n	8005d56 <sinf+0x2a>
 8005d80:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d84:	ed9d 0a00 	vldr	s0, [sp]
 8005d88:	f000 f816 	bl	8005db8 <__kernel_cosf>
 8005d8c:	e7e3      	b.n	8005d56 <sinf+0x2a>
 8005d8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d92:	ed9d 0a00 	vldr	s0, [sp]
 8005d96:	2001      	movs	r0, #1
 8005d98:	f000 f866 	bl	8005e68 <__kernel_sinf>
 8005d9c:	eeb1 0a40 	vneg.f32	s0, s0
 8005da0:	e7d9      	b.n	8005d56 <sinf+0x2a>
 8005da2:	eddd 0a01 	vldr	s1, [sp, #4]
 8005da6:	ed9d 0a00 	vldr	s0, [sp]
 8005daa:	f000 f805 	bl	8005db8 <__kernel_cosf>
 8005dae:	e7f5      	b.n	8005d9c <sinf+0x70>
 8005db0:	3f490fd8 	.word	0x3f490fd8
 8005db4:	00000000 	.word	0x00000000

08005db8 <__kernel_cosf>:
 8005db8:	ee10 3a10 	vmov	r3, s0
 8005dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dc0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005dc4:	eef0 6a40 	vmov.f32	s13, s0
 8005dc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005dcc:	d204      	bcs.n	8005dd8 <__kernel_cosf+0x20>
 8005dce:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005dd2:	ee17 2a90 	vmov	r2, s15
 8005dd6:	b342      	cbz	r2, 8005e2a <__kernel_cosf+0x72>
 8005dd8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005ddc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005e48 <__kernel_cosf+0x90>
 8005de0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005e4c <__kernel_cosf+0x94>
 8005de4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e50 <__kernel_cosf+0x98>)
 8005de6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005dea:	4293      	cmp	r3, r2
 8005dec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005e54 <__kernel_cosf+0x9c>
 8005df0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005df4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005e58 <__kernel_cosf+0xa0>
 8005df8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005dfc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005e5c <__kernel_cosf+0xa4>
 8005e00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e04:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005e60 <__kernel_cosf+0xa8>
 8005e08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005e0c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005e10:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005e14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e18:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e20:	d804      	bhi.n	8005e2c <__kernel_cosf+0x74>
 8005e22:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005e26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005e2a:	4770      	bx	lr
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e64 <__kernel_cosf+0xac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	bf9a      	itte	ls
 8005e32:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005e36:	ee07 3a10 	vmovls	s14, r3
 8005e3a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005e3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e46:	e7ec      	b.n	8005e22 <__kernel_cosf+0x6a>
 8005e48:	ad47d74e 	.word	0xad47d74e
 8005e4c:	310f74f6 	.word	0x310f74f6
 8005e50:	3e999999 	.word	0x3e999999
 8005e54:	b493f27c 	.word	0xb493f27c
 8005e58:	37d00d01 	.word	0x37d00d01
 8005e5c:	bab60b61 	.word	0xbab60b61
 8005e60:	3d2aaaab 	.word	0x3d2aaaab
 8005e64:	3f480000 	.word	0x3f480000

08005e68 <__kernel_sinf>:
 8005e68:	ee10 3a10 	vmov	r3, s0
 8005e6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e70:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005e74:	d204      	bcs.n	8005e80 <__kernel_sinf+0x18>
 8005e76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e7a:	ee17 3a90 	vmov	r3, s15
 8005e7e:	b35b      	cbz	r3, 8005ed8 <__kernel_sinf+0x70>
 8005e80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005e84:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005edc <__kernel_sinf+0x74>
 8005e88:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005ee0 <__kernel_sinf+0x78>
 8005e8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e90:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005ee4 <__kernel_sinf+0x7c>
 8005e94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e98:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005ee8 <__kernel_sinf+0x80>
 8005e9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005ea0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005eec <__kernel_sinf+0x84>
 8005ea4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005ea8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005eac:	b930      	cbnz	r0, 8005ebc <__kernel_sinf+0x54>
 8005eae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005ef0 <__kernel_sinf+0x88>
 8005eb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005eb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005eba:	4770      	bx	lr
 8005ebc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005ec0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005ec4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005ec8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005ecc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005ef4 <__kernel_sinf+0x8c>
 8005ed0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005ed4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	2f2ec9d3 	.word	0x2f2ec9d3
 8005ee0:	b2d72f34 	.word	0xb2d72f34
 8005ee4:	3638ef1b 	.word	0x3638ef1b
 8005ee8:	b9500d01 	.word	0xb9500d01
 8005eec:	3c088889 	.word	0x3c088889
 8005ef0:	be2aaaab 	.word	0xbe2aaaab
 8005ef4:	3e2aaaab 	.word	0x3e2aaaab

08005ef8 <__ieee754_rem_pio2f>:
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	ee10 6a10 	vmov	r6, s0
 8005efe:	4b88      	ldr	r3, [pc, #544]	@ (8006120 <__ieee754_rem_pio2f+0x228>)
 8005f00:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005f04:	429d      	cmp	r5, r3
 8005f06:	b087      	sub	sp, #28
 8005f08:	4604      	mov	r4, r0
 8005f0a:	d805      	bhi.n	8005f18 <__ieee754_rem_pio2f+0x20>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	ed80 0a00 	vstr	s0, [r0]
 8005f12:	6043      	str	r3, [r0, #4]
 8005f14:	2000      	movs	r0, #0
 8005f16:	e022      	b.n	8005f5e <__ieee754_rem_pio2f+0x66>
 8005f18:	4b82      	ldr	r3, [pc, #520]	@ (8006124 <__ieee754_rem_pio2f+0x22c>)
 8005f1a:	429d      	cmp	r5, r3
 8005f1c:	d83a      	bhi.n	8005f94 <__ieee754_rem_pio2f+0x9c>
 8005f1e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006128 <__ieee754_rem_pio2f+0x230>
 8005f28:	4a80      	ldr	r2, [pc, #512]	@ (800612c <__ieee754_rem_pio2f+0x234>)
 8005f2a:	f023 030f 	bic.w	r3, r3, #15
 8005f2e:	dd18      	ble.n	8005f62 <__ieee754_rem_pio2f+0x6a>
 8005f30:	4293      	cmp	r3, r2
 8005f32:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005f36:	bf09      	itett	eq
 8005f38:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006130 <__ieee754_rem_pio2f+0x238>
 8005f3c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006134 <__ieee754_rem_pio2f+0x23c>
 8005f40:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006138 <__ieee754_rem_pio2f+0x240>
 8005f44:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005f48:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f50:	ed80 7a00 	vstr	s14, [r0]
 8005f54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f58:	edc0 7a01 	vstr	s15, [r0, #4]
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	b007      	add	sp, #28
 8005f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f62:	4293      	cmp	r3, r2
 8005f64:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005f68:	bf09      	itett	eq
 8005f6a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006130 <__ieee754_rem_pio2f+0x238>
 8005f6e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006134 <__ieee754_rem_pio2f+0x23c>
 8005f72:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006138 <__ieee754_rem_pio2f+0x240>
 8005f76:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005f7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f82:	ed80 7a00 	vstr	s14, [r0]
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	edc0 7a01 	vstr	s15, [r0, #4]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	e7e4      	b.n	8005f5e <__ieee754_rem_pio2f+0x66>
 8005f94:	4b69      	ldr	r3, [pc, #420]	@ (800613c <__ieee754_rem_pio2f+0x244>)
 8005f96:	429d      	cmp	r5, r3
 8005f98:	d873      	bhi.n	8006082 <__ieee754_rem_pio2f+0x18a>
 8005f9a:	f000 f8dd 	bl	8006158 <fabsf>
 8005f9e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006140 <__ieee754_rem_pio2f+0x248>
 8005fa2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005fa6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fb2:	ee17 0a90 	vmov	r0, s15
 8005fb6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006128 <__ieee754_rem_pio2f+0x230>
 8005fba:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005fbe:	281f      	cmp	r0, #31
 8005fc0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006134 <__ieee754_rem_pio2f+0x23c>
 8005fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc8:	eeb1 6a47 	vneg.f32	s12, s14
 8005fcc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005fd0:	ee16 1a90 	vmov	r1, s13
 8005fd4:	dc09      	bgt.n	8005fea <__ieee754_rem_pio2f+0xf2>
 8005fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8006144 <__ieee754_rem_pio2f+0x24c>)
 8005fd8:	1e47      	subs	r7, r0, #1
 8005fda:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005fde:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d107      	bne.n	8005ffa <__ieee754_rem_pio2f+0x102>
 8005fea:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005fee:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005ff2:	2a08      	cmp	r2, #8
 8005ff4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005ff8:	dc14      	bgt.n	8006024 <__ieee754_rem_pio2f+0x12c>
 8005ffa:	6021      	str	r1, [r4, #0]
 8005ffc:	ed94 7a00 	vldr	s14, [r4]
 8006000:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006004:	2e00      	cmp	r6, #0
 8006006:	ee30 0a67 	vsub.f32	s0, s0, s15
 800600a:	ed84 0a01 	vstr	s0, [r4, #4]
 800600e:	daa6      	bge.n	8005f5e <__ieee754_rem_pio2f+0x66>
 8006010:	eeb1 7a47 	vneg.f32	s14, s14
 8006014:	eeb1 0a40 	vneg.f32	s0, s0
 8006018:	ed84 7a00 	vstr	s14, [r4]
 800601c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006020:	4240      	negs	r0, r0
 8006022:	e79c      	b.n	8005f5e <__ieee754_rem_pio2f+0x66>
 8006024:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006130 <__ieee754_rem_pio2f+0x238>
 8006028:	eef0 6a40 	vmov.f32	s13, s0
 800602c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006030:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006034:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006038:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006138 <__ieee754_rem_pio2f+0x240>
 800603c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006040:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006044:	ee15 2a90 	vmov	r2, s11
 8006048:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800604c:	1a5b      	subs	r3, r3, r1
 800604e:	2b19      	cmp	r3, #25
 8006050:	dc04      	bgt.n	800605c <__ieee754_rem_pio2f+0x164>
 8006052:	edc4 5a00 	vstr	s11, [r4]
 8006056:	eeb0 0a66 	vmov.f32	s0, s13
 800605a:	e7cf      	b.n	8005ffc <__ieee754_rem_pio2f+0x104>
 800605c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006148 <__ieee754_rem_pio2f+0x250>
 8006060:	eeb0 0a66 	vmov.f32	s0, s13
 8006064:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006068:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800606c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800614c <__ieee754_rem_pio2f+0x254>
 8006070:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006074:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006078:	ee30 7a67 	vsub.f32	s14, s0, s15
 800607c:	ed84 7a00 	vstr	s14, [r4]
 8006080:	e7bc      	b.n	8005ffc <__ieee754_rem_pio2f+0x104>
 8006082:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8006086:	d306      	bcc.n	8006096 <__ieee754_rem_pio2f+0x19e>
 8006088:	ee70 7a40 	vsub.f32	s15, s0, s0
 800608c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006090:	edc0 7a00 	vstr	s15, [r0]
 8006094:	e73e      	b.n	8005f14 <__ieee754_rem_pio2f+0x1c>
 8006096:	15ea      	asrs	r2, r5, #23
 8006098:	3a86      	subs	r2, #134	@ 0x86
 800609a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060a6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006150 <__ieee754_rem_pio2f+0x258>
 80060aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80060ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80060b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80060c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80060ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	edcd 7a05 	vstr	s15, [sp, #20]
 80060da:	d11e      	bne.n	800611a <__ieee754_rem_pio2f+0x222>
 80060dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80060e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2302      	movne	r3, #2
 80060ea:	491a      	ldr	r1, [pc, #104]	@ (8006154 <__ieee754_rem_pio2f+0x25c>)
 80060ec:	9101      	str	r1, [sp, #4]
 80060ee:	2102      	movs	r1, #2
 80060f0:	9100      	str	r1, [sp, #0]
 80060f2:	a803      	add	r0, sp, #12
 80060f4:	4621      	mov	r1, r4
 80060f6:	f000 f837 	bl	8006168 <__kernel_rem_pio2f>
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	f6bf af2f 	bge.w	8005f5e <__ieee754_rem_pio2f+0x66>
 8006100:	edd4 7a00 	vldr	s15, [r4]
 8006104:	eef1 7a67 	vneg.f32	s15, s15
 8006108:	edc4 7a00 	vstr	s15, [r4]
 800610c:	edd4 7a01 	vldr	s15, [r4, #4]
 8006110:	eef1 7a67 	vneg.f32	s15, s15
 8006114:	edc4 7a01 	vstr	s15, [r4, #4]
 8006118:	e782      	b.n	8006020 <__ieee754_rem_pio2f+0x128>
 800611a:	2303      	movs	r3, #3
 800611c:	e7e5      	b.n	80060ea <__ieee754_rem_pio2f+0x1f2>
 800611e:	bf00      	nop
 8006120:	3f490fd8 	.word	0x3f490fd8
 8006124:	4016cbe3 	.word	0x4016cbe3
 8006128:	3fc90f80 	.word	0x3fc90f80
 800612c:	3fc90fd0 	.word	0x3fc90fd0
 8006130:	37354400 	.word	0x37354400
 8006134:	37354443 	.word	0x37354443
 8006138:	2e85a308 	.word	0x2e85a308
 800613c:	43490f80 	.word	0x43490f80
 8006140:	3f22f984 	.word	0x3f22f984
 8006144:	080067cc 	.word	0x080067cc
 8006148:	2e85a300 	.word	0x2e85a300
 800614c:	248d3132 	.word	0x248d3132
 8006150:	43800000 	.word	0x43800000
 8006154:	0800684c 	.word	0x0800684c

08006158 <fabsf>:
 8006158:	ee10 3a10 	vmov	r3, s0
 800615c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006160:	ee00 3a10 	vmov	s0, r3
 8006164:	4770      	bx	lr
	...

08006168 <__kernel_rem_pio2f>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ed2d 8b04 	vpush	{d8-d9}
 8006170:	b0d9      	sub	sp, #356	@ 0x164
 8006172:	4690      	mov	r8, r2
 8006174:	9001      	str	r0, [sp, #4]
 8006176:	4ab6      	ldr	r2, [pc, #728]	@ (8006450 <__kernel_rem_pio2f+0x2e8>)
 8006178:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800617a:	f118 0f04 	cmn.w	r8, #4
 800617e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8006182:	460f      	mov	r7, r1
 8006184:	f103 3bff 	add.w	fp, r3, #4294967295
 8006188:	db26      	blt.n	80061d8 <__kernel_rem_pio2f+0x70>
 800618a:	f1b8 0203 	subs.w	r2, r8, #3
 800618e:	bf48      	it	mi
 8006190:	f108 0204 	addmi.w	r2, r8, #4
 8006194:	10d2      	asrs	r2, r2, #3
 8006196:	1c55      	adds	r5, r2, #1
 8006198:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800619a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 800619e:	00e8      	lsls	r0, r5, #3
 80061a0:	eba2 060b 	sub.w	r6, r2, fp
 80061a4:	9002      	str	r0, [sp, #8]
 80061a6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80061aa:	eb0a 0c0b 	add.w	ip, sl, fp
 80061ae:	ac1c      	add	r4, sp, #112	@ 0x70
 80061b0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80061b4:	2000      	movs	r0, #0
 80061b6:	4560      	cmp	r0, ip
 80061b8:	dd10      	ble.n	80061dc <__kernel_rem_pio2f+0x74>
 80061ba:	a91c      	add	r1, sp, #112	@ 0x70
 80061bc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80061c0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80061c4:	2600      	movs	r6, #0
 80061c6:	4556      	cmp	r6, sl
 80061c8:	dc24      	bgt.n	8006214 <__kernel_rem_pio2f+0xac>
 80061ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80061ce:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 80061d2:	4684      	mov	ip, r0
 80061d4:	2400      	movs	r4, #0
 80061d6:	e016      	b.n	8006206 <__kernel_rem_pio2f+0x9e>
 80061d8:	2200      	movs	r2, #0
 80061da:	e7dc      	b.n	8006196 <__kernel_rem_pio2f+0x2e>
 80061dc:	42c6      	cmn	r6, r0
 80061de:	bf5d      	ittte	pl
 80061e0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80061e4:	ee07 1a90 	vmovpl	s15, r1
 80061e8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80061ec:	eef0 7a47 	vmovmi.f32	s15, s14
 80061f0:	ece4 7a01 	vstmia	r4!, {s15}
 80061f4:	3001      	adds	r0, #1
 80061f6:	e7de      	b.n	80061b6 <__kernel_rem_pio2f+0x4e>
 80061f8:	ecfe 6a01 	vldmia	lr!, {s13}
 80061fc:	ed3c 7a01 	vldmdb	ip!, {s14}
 8006200:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006204:	3401      	adds	r4, #1
 8006206:	455c      	cmp	r4, fp
 8006208:	ddf6      	ble.n	80061f8 <__kernel_rem_pio2f+0x90>
 800620a:	ece9 7a01 	vstmia	r9!, {s15}
 800620e:	3601      	adds	r6, #1
 8006210:	3004      	adds	r0, #4
 8006212:	e7d8      	b.n	80061c6 <__kernel_rem_pio2f+0x5e>
 8006214:	a908      	add	r1, sp, #32
 8006216:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800621a:	9104      	str	r1, [sp, #16]
 800621c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800621e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800645c <__kernel_rem_pio2f+0x2f4>
 8006222:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8006458 <__kernel_rem_pio2f+0x2f0>
 8006226:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800622a:	9203      	str	r2, [sp, #12]
 800622c:	4654      	mov	r4, sl
 800622e:	00a2      	lsls	r2, r4, #2
 8006230:	9205      	str	r2, [sp, #20]
 8006232:	aa58      	add	r2, sp, #352	@ 0x160
 8006234:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006238:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800623c:	a944      	add	r1, sp, #272	@ 0x110
 800623e:	aa08      	add	r2, sp, #32
 8006240:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006244:	4694      	mov	ip, r2
 8006246:	4626      	mov	r6, r4
 8006248:	2e00      	cmp	r6, #0
 800624a:	dc4c      	bgt.n	80062e6 <__kernel_rem_pio2f+0x17e>
 800624c:	4628      	mov	r0, r5
 800624e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006252:	f000 f9f1 	bl	8006638 <scalbnf>
 8006256:	eeb0 8a40 	vmov.f32	s16, s0
 800625a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800625e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006262:	f000 fa4f 	bl	8006704 <floorf>
 8006266:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800626a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800626e:	2d00      	cmp	r5, #0
 8006270:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006274:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006278:	ee17 9a90 	vmov	r9, s15
 800627c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006280:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006284:	dd41      	ble.n	800630a <__kernel_rem_pio2f+0x1a2>
 8006286:	f104 3cff 	add.w	ip, r4, #4294967295
 800628a:	a908      	add	r1, sp, #32
 800628c:	f1c5 0e08 	rsb	lr, r5, #8
 8006290:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006294:	fa46 f00e 	asr.w	r0, r6, lr
 8006298:	4481      	add	r9, r0
 800629a:	fa00 f00e 	lsl.w	r0, r0, lr
 800629e:	1a36      	subs	r6, r6, r0
 80062a0:	f1c5 0007 	rsb	r0, r5, #7
 80062a4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80062a8:	4106      	asrs	r6, r0
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	dd3c      	ble.n	8006328 <__kernel_rem_pio2f+0x1c0>
 80062ae:	f04f 0e00 	mov.w	lr, #0
 80062b2:	f109 0901 	add.w	r9, r9, #1
 80062b6:	4670      	mov	r0, lr
 80062b8:	4574      	cmp	r4, lr
 80062ba:	dc68      	bgt.n	800638e <__kernel_rem_pio2f+0x226>
 80062bc:	2d00      	cmp	r5, #0
 80062be:	dd03      	ble.n	80062c8 <__kernel_rem_pio2f+0x160>
 80062c0:	2d01      	cmp	r5, #1
 80062c2:	d074      	beq.n	80063ae <__kernel_rem_pio2f+0x246>
 80062c4:	2d02      	cmp	r5, #2
 80062c6:	d07d      	beq.n	80063c4 <__kernel_rem_pio2f+0x25c>
 80062c8:	2e02      	cmp	r6, #2
 80062ca:	d12d      	bne.n	8006328 <__kernel_rem_pio2f+0x1c0>
 80062cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80062d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80062d4:	b340      	cbz	r0, 8006328 <__kernel_rem_pio2f+0x1c0>
 80062d6:	4628      	mov	r0, r5
 80062d8:	9306      	str	r3, [sp, #24]
 80062da:	f000 f9ad 	bl	8006638 <scalbnf>
 80062de:	9b06      	ldr	r3, [sp, #24]
 80062e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80062e4:	e020      	b.n	8006328 <__kernel_rem_pio2f+0x1c0>
 80062e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80062ea:	3e01      	subs	r6, #1
 80062ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80062f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80062fc:	ecac 0a01 	vstmia	ip!, {s0}
 8006300:	ed30 0a01 	vldmdb	r0!, {s0}
 8006304:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006308:	e79e      	b.n	8006248 <__kernel_rem_pio2f+0xe0>
 800630a:	d105      	bne.n	8006318 <__kernel_rem_pio2f+0x1b0>
 800630c:	1e60      	subs	r0, r4, #1
 800630e:	a908      	add	r1, sp, #32
 8006310:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006314:	11f6      	asrs	r6, r6, #7
 8006316:	e7c8      	b.n	80062aa <__kernel_rem_pio2f+0x142>
 8006318:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800631c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	da31      	bge.n	800638a <__kernel_rem_pio2f+0x222>
 8006326:	2600      	movs	r6, #0
 8006328:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	f040 8098 	bne.w	8006464 <__kernel_rem_pio2f+0x2fc>
 8006334:	1e60      	subs	r0, r4, #1
 8006336:	2200      	movs	r2, #0
 8006338:	4550      	cmp	r0, sl
 800633a:	da4b      	bge.n	80063d4 <__kernel_rem_pio2f+0x26c>
 800633c:	2a00      	cmp	r2, #0
 800633e:	d065      	beq.n	800640c <__kernel_rem_pio2f+0x2a4>
 8006340:	3c01      	subs	r4, #1
 8006342:	ab08      	add	r3, sp, #32
 8006344:	3d08      	subs	r5, #8
 8006346:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f8      	beq.n	8006340 <__kernel_rem_pio2f+0x1d8>
 800634e:	4628      	mov	r0, r5
 8006350:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006354:	f000 f970 	bl	8006638 <scalbnf>
 8006358:	1c63      	adds	r3, r4, #1
 800635a:	aa44      	add	r2, sp, #272	@ 0x110
 800635c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800645c <__kernel_rem_pio2f+0x2f4>
 8006360:	0099      	lsls	r1, r3, #2
 8006362:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006366:	4623      	mov	r3, r4
 8006368:	2b00      	cmp	r3, #0
 800636a:	f280 80a9 	bge.w	80064c0 <__kernel_rem_pio2f+0x358>
 800636e:	4623      	mov	r3, r4
 8006370:	2b00      	cmp	r3, #0
 8006372:	f2c0 80c7 	blt.w	8006504 <__kernel_rem_pio2f+0x39c>
 8006376:	aa44      	add	r2, sp, #272	@ 0x110
 8006378:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800637c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006454 <__kernel_rem_pio2f+0x2ec>
 8006380:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 8006384:	2000      	movs	r0, #0
 8006386:	1ae2      	subs	r2, r4, r3
 8006388:	e0b1      	b.n	80064ee <__kernel_rem_pio2f+0x386>
 800638a:	2602      	movs	r6, #2
 800638c:	e78f      	b.n	80062ae <__kernel_rem_pio2f+0x146>
 800638e:	f852 1b04 	ldr.w	r1, [r2], #4
 8006392:	b948      	cbnz	r0, 80063a8 <__kernel_rem_pio2f+0x240>
 8006394:	b121      	cbz	r1, 80063a0 <__kernel_rem_pio2f+0x238>
 8006396:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800639a:	f842 1c04 	str.w	r1, [r2, #-4]
 800639e:	2101      	movs	r1, #1
 80063a0:	f10e 0e01 	add.w	lr, lr, #1
 80063a4:	4608      	mov	r0, r1
 80063a6:	e787      	b.n	80062b8 <__kernel_rem_pio2f+0x150>
 80063a8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80063ac:	e7f5      	b.n	800639a <__kernel_rem_pio2f+0x232>
 80063ae:	f104 3cff 	add.w	ip, r4, #4294967295
 80063b2:	aa08      	add	r2, sp, #32
 80063b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80063b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063bc:	a908      	add	r1, sp, #32
 80063be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80063c2:	e781      	b.n	80062c8 <__kernel_rem_pio2f+0x160>
 80063c4:	f104 3cff 	add.w	ip, r4, #4294967295
 80063c8:	aa08      	add	r2, sp, #32
 80063ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80063ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80063d2:	e7f3      	b.n	80063bc <__kernel_rem_pio2f+0x254>
 80063d4:	a908      	add	r1, sp, #32
 80063d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80063da:	3801      	subs	r0, #1
 80063dc:	430a      	orrs	r2, r1
 80063de:	e7ab      	b.n	8006338 <__kernel_rem_pio2f+0x1d0>
 80063e0:	3201      	adds	r2, #1
 80063e2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	d0fa      	beq.n	80063e0 <__kernel_rem_pio2f+0x278>
 80063ea:	9905      	ldr	r1, [sp, #20]
 80063ec:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80063f0:	eb0d 0001 	add.w	r0, sp, r1
 80063f4:	18e6      	adds	r6, r4, r3
 80063f6:	a91c      	add	r1, sp, #112	@ 0x70
 80063f8:	f104 0c01 	add.w	ip, r4, #1
 80063fc:	384c      	subs	r0, #76	@ 0x4c
 80063fe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006402:	4422      	add	r2, r4
 8006404:	4562      	cmp	r2, ip
 8006406:	da04      	bge.n	8006412 <__kernel_rem_pio2f+0x2aa>
 8006408:	4614      	mov	r4, r2
 800640a:	e710      	b.n	800622e <__kernel_rem_pio2f+0xc6>
 800640c:	9804      	ldr	r0, [sp, #16]
 800640e:	2201      	movs	r2, #1
 8006410:	e7e7      	b.n	80063e2 <__kernel_rem_pio2f+0x27a>
 8006412:	9903      	ldr	r1, [sp, #12]
 8006414:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006418:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800641c:	9105      	str	r1, [sp, #20]
 800641e:	ee07 1a90 	vmov	s15, r1
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	2400      	movs	r4, #0
 8006428:	ece6 7a01 	vstmia	r6!, {s15}
 800642c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 8006430:	46b1      	mov	r9, r6
 8006432:	455c      	cmp	r4, fp
 8006434:	dd04      	ble.n	8006440 <__kernel_rem_pio2f+0x2d8>
 8006436:	ece0 7a01 	vstmia	r0!, {s15}
 800643a:	f10c 0c01 	add.w	ip, ip, #1
 800643e:	e7e1      	b.n	8006404 <__kernel_rem_pio2f+0x29c>
 8006440:	ecfe 6a01 	vldmia	lr!, {s13}
 8006444:	ed39 7a01 	vldmdb	r9!, {s14}
 8006448:	3401      	adds	r4, #1
 800644a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800644e:	e7f0      	b.n	8006432 <__kernel_rem_pio2f+0x2ca>
 8006450:	08006b90 	.word	0x08006b90
 8006454:	08006b64 	.word	0x08006b64
 8006458:	43800000 	.word	0x43800000
 800645c:	3b800000 	.word	0x3b800000
 8006460:	00000000 	.word	0x00000000
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	eeb0 0a48 	vmov.f32	s0, s16
 800646a:	eba3 0008 	sub.w	r0, r3, r8
 800646e:	f000 f8e3 	bl	8006638 <scalbnf>
 8006472:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006458 <__kernel_rem_pio2f+0x2f0>
 8006476:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800647a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647e:	db19      	blt.n	80064b4 <__kernel_rem_pio2f+0x34c>
 8006480:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800645c <__kernel_rem_pio2f+0x2f4>
 8006484:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006488:	aa08      	add	r2, sp, #32
 800648a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800648e:	3508      	adds	r5, #8
 8006490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006494:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80064a0:	ee10 3a10 	vmov	r3, s0
 80064a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80064a8:	ee17 3a90 	vmov	r3, s15
 80064ac:	3401      	adds	r4, #1
 80064ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80064b2:	e74c      	b.n	800634e <__kernel_rem_pio2f+0x1e6>
 80064b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80064b8:	aa08      	add	r2, sp, #32
 80064ba:	ee10 3a10 	vmov	r3, s0
 80064be:	e7f6      	b.n	80064ae <__kernel_rem_pio2f+0x346>
 80064c0:	a808      	add	r0, sp, #32
 80064c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80064c6:	9001      	str	r0, [sp, #4]
 80064c8:	ee07 0a90 	vmov	s15, r0
 80064cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064d0:	3b01      	subs	r3, #1
 80064d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80064d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80064da:	ed62 7a01 	vstmdb	r2!, {s15}
 80064de:	e743      	b.n	8006368 <__kernel_rem_pio2f+0x200>
 80064e0:	ecfc 6a01 	vldmia	ip!, {s13}
 80064e4:	ecb5 7a01 	vldmia	r5!, {s14}
 80064e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80064ec:	3001      	adds	r0, #1
 80064ee:	4550      	cmp	r0, sl
 80064f0:	dc01      	bgt.n	80064f6 <__kernel_rem_pio2f+0x38e>
 80064f2:	4290      	cmp	r0, r2
 80064f4:	ddf4      	ble.n	80064e0 <__kernel_rem_pio2f+0x378>
 80064f6:	a858      	add	r0, sp, #352	@ 0x160
 80064f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80064fc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006500:	3b01      	subs	r3, #1
 8006502:	e735      	b.n	8006370 <__kernel_rem_pio2f+0x208>
 8006504:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006506:	2b02      	cmp	r3, #2
 8006508:	dc09      	bgt.n	800651e <__kernel_rem_pio2f+0x3b6>
 800650a:	2b00      	cmp	r3, #0
 800650c:	dc27      	bgt.n	800655e <__kernel_rem_pio2f+0x3f6>
 800650e:	d040      	beq.n	8006592 <__kernel_rem_pio2f+0x42a>
 8006510:	f009 0007 	and.w	r0, r9, #7
 8006514:	b059      	add	sp, #356	@ 0x164
 8006516:	ecbd 8b04 	vpop	{d8-d9}
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006520:	2b03      	cmp	r3, #3
 8006522:	d1f5      	bne.n	8006510 <__kernel_rem_pio2f+0x3a8>
 8006524:	aa30      	add	r2, sp, #192	@ 0xc0
 8006526:	1f0b      	subs	r3, r1, #4
 8006528:	4413      	add	r3, r2
 800652a:	461a      	mov	r2, r3
 800652c:	4620      	mov	r0, r4
 800652e:	2800      	cmp	r0, #0
 8006530:	dc50      	bgt.n	80065d4 <__kernel_rem_pio2f+0x46c>
 8006532:	4622      	mov	r2, r4
 8006534:	2a01      	cmp	r2, #1
 8006536:	dc5d      	bgt.n	80065f4 <__kernel_rem_pio2f+0x48c>
 8006538:	ab30      	add	r3, sp, #192	@ 0xc0
 800653a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 800653e:	440b      	add	r3, r1
 8006540:	2c01      	cmp	r4, #1
 8006542:	dc67      	bgt.n	8006614 <__kernel_rem_pio2f+0x4ac>
 8006544:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006548:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800654c:	2e00      	cmp	r6, #0
 800654e:	d167      	bne.n	8006620 <__kernel_rem_pio2f+0x4b8>
 8006550:	edc7 6a00 	vstr	s13, [r7]
 8006554:	ed87 7a01 	vstr	s14, [r7, #4]
 8006558:	edc7 7a02 	vstr	s15, [r7, #8]
 800655c:	e7d8      	b.n	8006510 <__kernel_rem_pio2f+0x3a8>
 800655e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006560:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 8006564:	440b      	add	r3, r1
 8006566:	4622      	mov	r2, r4
 8006568:	2a00      	cmp	r2, #0
 800656a:	da24      	bge.n	80065b6 <__kernel_rem_pio2f+0x44e>
 800656c:	b34e      	cbz	r6, 80065c2 <__kernel_rem_pio2f+0x45a>
 800656e:	eef1 7a47 	vneg.f32	s15, s14
 8006572:	edc7 7a00 	vstr	s15, [r7]
 8006576:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800657a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800657e:	aa31      	add	r2, sp, #196	@ 0xc4
 8006580:	2301      	movs	r3, #1
 8006582:	429c      	cmp	r4, r3
 8006584:	da20      	bge.n	80065c8 <__kernel_rem_pio2f+0x460>
 8006586:	b10e      	cbz	r6, 800658c <__kernel_rem_pio2f+0x424>
 8006588:	eef1 7a67 	vneg.f32	s15, s15
 800658c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006590:	e7be      	b.n	8006510 <__kernel_rem_pio2f+0x3a8>
 8006592:	ab30      	add	r3, sp, #192	@ 0xc0
 8006594:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8006460 <__kernel_rem_pio2f+0x2f8>
 8006598:	440b      	add	r3, r1
 800659a:	2c00      	cmp	r4, #0
 800659c:	da05      	bge.n	80065aa <__kernel_rem_pio2f+0x442>
 800659e:	b10e      	cbz	r6, 80065a4 <__kernel_rem_pio2f+0x43c>
 80065a0:	eef1 7a67 	vneg.f32	s15, s15
 80065a4:	edc7 7a00 	vstr	s15, [r7]
 80065a8:	e7b2      	b.n	8006510 <__kernel_rem_pio2f+0x3a8>
 80065aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80065ae:	3c01      	subs	r4, #1
 80065b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065b4:	e7f1      	b.n	800659a <__kernel_rem_pio2f+0x432>
 80065b6:	ed73 7a01 	vldmdb	r3!, {s15}
 80065ba:	3a01      	subs	r2, #1
 80065bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065c0:	e7d2      	b.n	8006568 <__kernel_rem_pio2f+0x400>
 80065c2:	eef0 7a47 	vmov.f32	s15, s14
 80065c6:	e7d4      	b.n	8006572 <__kernel_rem_pio2f+0x40a>
 80065c8:	ecb2 7a01 	vldmia	r2!, {s14}
 80065cc:	3301      	adds	r3, #1
 80065ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065d2:	e7d6      	b.n	8006582 <__kernel_rem_pio2f+0x41a>
 80065d4:	ed72 7a01 	vldmdb	r2!, {s15}
 80065d8:	edd2 6a01 	vldr	s13, [r2, #4]
 80065dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80065e0:	3801      	subs	r0, #1
 80065e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065e6:	ed82 7a00 	vstr	s14, [r2]
 80065ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80065f2:	e79c      	b.n	800652e <__kernel_rem_pio2f+0x3c6>
 80065f4:	ed73 7a01 	vldmdb	r3!, {s15}
 80065f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80065fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006600:	3a01      	subs	r2, #1
 8006602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006606:	ed83 7a00 	vstr	s14, [r3]
 800660a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006612:	e78f      	b.n	8006534 <__kernel_rem_pio2f+0x3cc>
 8006614:	ed33 7a01 	vldmdb	r3!, {s14}
 8006618:	3c01      	subs	r4, #1
 800661a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800661e:	e78f      	b.n	8006540 <__kernel_rem_pio2f+0x3d8>
 8006620:	eef1 6a66 	vneg.f32	s13, s13
 8006624:	eeb1 7a47 	vneg.f32	s14, s14
 8006628:	edc7 6a00 	vstr	s13, [r7]
 800662c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006630:	eef1 7a67 	vneg.f32	s15, s15
 8006634:	e790      	b.n	8006558 <__kernel_rem_pio2f+0x3f0>
 8006636:	bf00      	nop

08006638 <scalbnf>:
 8006638:	ee10 3a10 	vmov	r3, s0
 800663c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006640:	d02b      	beq.n	800669a <scalbnf+0x62>
 8006642:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006646:	d302      	bcc.n	800664e <scalbnf+0x16>
 8006648:	ee30 0a00 	vadd.f32	s0, s0, s0
 800664c:	4770      	bx	lr
 800664e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006652:	d123      	bne.n	800669c <scalbnf+0x64>
 8006654:	4b24      	ldr	r3, [pc, #144]	@ (80066e8 <scalbnf+0xb0>)
 8006656:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80066ec <scalbnf+0xb4>
 800665a:	4298      	cmp	r0, r3
 800665c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006660:	db17      	blt.n	8006692 <scalbnf+0x5a>
 8006662:	ee10 3a10 	vmov	r3, s0
 8006666:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800666a:	3a19      	subs	r2, #25
 800666c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006670:	4288      	cmp	r0, r1
 8006672:	dd15      	ble.n	80066a0 <scalbnf+0x68>
 8006674:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80066f0 <scalbnf+0xb8>
 8006678:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80066f4 <scalbnf+0xbc>
 800667c:	ee10 3a10 	vmov	r3, s0
 8006680:	eeb0 7a67 	vmov.f32	s14, s15
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfb8      	it	lt
 8006688:	eef0 7a66 	vmovlt.f32	s15, s13
 800668c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006690:	4770      	bx	lr
 8006692:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80066f8 <scalbnf+0xc0>
 8006696:	ee27 0a80 	vmul.f32	s0, s15, s0
 800669a:	4770      	bx	lr
 800669c:	0dd2      	lsrs	r2, r2, #23
 800669e:	e7e5      	b.n	800666c <scalbnf+0x34>
 80066a0:	4410      	add	r0, r2
 80066a2:	28fe      	cmp	r0, #254	@ 0xfe
 80066a4:	dce6      	bgt.n	8006674 <scalbnf+0x3c>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	dd06      	ble.n	80066b8 <scalbnf+0x80>
 80066aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80066ae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80066b2:	ee00 3a10 	vmov	s0, r3
 80066b6:	4770      	bx	lr
 80066b8:	f110 0f16 	cmn.w	r0, #22
 80066bc:	da09      	bge.n	80066d2 <scalbnf+0x9a>
 80066be:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80066f8 <scalbnf+0xc0>
 80066c2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80066fc <scalbnf+0xc4>
 80066c6:	ee10 3a10 	vmov	r3, s0
 80066ca:	eeb0 7a67 	vmov.f32	s14, s15
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	e7d9      	b.n	8006686 <scalbnf+0x4e>
 80066d2:	3019      	adds	r0, #25
 80066d4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80066d8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80066dc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006700 <scalbnf+0xc8>
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	e7d7      	b.n	8006696 <scalbnf+0x5e>
 80066e6:	bf00      	nop
 80066e8:	ffff3cb0 	.word	0xffff3cb0
 80066ec:	4c000000 	.word	0x4c000000
 80066f0:	7149f2ca 	.word	0x7149f2ca
 80066f4:	f149f2ca 	.word	0xf149f2ca
 80066f8:	0da24260 	.word	0x0da24260
 80066fc:	8da24260 	.word	0x8da24260
 8006700:	33000000 	.word	0x33000000

08006704 <floorf>:
 8006704:	ee10 3a10 	vmov	r3, s0
 8006708:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800670c:	3a7f      	subs	r2, #127	@ 0x7f
 800670e:	2a16      	cmp	r2, #22
 8006710:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006714:	dc2b      	bgt.n	800676e <floorf+0x6a>
 8006716:	2a00      	cmp	r2, #0
 8006718:	da12      	bge.n	8006740 <floorf+0x3c>
 800671a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006780 <floorf+0x7c>
 800671e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006722:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672a:	dd06      	ble.n	800673a <floorf+0x36>
 800672c:	2b00      	cmp	r3, #0
 800672e:	da24      	bge.n	800677a <floorf+0x76>
 8006730:	2900      	cmp	r1, #0
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <floorf+0x80>)
 8006734:	bf08      	it	eq
 8006736:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800673a:	ee00 3a10 	vmov	s0, r3
 800673e:	4770      	bx	lr
 8006740:	4911      	ldr	r1, [pc, #68]	@ (8006788 <floorf+0x84>)
 8006742:	4111      	asrs	r1, r2
 8006744:	420b      	tst	r3, r1
 8006746:	d0fa      	beq.n	800673e <floorf+0x3a>
 8006748:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006780 <floorf+0x7c>
 800674c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	ddef      	ble.n	800673a <floorf+0x36>
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfbe      	ittt	lt
 800675e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006762:	fa40 f202 	asrlt.w	r2, r0, r2
 8006766:	189b      	addlt	r3, r3, r2
 8006768:	ea23 0301 	bic.w	r3, r3, r1
 800676c:	e7e5      	b.n	800673a <floorf+0x36>
 800676e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006772:	d3e4      	bcc.n	800673e <floorf+0x3a>
 8006774:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006778:	4770      	bx	lr
 800677a:	2300      	movs	r3, #0
 800677c:	e7dd      	b.n	800673a <floorf+0x36>
 800677e:	bf00      	nop
 8006780:	7149f2ca 	.word	0x7149f2ca
 8006784:	bf800000 	.word	0xbf800000
 8006788:	007fffff 	.word	0x007fffff

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
