
Accoustic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005890  08005890  00006890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005898  08005898  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005898  08005898  00006898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080058a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014154  20000010  080058b0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014164  080058b0  00007164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126cb  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f5  00000000  00000000  0001970b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  0001d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185bd  00000000  00000000  0001dd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001343a  00000000  00000000  000362fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd47  00000000  00000000  00049738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e647f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  000e64c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000eaa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005858 	.word	0x08005858

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005858 	.word	0x08005858

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AskModem_Init>:
#include "ask_modem.h"
#include <math.h>
#include "uart_protocol.h"
#include <stdlib.h>

void AskModem_Init(AskModem* modem, uint16_t sample_per_symbol, float f0, float fs) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	460b      	mov	r3, r1
 800050e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000512:	edc7 0a00 	vstr	s1, [r7]
 8000516:	817b      	strh	r3, [r7, #10]
    modem->samples_per_symbol = sample_per_symbol;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	897a      	ldrh	r2, [r7, #10]
 800051c:	801a      	strh	r2, [r3, #0]
    modem->f0 = f0;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
    modem->fs = fs;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	609a      	str	r2, [r3, #8]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <AskModem_Modulate_DiracTransitions>:
    }
}

#define BURST_LEN 4
void AskModem_Modulate_DiracTransitions(UART_HandleTypeDef* huart,AskModem* modem,const uint8_t* payload,uint16_t byte_len,AskRingBuffer* outbuf,float amplitude)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	@ 0x40
 800053c:	af00      	add	r7, sp, #0
 800053e:	6178      	str	r0, [r7, #20]
 8000540:	6139      	str	r1, [r7, #16]
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	ed87 0a01 	vstr	s0, [r7, #4]
 8000548:	817b      	strh	r3, [r7, #10]
    uint32_t global_sample = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int16_t preamble_high = (int16_t)(amplitude * 1024.0f);
 800054e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000552:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8000748 <AskModem_Modulate_DiracTransitions+0x210>
 8000556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800055a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055e:	ee17 3a90 	vmov	r3, s15
 8000562:	857b      	strh	r3, [r7, #42]	@ 0x2a
    int16_t preamble_low = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	853b      	strh	r3, [r7, #40]	@ 0x28

    // === Préambule : 1 bit à 1 ===
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000568:	2300      	movs	r3, #0
 800056a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800056c:	e01b      	b.n	80005a6 <AskModem_Modulate_DiracTransitions+0x6e>
    	if (n < BURST_LEN || n >= modem->samples_per_symbol - BURST_LEN){
 800056e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000570:	2b03      	cmp	r3, #3
 8000572:	d905      	bls.n	8000580 <AskModem_Modulate_DiracTransitions+0x48>
 8000574:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	3b04      	subs	r3, #4
 800057c:	429a      	cmp	r2, r3
 800057e:	db06      	blt.n	800058e <AskModem_Modulate_DiracTransitions+0x56>
        	AskRingBuffer_Put(outbuf, preamble_high);
 8000580:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000584:	4619      	mov	r1, r3
 8000586:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000588:	f000 fad2 	bl	8000b30 <AskRingBuffer_Put>
 800058c:	e005      	b.n	800059a <AskModem_Modulate_DiracTransitions+0x62>
        }else{
        	AskRingBuffer_Put(outbuf, preamble_low);
 800058e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000592:	4619      	mov	r1, r3
 8000594:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000596:	f000 facb 	bl	8000b30 <AskRingBuffer_Put>
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 800059a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800059c:	3301      	adds	r3, #1
 800059e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80005a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005a2:	3301      	adds	r3, #1
 80005a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3de      	bcc.n	800056e <AskModem_Modulate_DiracTransitions+0x36>
        }
    }

    // === Préambule : 1 bit à 0 ===
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80005b4:	e00b      	b.n	80005ce <AskModem_Modulate_DiracTransitions+0x96>
        AskRingBuffer_Put(outbuf, preamble_low);
 80005b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80005ba:	4619      	mov	r1, r3
 80005bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80005be:	f000 fab7 	bl	8000b30 <AskRingBuffer_Put>
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80005c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005c4:	3301      	adds	r3, #1
 80005c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80005c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005ca:	3301      	adds	r3, #1
 80005cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3ee      	bcc.n	80005b6 <AskModem_Modulate_DiracTransitions+0x7e>
    }

    // === Données utiles ===
    for (uint16_t i = 0; i < byte_len; i++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80005dc:	e0aa      	b.n	8000734 <AskModem_Modulate_DiracTransitions+0x1fc>
        uint8_t byte = payload[i];
 80005de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int b = 7; b >= 0; b--) {
 80005ea:	2307      	movs	r3, #7
 80005ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80005ee:	e09a      	b.n	8000726 <AskModem_Modulate_DiracTransitions+0x1ee>
            uint8_t bit = (byte >> b) & 1;
 80005f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80005f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f6:	fa42 f303 	asr.w	r3, r2, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            // Chercher bit précédent et suivant (si disponibles)
            uint8_t prev_bit = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            uint8_t next_bit = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

            if (i > 0 || b < 7) {
 8000610:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000612:	2b00      	cmp	r3, #0
 8000614:	d102      	bne.n	800061c <AskModem_Modulate_DiracTransitions+0xe4>
 8000616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000618:	2b06      	cmp	r3, #6
 800061a:	dc1e      	bgt.n	800065a <AskModem_Modulate_DiracTransitions+0x122>
                uint8_t prev_byte = (b == 7) ? payload[i - 1] : byte;
 800061c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800061e:	2b07      	cmp	r3, #7
 8000620:	d105      	bne.n	800062e <AskModem_Modulate_DiracTransitions+0xf6>
 8000622:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000624:	3b01      	subs	r3, #1
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	e001      	b.n	8000632 <AskModem_Modulate_DiracTransitions+0xfa>
 800062e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                int prev_b = (b == 7) ? 0 : b + 1;
 8000636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000638:	2b07      	cmp	r3, #7
 800063a:	d002      	beq.n	8000642 <AskModem_Modulate_DiracTransitions+0x10a>
 800063c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800063e:	3301      	adds	r3, #1
 8000640:	e000      	b.n	8000644 <AskModem_Modulate_DiracTransitions+0x10c>
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
                prev_bit = (prev_byte >> prev_b) & 1;
 8000646:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	fa42 f303 	asr.w	r3, r2, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }

            if (i < byte_len - 1 || b > 0) {
 800065a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800065c:	897b      	ldrh	r3, [r7, #10]
 800065e:	3b01      	subs	r3, #1
 8000660:	429a      	cmp	r2, r3
 8000662:	db02      	blt.n	800066a <AskModem_Modulate_DiracTransitions+0x132>
 8000664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000666:	2b00      	cmp	r3, #0
 8000668:	dd1c      	ble.n	80006a4 <AskModem_Modulate_DiracTransitions+0x16c>
                uint8_t next_byte = (b == 0) ? payload[i + 1] : byte;
 800066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066c:	2b00      	cmp	r3, #0
 800066e:	d105      	bne.n	800067c <AskModem_Modulate_DiracTransitions+0x144>
 8000670:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000672:	3301      	adds	r3, #1
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	e001      	b.n	8000680 <AskModem_Modulate_DiracTransitions+0x148>
 800067c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000680:	77fb      	strb	r3, [r7, #31]
                int next_b = (b == 0) ? 7 : b - 1;
 8000682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <AskModem_Modulate_DiracTransitions+0x156>
 8000688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800068a:	3b01      	subs	r3, #1
 800068c:	e000      	b.n	8000690 <AskModem_Modulate_DiracTransitions+0x158>
 800068e:	2307      	movs	r3, #7
 8000690:	61bb      	str	r3, [r7, #24]
                next_bit = (next_byte >> next_b) & 1;
 8000692:	7ffa      	ldrb	r2, [r7, #31]
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa42 f303 	asr.w	r3, r2, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80006a8:	e035      	b.n	8000716 <AskModem_Modulate_DiracTransitions+0x1de>
                if (bit) {
 80006aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d025      	beq.n	80006fe <AskModem_Modulate_DiracTransitions+0x1c6>
                    // Début de bloc de 1
                    if (prev_bit == 0 && n < BURST_LEN) {
 80006b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d109      	bne.n	80006ce <AskModem_Modulate_DiracTransitions+0x196>
 80006ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d806      	bhi.n	80006ce <AskModem_Modulate_DiracTransitions+0x196>
                        AskRingBuffer_Put(outbuf, preamble_high);
 80006c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80006c4:	4619      	mov	r1, r3
 80006c6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80006c8:	f000 fa32 	bl	8000b30 <AskRingBuffer_Put>
 80006cc:	e01d      	b.n	800070a <AskModem_Modulate_DiracTransitions+0x1d2>
                    }
                    // Fin de bloc de 1
                    else if (next_bit == 0 && n >= modem->samples_per_symbol - BURST_LEN) {
 80006ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10c      	bne.n	80006f0 <AskModem_Modulate_DiracTransitions+0x1b8>
 80006d6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	3b04      	subs	r3, #4
 80006de:	429a      	cmp	r2, r3
 80006e0:	db06      	blt.n	80006f0 <AskModem_Modulate_DiracTransitions+0x1b8>
                        AskRingBuffer_Put(outbuf, preamble_high);
 80006e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80006e6:	4619      	mov	r1, r3
 80006e8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80006ea:	f000 fa21 	bl	8000b30 <AskRingBuffer_Put>
 80006ee:	e00c      	b.n	800070a <AskModem_Modulate_DiracTransitions+0x1d2>
                    }
                    else {
                        AskRingBuffer_Put(outbuf, preamble_low);
 80006f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80006f4:	4619      	mov	r1, r3
 80006f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80006f8:	f000 fa1a 	bl	8000b30 <AskRingBuffer_Put>
 80006fc:	e005      	b.n	800070a <AskModem_Modulate_DiracTransitions+0x1d2>
                    }
                } else {
                    AskRingBuffer_Put(outbuf, preamble_low);
 80006fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000702:	4619      	mov	r1, r3
 8000704:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000706:	f000 fa13 	bl	8000b30 <AskRingBuffer_Put>
            for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 800070a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800070c:	3301      	adds	r3, #1
 800070e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000712:	3301      	adds	r3, #1
 8000714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800071c:	429a      	cmp	r2, r3
 800071e:	d3c4      	bcc.n	80006aa <AskModem_Modulate_DiracTransitions+0x172>
        for (int b = 7; b >= 0; b--) {
 8000720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000722:	3b01      	subs	r3, #1
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
 8000726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000728:	2b00      	cmp	r3, #0
 800072a:	f6bf af61 	bge.w	80005f0 <AskModem_Modulate_DiracTransitions+0xb8>
    for (uint16_t i = 0; i < byte_len; i++) {
 800072e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000730:	3301      	adds	r3, #1
 8000732:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000734:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000736:	897b      	ldrh	r3, [r7, #10]
 8000738:	429a      	cmp	r2, r3
 800073a:	f4ff af50 	bcc.w	80005de <AskModem_Modulate_DiracTransitions+0xa6>
                }
            }
        }
    }
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3740      	adds	r7, #64	@ 0x40
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	44800000 	.word	0x44800000

0800074c <AskModem_Demodulate_ByEdges>:

#define OOK_THRESHOLD 650
#define MIN_RUN_LENGTH 100

void AskModem_Demodulate_ByEdges(UART_HandleTypeDef* huart, uint16_t* adc_buffer, uint16_t buffer_len, uint8_t* bits_out, uint16_t* bit_len)
{
 800074c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000750:	b0a3      	sub	sp, #140	@ 0x8c
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4613      	mov	r3, r2
 800075c:	80fb      	strh	r3, [r7, #6]
 800075e:	466b      	mov	r3, sp
 8000760:	461e      	mov	r6, r3
    *bit_len = 0;
 8000762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
    if (buffer_len < 3) return;
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	2b02      	cmp	r3, #2
 800076e:	f240 8184 	bls.w	8000a7a <AskModem_Demodulate_ByEdges+0x32e>

    // 1. Binariser le signal en 0 / 1 (valeurs ADC => logique binaire)
    uint16_t binary[buffer_len];
 8000772:	88f9      	ldrh	r1, [r7, #6]
 8000774:	460b      	mov	r3, r1
 8000776:	3b01      	subs	r3, #1
 8000778:	673b      	str	r3, [r7, #112]	@ 0x70
 800077a:	b28b      	uxth	r3, r1
 800077c:	2200      	movs	r2, #0
 800077e:	4698      	mov	r8, r3
 8000780:	4691      	mov	r9, r2
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800078e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000792:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000796:	b28b      	uxth	r3, r1
 8000798:	2200      	movs	r2, #0
 800079a:	461c      	mov	r4, r3
 800079c:	4615      	mov	r5, r2
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	012b      	lsls	r3, r5, #4
 80007a8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80007ac:	0122      	lsls	r2, r4, #4
 80007ae:	460b      	mov	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	3307      	adds	r3, #7
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	ebad 0d03 	sub.w	sp, sp, r3
 80007bc:	466b      	mov	r3, sp
 80007be:	3301      	adds	r3, #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint16_t k = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while (k < buffer_len) {
 80007cc:	e054      	b.n	8000878 <AskModem_Demodulate_ByEdges+0x12c>
        if (adc_buffer[k] > OOK_THRESHOLD) {
 80007ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	f240 228a 	movw	r2, #650	@ 0x28a
 80007de:	4293      	cmp	r3, r2
 80007e0:	d940      	bls.n	8000864 <AskModem_Demodulate_ByEdges+0x118>
            // Début d’un run de 1
            uint16_t start = k;
 80007e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80007e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            while (k < buffer_len && adc_buffer[k] > OOK_THRESHOLD) k++;
 80007ea:	e004      	b.n	80007f6 <AskModem_Demodulate_ByEdges+0xaa>
 80007ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80007f0:	3301      	adds	r3, #1
 80007f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80007f6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d209      	bcs.n	8000814 <AskModem_Demodulate_ByEdges+0xc8>
 8000800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	f240 228a 	movw	r2, #650	@ 0x28a
 8000810:	4293      	cmp	r3, r2
 8000812:	d8eb      	bhi.n	80007ec <AskModem_Demodulate_ByEdges+0xa0>
            uint16_t run_len = k - start;
 8000814:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8000818:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            uint16_t value = (run_len >= MIN_RUN_LENGTH) ? 1 : 0;
 8000822:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8000826:	2b63      	cmp	r3, #99	@ 0x63
 8000828:	bf8c      	ite	hi
 800082a:	2301      	movhi	r3, #1
 800082c:	2300      	movls	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            for (uint16_t j = start; j < k; j++) {
 8000834:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000838:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800083c:	e00b      	b.n	8000856 <AskModem_Demodulate_ByEdges+0x10a>
                binary[j] = value;
 800083e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8000842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000844:	f8b7 105e 	ldrh.w	r1, [r7, #94]	@ 0x5e
 8000848:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (uint16_t j = start; j < k; j++) {
 800084c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000850:	3301      	adds	r3, #1
 8000852:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000856:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 800085a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800085e:	429a      	cmp	r2, r3
 8000860:	d3ed      	bcc.n	800083e <AskModem_Demodulate_ByEdges+0xf2>
 8000862:	e009      	b.n	8000878 <AskModem_Demodulate_ByEdges+0x12c>
            }
        } else {
            binary[k++] = 0;
 8000864:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 800086e:	461a      	mov	r2, r3
 8000870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000872:	2100      	movs	r1, #0
 8000874:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    while (k < buffer_len) {
 8000878:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	429a      	cmp	r2, r3
 8000880:	d3a5      	bcc.n	80007ce <AskModem_Demodulate_ByEdges+0x82>
        }
    }

    // 2. Repérer les blocs de 1 consécutifs et enregistrer leur centre
    uint16_t peaks[ASK_MAX_BITS * 2] = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2248      	movs	r2, #72	@ 0x48
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f004 ffb8 	bl	8005800 <memset>
    uint16_t num_peaks = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

    uint16_t i = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    while (i < buffer_len) {
 800089c:	e041      	b.n	8000922 <AskModem_Demodulate_ByEdges+0x1d6>
        if (binary[i] == 1) {
 800089e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80008a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d135      	bne.n	8000918 <AskModem_Demodulate_ByEdges+0x1cc>
            uint16_t start = i;
 80008ac:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80008b0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            while (i < buffer_len && binary[i] == 1) i++;
 80008b4:	e004      	b.n	80008c0 <AskModem_Demodulate_ByEdges+0x174>
 80008b6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80008ba:	3301      	adds	r3, #1
 80008bc:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 80008c0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d206      	bcs.n	80008d8 <AskModem_Demodulate_ByEdges+0x18c>
 80008ca:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80008ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d0ee      	beq.n	80008b6 <AskModem_Demodulate_ByEdges+0x16a>
            uint16_t end = i - 1;
 80008d8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80008dc:	3b01      	subs	r3, #1
 80008de:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            uint16_t center = (start + end) / 2;
 80008e2:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 80008e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80008ea:	4413      	add	r3, r2
 80008ec:	0fda      	lsrs	r2, r3, #31
 80008ee:	4413      	add	r3, r2
 80008f0:	105b      	asrs	r3, r3, #1
 80008f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            if (num_peaks < (ASK_MAX_BITS * 2)) {
 80008f6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80008fa:	2b23      	cmp	r3, #35	@ 0x23
 80008fc:	d811      	bhi.n	8000922 <AskModem_Demodulate_ByEdges+0x1d6>
                peaks[num_peaks++] = center;
 80008fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	f8a7 2082 	strh.w	r2, [r7, #130]	@ 0x82
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3388      	adds	r3, #136	@ 0x88
 800090c:	443b      	add	r3, r7
 800090e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8000912:	f823 2c74 	strh.w	r2, [r3, #-116]
 8000916:	e004      	b.n	8000922 <AskModem_Demodulate_ByEdges+0x1d6>
            }
        } else {
            i++;
 8000918:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800091c:	3301      	adds	r3, #1
 800091e:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    while (i < buffer_len) {
 8000922:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3b8      	bcc.n	800089e <AskModem_Demodulate_ByEdges+0x152>
        }
    }

    if (num_peaks < 2) return;
 800092c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000930:	2b01      	cmp	r3, #1
 8000932:	f240 80a1 	bls.w	8000a78 <AskModem_Demodulate_ByEdges+0x32c>

    // 3. Estimer la durée d’un bit
    uint16_t bit_unit_len = peaks[1] - peaks[0];
 8000936:	8afa      	ldrh	r2, [r7, #22]
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    if (bit_unit_len == 0) bit_unit_len = 1;
 8000940:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <AskModem_Demodulate_ByEdges+0x202>
 8000948:	2301      	movs	r3, #1
 800094a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    // 4. Ajouter un pic fictif si impair
    if ((num_peaks % 2) != 0 && num_peaks < (ASK_MAX_BITS * 2)) {
 800094e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d01b      	beq.n	8000994 <AskModem_Demodulate_ByEdges+0x248>
 800095c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000960:	2b23      	cmp	r3, #35	@ 0x23
 8000962:	d817      	bhi.n	8000994 <AskModem_Demodulate_ByEdges+0x248>
        peaks[num_peaks] = peaks[num_peaks - 1] + bit_unit_len;
 8000964:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000968:	3b01      	subs	r3, #1
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	3388      	adds	r3, #136	@ 0x88
 800096e:	443b      	add	r3, r7
 8000970:	f833 1c74 	ldrh.w	r1, [r3, #-116]
 8000974:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000978:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800097c:	440a      	add	r2, r1
 800097e:	b292      	uxth	r2, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	3388      	adds	r3, #136	@ 0x88
 8000984:	443b      	add	r3, r7
 8000986:	f823 2c74 	strh.w	r2, [r3, #-116]
        num_peaks++;
 800098a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800098e:	3301      	adds	r3, #1
 8000990:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    }
    uint8_t current_bit = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    for (uint16_t j = 0; j + 1 < num_peaks && *bit_len < ASK_MAX_BITS; j++) {
 800099a:	2300      	movs	r3, #0
 800099c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80009a0:	e05c      	b.n	8000a5c <AskModem_Demodulate_ByEdges+0x310>
        uint16_t delta = peaks[j + 1] - peaks[j];
 80009a2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80009a6:	3301      	adds	r3, #1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	3388      	adds	r3, #136	@ 0x88
 80009ac:	443b      	add	r3, r7
 80009ae:	f833 2c74 	ldrh.w	r2, [r3, #-116]
 80009b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	3388      	adds	r3, #136	@ 0x88
 80009ba:	443b      	add	r3, r7
 80009bc:	f833 3c74 	ldrh.w	r3, [r3, #-116]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        uint16_t bit_count = (delta + bit_unit_len / 2) / bit_unit_len;
 80009c6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80009ca:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 80009ce:	0852      	lsrs	r2, r2, #1
 80009d0:	b292      	uxth	r2, r2
 80009d2:	441a      	add	r2, r3
 80009d4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80009d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80009dc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

        if (bit_count == 0) bit_count = 1;
 80009e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <AskModem_Demodulate_ByEdges+0x2a2>
 80009e8:	2301      	movs	r3, #1
 80009ea:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        if (bit_count > 8) bit_count = 8;  // or 10 max
 80009ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d902      	bls.n	80009fc <AskModem_Demodulate_ByEdges+0x2b0>
 80009f6:	2308      	movs	r3, #8
 80009f8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        for (uint16_t b = 0; b < bit_count && *bit_len < ASK_MAX_BITS; b++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000a02:	e012      	b.n	8000a2a <AskModem_Demodulate_ByEdges+0x2de>
            bits_out[(*bit_len)++] = current_bit;
 8000a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	b291      	uxth	r1, r2
 8000a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000a12:	8011      	strh	r1, [r2, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 8000a1e:	701a      	strb	r2, [r3, #0]
        for (uint16_t b = 0; b < bit_count && *bit_len < ASK_MAX_BITS; b++) {
 8000a20:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000a2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8000a2e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d204      	bcs.n	8000a40 <AskModem_Demodulate_ByEdges+0x2f4>
 8000a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	2b11      	cmp	r3, #17
 8000a3e:	d9e1      	bls.n	8000a04 <AskModem_Demodulate_ByEdges+0x2b8>
        }

        current_bit = !current_bit;
 8000a40:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    for (uint16_t j = 0; j + 1 < num_peaks && *bit_len < ASK_MAX_BITS; j++) {
 8000a52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8000a56:	3301      	adds	r3, #1
 8000a58:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8000a5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000a66:	429a      	cmp	r2, r3
 8000a68:	da04      	bge.n	8000a74 <AskModem_Demodulate_ByEdges+0x328>
 8000a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b11      	cmp	r3, #17
 8000a72:	d996      	bls.n	80009a2 <AskModem_Demodulate_ByEdges+0x256>
 8000a74:	46b5      	mov	sp, r6
 8000a76:	e001      	b.n	8000a7c <AskModem_Demodulate_ByEdges+0x330>
    if (num_peaks < 2) return;
 8000a78:	bf00      	nop
    if (buffer_len < 3) return;
 8000a7a:	46b5      	mov	sp, r6
    }
}
 8000a7c:	378c      	adds	r7, #140	@ 0x8c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a84 <AskRingBuffer_Init>:
    }
}*/



void AskRingBuffer_Init(AskRingBuffer* rb) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    rb->head = rb->tail = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000a94:	f8c2 3c24 	str.w	r3, [r2, #3108]	@ 0xc24
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000a9e:	f8c2 3c20 	str.w	r3, [r2, #3104]	@ 0xc20
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <AskRingBuffer_IsFull>:

uint8_t AskRingBuffer_IsFull(const AskRingBuffer* rb) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    return ((rb->head + 1) % ASK_RINGBUF_SIZE) == rb->tail;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000abe:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	@ 0xc20
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <AskRingBuffer_IsFull+0x48>)
 8000ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aca:	0adb      	lsrs	r3, r3, #11
 8000acc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000ad0:	fb01 f303 	mul.w	r3, r1, r3
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000adc:	f8d2 2c24 	ldr.w	r2, [r2, #3108]	@ 0xc24
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	bf0c      	ite	eq
 8000ae4:	2301      	moveq	r3, #1
 8000ae6:	2300      	movne	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	91a2b3c5 	.word	0x91a2b3c5

08000afc <AskRingBuffer_IsEmpty>:

uint8_t AskRingBuffer_IsEmpty(const AskRingBuffer* rb) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    return rb->head == rb->tail;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0a:	f8d3 2c20 	ldr.w	r2, [r3, #3104]	@ 0xc20
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b14:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	@ 0xc24
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <AskRingBuffer_Put>:

void AskRingBuffer_Put(AskRingBuffer* rb, int16_t value) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    if (!AskRingBuffer_IsFull(rb)) {
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffb7 	bl	8000ab0 <AskRingBuffer_IsFull>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11c      	bne.n	8000b82 <AskRingBuffer_Put+0x52>
        rb->buf[rb->head] = value;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b4e:	f8d3 2c20 	ldr.w	r2, [r3, #3104]	@ 0xc20
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8879      	ldrh	r1, [r7, #2]
 8000b56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        rb->head = (rb->head + 1) % ASK_RINGBUF_SIZE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b60:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	@ 0xc20
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <AskRingBuffer_Put+0x5c>)
 8000b68:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6c:	0adb      	lsrs	r3, r3, #11
 8000b6e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000b72:	fb01 f303 	mul.w	r3, r1, r3
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000b7e:	f8c2 3c20 	str.w	r3, [r2, #3104]	@ 0xc20
    }
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	91a2b3c5 	.word	0x91a2b3c5

08000b90 <AskRingBuffer_Get>:

int16_t AskRingBuffer_Get(AskRingBuffer* rb) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    int16_t val = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	81fb      	strh	r3, [r7, #14]
    if (!AskRingBuffer_IsEmpty(rb)) {
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ffad 	bl	8000afc <AskRingBuffer_IsEmpty>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d11c      	bne.n	8000be2 <AskRingBuffer_Get+0x52>
        val = rb->buf[rb->tail];
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bae:	f8d3 2c24 	ldr.w	r2, [r3, #3108]	@ 0xc24
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bb8:	81fb      	strh	r3, [r7, #14]
        rb->tail = (rb->tail + 1) % ASK_RINGBUF_SIZE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	@ 0xc24
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <AskRingBuffer_Get+0x60>)
 8000bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bcc:	0adb      	lsrs	r3, r3, #11
 8000bce:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000bde:	f8c2 3c24 	str.w	r3, [r2, #3108]	@ 0xc24
    }
    return val;
 8000be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	91a2b3c5 	.word	0x91a2b3c5

08000bf4 <MCP4922_Select>:
static IQTransmitter iq_tx;

#define MCP4922_CS_GPIO GPIOA
#define MCP4922_CS_PIN GPIO_PIN_4

static void MCP4922_Select(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <MCP4922_Select+0x14>)
 8000bfe:	f002 fceb 	bl	80035d8 <HAL_GPIO_WritePin>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020000 	.word	0x40020000

08000c0c <MCP4922_Unselect>:

static void MCP4922_Unselect(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <MCP4922_Unselect+0x14>)
 8000c16:	f002 fcdf 	bl	80035d8 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000

08000c24 <MCP4922_Pack>:

static uint16_t MCP4922_Pack(uint8_t channel, uint16_t val12) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]
    val12 &= 0x0FFF; // 12 bits
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c3a:	80bb      	strh	r3, [r7, #4]
    uint16_t ctrl = (channel ? 0xB000 : 0x3000);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <MCP4922_Pack+0x24>
 8000c42:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000c46:	e001      	b.n	8000c4c <MCP4922_Pack+0x28>
 8000c48:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c4c:	81fb      	strh	r3, [r7, #14]
    return ctrl | val12;
 8000c4e:	89fa      	ldrh	r2, [r7, #14]
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b29b      	uxth	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <IQTransmitter_InitFromBuffer>:

void IQTransmitter_InitFromBuffer(const int16_t* signal, uint16_t length) {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
    iq_tx.buffer = signal;
 8000c70:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <IQTransmitter_InitFromBuffer+0x30>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
    iq_tx.length = length;
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <IQTransmitter_InitFromBuffer+0x30>)
 8000c7a:	6053      	str	r3, [r2, #4]
    iq_tx.index = 0;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <IQTransmitter_InitFromBuffer+0x30>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    iq_tx.active = 0;
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <IQTransmitter_InitFromBuffer+0x30>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	731a      	strb	r2, [r3, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	2000002c 	.word	0x2000002c

08000c98 <IQTransmitter_Start>:

void IQTransmitter_Start(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    iq_tx.active = 1;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <IQTransmitter_Start+0x1c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	731a      	strb	r2, [r3, #12]
    iq_tx.index = 0;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <IQTransmitter_Start+0x1c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    HAL_TIM_Base_Start_IT(&htim2);
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <IQTransmitter_Start+0x20>)
 8000caa:	f003 fcf5 	bl	8004698 <HAL_TIM_Base_Start_IT>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000002c 	.word	0x2000002c
 8000cb8:	2000019c 	.word	0x2000019c

08000cbc <IQTransmitter_Stop>:

void IQTransmitter_Stop(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
    iq_tx.active = 0;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <IQTransmitter_Stop+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	731a      	strb	r2, [r3, #12]
    HAL_TIM_Base_Stop_IT(&htim2);
 8000cc8:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <IQTransmitter_Stop+0x50>)
 8000cca:	f003 fd47 	bl	800475c <HAL_TIM_Base_Stop_IT>

    uint16_t spi_word = MCP4922_Pack(0, 0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ffa7 	bl	8000c24 <MCP4922_Pack>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
    uint8_t spi_buf[2] = { (spi_word >> 8) & 0xFF, spi_word & 0xFF };
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	713b      	strb	r3, [r7, #4]
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	717b      	strb	r3, [r7, #5]

    MCP4922_Select();
 8000cea:	f7ff ff83 	bl	8000bf4 <MCP4922_Select>
    HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 8000cee:	1d39      	adds	r1, r7, #4
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <IQTransmitter_Stop+0x54>)
 8000cf8:	f003 f9db 	bl	80040b2 <HAL_SPI_Transmit>
    MCP4922_Unselect();
 8000cfc:	f7ff ff86 	bl	8000c0c <MCP4922_Unselect>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000002c 	.word	0x2000002c
 8000d0c:	2000019c 	.word	0x2000019c
 8000d10:	200000e4 	.word	0x200000e4

08000d14 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && iq_tx.active) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d24:	d12d      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d028      	beq.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x6e>
        if (iq_tx.index < iq_tx.length) {
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d220      	bcs.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x6a>
            int16_t sample = iq_tx.buffer[iq_tx.index++];
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	1c59      	adds	r1, r3, #1
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d48:	6081      	str	r1, [r0, #8]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	81fb      	strh	r3, [r7, #14]
            uint16_t val = (uint16_t)sample;
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	81bb      	strh	r3, [r7, #12]
            uint16_t spi_word = MCP4922_Pack(0, val);
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff62 	bl	8000c24 <MCP4922_Pack>
 8000d60:	4603      	mov	r3, r0
 8000d62:	817b      	strh	r3, [r7, #10]

            MCP4922_Select();
 8000d64:	f7ff ff46 	bl	8000bf4 <MCP4922_Select>
            HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_word, sizeof(spi_word), HAL_MAX_DELAY);
 8000d68:	f107 010a 	add.w	r1, r7, #10
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2202      	movs	r2, #2
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d74:	f003 f99d 	bl	80040b2 <HAL_SPI_Transmit>
            MCP4922_Unselect();
 8000d78:	f7ff ff48 	bl	8000c0c <MCP4922_Unselect>
        } else {
            IQTransmitter_Stop();
        }
    }
}
 8000d7c:	e001      	b.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x6e>
            IQTransmitter_Stop();
 8000d7e:	f7ff ff9d 	bl	8000cbc <IQTransmitter_Stop>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000002c 	.word	0x2000002c
 8000d90:	200000e4 	.word	0x200000e4

08000d94 <HAL_ADC_ConvCpltCallback>:
#define IS_RECEIVER

#ifdef IS_RECEIVER

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	@ 0x38
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
    if (ask_synch_triggered)
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <HAL_ADC_ConvCpltCallback+0x140>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8091 	beq.w	8000eca <HAL_ADC_ConvCpltCallback+0x136>
    {
        HAL_TIM_Base_Stop(&htim3);
 8000da8:	484b      	ldr	r0, [pc, #300]	@ (8000ed8 <HAL_ADC_ConvCpltCallback+0x144>)
 8000daa:	f003 fc4d 	bl	8004648 <HAL_TIM_Base_Stop>
        HAL_ADC_Stop_DMA(&hadc1);
 8000dae:	484b      	ldr	r0, [pc, #300]	@ (8000edc <HAL_ADC_ConvCpltCallback+0x148>)
 8000db0:	f001 fa34 	bl	800221c <HAL_ADC_Stop_DMA>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dba:	4849      	ldr	r0, [pc, #292]	@ (8000ee0 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000dbc:	f002 fc0c 	bl	80035d8 <HAL_GPIO_WritePin>
        //HAL_Delay(1);

        adc_ready = 1;
 8000dc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <HAL_ADC_ConvCpltCallback+0x150>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]

        // On traite le buffer directement ici
        AskRingBuffer_Init(&rx_ringbuf);
 8000dc6:	4848      	ldr	r0, [pc, #288]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x154>)
 8000dc8:	f7ff fe5c 	bl	8000a84 <AskRingBuffer_Init>
        for (uint16_t i = 0; i < ADC_BUF_LEN; i ++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000dd0:	e00b      	b.n	8000dea <HAL_ADC_ConvCpltCallback+0x56>
        {
            AskRingBuffer_Put(&rx_ringbuf, adc_buffer[i]);
 8000dd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dd4:	4a45      	ldr	r2, [pc, #276]	@ (8000eec <HAL_ADC_ConvCpltCallback+0x158>)
 8000dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4842      	ldr	r0, [pc, #264]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x154>)
 8000de0:	f7ff fea6 	bl	8000b30 <AskRingBuffer_Put>
        for (uint16_t i = 0; i < ADC_BUF_LEN; i ++)
 8000de4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000de6:	3301      	adds	r3, #1
 8000de8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000dea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dec:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d9ee      	bls.n	8000dd2 <HAL_ADC_ConvCpltCallback+0x3e>
        }

        uint8_t bits_out[ASK_MAX_BITS];
        uint16_t len_out = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	817b      	strh	r3, [r7, #10]

        ask_modem.samples_per_symbol = ASK_SAMPLES_PER_SYMBOL;
 8000df8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000dfa:	22c8      	movs	r2, #200	@ 0xc8
 8000dfc:	801a      	strh	r2, [r3, #0]

        //AskModem_Demodulate_OOK(&huart2,adc_buffer, ADC_BUF_LEN, bits_out, &len_out);
        //AskModem_Demodulate_OOK(&huart2, &ask_modem, &rx_ringbuf, bits_out, &len_out);
        AskModem_Demodulate_ByEdges(&huart2,adc_buffer, ADC_BUF_LEN, bits_out, &len_out);
 8000dfe:	f107 020c 	add.w	r2, r7, #12
 8000e02:	f107 030a 	add.w	r3, r7, #10
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000e0e:	4937      	ldr	r1, [pc, #220]	@ (8000eec <HAL_ADC_ConvCpltCallback+0x158>)
 8000e10:	4838      	ldr	r0, [pc, #224]	@ (8000ef4 <HAL_ADC_ConvCpltCallback+0x160>)
 8000e12:	f7ff fc9b 	bl	800074c <AskModem_Demodulate_ByEdges>

        uint8_t decoded_chars[ASK_MAX_BITS / 8] = {0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	813b      	strh	r3, [r7, #8]
        uint16_t num_chars = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        const uint16_t payload_start = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	84fb      	strh	r3, [r7, #38]	@ 0x26
        uint16_t usable_bits = len_out - payload_start;
 8000e22:	897a      	ldrh	r2, [r7, #10]
 8000e24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint16_t usable_bytes = usable_bits / 8;
 8000e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	847b      	strh	r3, [r7, #34]	@ 0x22

        for (uint16_t i = 0; i < usable_bytes && num_chars < (ASK_MAX_BITS / 8); i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000e34:	e034      	b.n	8000ea0 <HAL_ADC_ConvCpltCallback+0x10c>
        	uint8_t byte = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        	for (uint8_t b = 0; b < 8; b++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e42:	e01d      	b.n	8000e80 <HAL_ADC_ConvCpltCallback+0xec>
        		uint16_t idx = payload_start + i * 8 + b;
 8000e44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	843b      	strh	r3, [r7, #32]
        		byte = (byte << 1) | bits_out[idx];
 8000e5a:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	8c3b      	ldrh	r3, [r7, #32]
 8000e64:	3330      	adds	r3, #48	@ 0x30
 8000e66:	443b      	add	r3, r7
 8000e68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        	for (uint8_t b = 0; b < 8; b++) {
 8000e76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d9dd      	bls.n	8000e44 <HAL_ADC_ConvCpltCallback+0xb0>
        	}
        	decoded_chars[num_chars++] = byte;
 8000e88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	85ba      	strh	r2, [r7, #44]	@ 0x2c
 8000e8e:	3330      	adds	r3, #48	@ 0x30
 8000e90:	443b      	add	r3, r7
 8000e92:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000e96:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint16_t i = 0; i < usable_bytes && num_chars < (ASK_MAX_BITS / 8); i++) {
 8000e9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000ea0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000ea2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d202      	bcs.n	8000eae <HAL_ADC_ConvCpltCallback+0x11a>
 8000ea8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d9c3      	bls.n	8000e36 <HAL_ADC_ConvCpltCallback+0xa2>
        }

        UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, num_chars, decoded_chars);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000eb4:	f249 0110 	movw	r1, #36880	@ 0x9010
 8000eb8:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <HAL_ADC_ConvCpltCallback+0x160>)
 8000eba:	f000 fef3 	bl	8001ca4 <UartProtocol_SendFrame>
        adc_ready = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_ADC_ConvCpltCallback+0x150>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
        ask_synch_triggered = 0;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
       }
}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	@ 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20014154 	.word	0x20014154
 8000ed8:	200001e4 	.word	0x200001e4
 8000edc:	2000003c 	.word	0x2000003c
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	2001415c 	.word	0x2001415c
 8000ee8:	2001252c 	.word	0x2001252c
 8000eec:	20000274 	.word	0x20000274
 8000ef0:	200108f8 	.word	0x200108f8
 8000ef4:	2000022c 	.word	0x2000022c

08000ef8 <Check_EXTI_Reactivation>:

void Check_EXTI_Reactivation(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if (exti_blocked && HAL_GetTick() >= exti_reenable_time)
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <Check_EXTI_Reactivation+0x40>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d016      	beq.n	8000f34 <Check_EXTI_Reactivation+0x3c>
 8000f06:	f001 f821 	bl	8001f4c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <Check_EXTI_Reactivation+0x44>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d30f      	bcc.n	8000f34 <Check_EXTI_Reactivation+0x3c>
	{
	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000f14:	2101      	movs	r1, #1
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <Check_EXTI_Reactivation+0x48>)
 8000f18:	f002 fb46 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d108      	bne.n	8000f34 <Check_EXTI_Reactivation+0x3c>
	    {
	        exti_blocked = 0;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <Check_EXTI_Reactivation+0x40>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	        EXTI->PR = EXTI_PR_PR0;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <Check_EXTI_Reactivation+0x4c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
	        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f2e:	2006      	movs	r0, #6
 8000f30:	f001 fdad 	bl	8002a8e <HAL_NVIC_EnableIRQ>
	    }
	}
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20014155 	.word	0x20014155
 8000f3c:	20014158 	.word	0x20014158
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40013c00 	.word	0x40013c00

08000f48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0 && !ask_synch_triggered && exti_blocked == 0)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d124      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x5a>
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x64>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d11f      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x5a>
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d11a      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x5a>
    {
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
        //HAL_Delay(1);
        exti_blocked = 1;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
        exti_reenable_time = HAL_GetTick() + 100;
 8000f72:	f000 ffeb 	bl	8001f4c <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	3364      	adds	r3, #100	@ 0x64
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f7c:	6013      	str	r3, [r2, #0]

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear flag EXTI
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	6153      	str	r3, [r2, #20]
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    // désactive EXTI0 pour éviter double front
 8000f84:	2006      	movs	r0, #6
 8000f86:	f001 fd90 	bl	8002aaa <HAL_NVIC_DisableIRQ>

        ask_synch_triggered = 1;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x64>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]

        // Lance ADC + DMA pour N échantillons
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN);
 8000f90:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000f94:	4909      	ldr	r1, [pc, #36]	@ (8000fbc <HAL_GPIO_EXTI_Callback+0x74>)
 8000f96:	480a      	ldr	r0, [pc, #40]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f98:	f001 f84c 	bl	8002034 <HAL_ADC_Start_DMA>

        // Lance le timer qui cadencera les conversions ADC
        HAL_TIM_Base_Start(&htim3);
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f9e:	f003 faf9 	bl	8004594 <HAL_TIM_Base_Start>
    }
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20014154 	.word	0x20014154
 8000fb0:	20014155 	.word	0x20014155
 8000fb4:	20014158 	.word	0x20014158
 8000fb8:	40013c00 	.word	0x40013c00
 8000fbc:	20000274 	.word	0x20000274
 8000fc0:	2000003c 	.word	0x2000003c
 8000fc4:	200001e4 	.word	0x200001e4

08000fc8 <OnFrameReceived>:
#endif

void OnFrameReceived(UartProtocol* proto, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	817b      	strh	r3, [r7, #10]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	813b      	strh	r3, [r7, #8]
    if (cmd == CMD_QPSK_MOD_DEMOD) {
 8000fda:	897b      	ldrh	r3, [r7, #10]
 8000fdc:	f241 0210 	movw	r2, #4112	@ 0x1010
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d142      	bne.n	800106a <OnFrameReceived+0xa2>
    	HAL_TIM_Base_Start(&htim3);
 8000fe4:	4823      	ldr	r0, [pc, #140]	@ (8001074 <OnFrameReceived+0xac>)
 8000fe6:	f003 fad5 	bl	8004594 <HAL_TIM_Base_Start>
        AskRingBuffer_Init(&tx_ringbuf);
 8000fea:	4823      	ldr	r0, [pc, #140]	@ (8001078 <OnFrameReceived+0xb0>)
 8000fec:	f7ff fd4a 	bl	8000a84 <AskRingBuffer_Init>
        AskRingBuffer_Init(&rx_ringbuf);
 8000ff0:	4822      	ldr	r0, [pc, #136]	@ (800107c <OnFrameReceived+0xb4>)
 8000ff2:	f7ff fd47 	bl	8000a84 <AskRingBuffer_Init>
        AskModem_Init(&ask_modem, samples_per_symbol, 40000.0f, SAMPLE_RATE_HZ);
 8000ff6:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <OnFrameReceived+0xb8>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001084 <OnFrameReceived+0xbc>
 8000ffe:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001088 <OnFrameReceived+0xc0>
 8001002:	4619      	mov	r1, r3
 8001004:	4821      	ldr	r0, [pc, #132]	@ (800108c <OnFrameReceived+0xc4>)
 8001006:	f7ff fa7d 	bl	8000504 <AskModem_Init>
        //AskModem_Modulate(&huart2, &ask_modem, payload, len, &tx_ringbuf, 3.3f);
        //AskModem_Modulate_OOK(&huart2, &ask_modem, payload, len, &tx_ringbuf, 3.3f);
        AskModem_Modulate_DiracTransitions(&huart2, &ask_modem, payload, len, &tx_ringbuf, 3.3f);
 800100a:	893b      	ldrh	r3, [r7, #8]
 800100c:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <OnFrameReceived+0xb0>)
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001090 <OnFrameReceived+0xc8>
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	491d      	ldr	r1, [pc, #116]	@ (800108c <OnFrameReceived+0xc4>)
 8001018:	481e      	ldr	r0, [pc, #120]	@ (8001094 <OnFrameReceived+0xcc>)
 800101a:	f7ff fa8d 	bl	8000538 <AskModem_Modulate_DiracTransitions>

        tx_signal_len = 0;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <OnFrameReceived+0xd0>)
 8001020:	2200      	movs	r2, #0
 8001022:	801a      	strh	r2, [r3, #0]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 8001024:	e00e      	b.n	8001044 <OnFrameReceived+0x7c>
            tx_signal[tx_signal_len++] = AskRingBuffer_Get(&tx_ringbuf);
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <OnFrameReceived+0xd0>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	b291      	uxth	r1, r2
 800102e:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <OnFrameReceived+0xd0>)
 8001030:	8011      	strh	r1, [r2, #0]
 8001032:	461c      	mov	r4, r3
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <OnFrameReceived+0xb0>)
 8001036:	f7ff fdab 	bl	8000b90 <AskRingBuffer_Get>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <OnFrameReceived+0xd4>)
 8001040:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <OnFrameReceived+0xb0>)
 8001046:	f7ff fd59 	bl	8000afc <AskRingBuffer_IsEmpty>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <OnFrameReceived+0x92>
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <OnFrameReceived+0xd0>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001058:	d3e5      	bcc.n	8001026 <OnFrameReceived+0x5e>
        }

        IQTransmitter_InitFromBuffer(tx_signal, tx_signal_len);
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <OnFrameReceived+0xd0>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <OnFrameReceived+0xd4>)
 8001062:	f7ff fdff 	bl	8000c64 <IQTransmitter_InitFromBuffer>
        //Afficher le signal sur l'interface pour debug
        /*for (int i = 0; i < tx_signal_len; i++) {
            SendIQFrame(&huart2, tx_signal[i], i);
        }*/
        IQTransmitter_Start();
 8001066:	f7ff fe17 	bl	8000c98 <IQTransmitter_Start>
    }
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	200001e4 	.word	0x200001e4
 8001078:	20010904 	.word	0x20010904
 800107c:	2001252c 	.word	0x2001252c
 8001080:	20000000 	.word	0x20000000
 8001084:	47c35000 	.word	0x47c35000
 8001088:	471c4000 	.word	0x471c4000
 800108c:	200108f8 	.word	0x200108f8
 8001090:	40533333 	.word	0x40533333
 8001094:	2000022c 	.word	0x2000022c
 8001098:	200108f4 	.word	0x200108f4
 800109c:	2000ecd4 	.word	0x2000ecd4

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0c6      	sub	sp, #280	@ 0x118
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 feeb 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f82f 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 fa15 	bl	80014dc <MX_GPIO_Init>
  MX_DMA_Init();
 80010b2:	f000 f9eb 	bl	800148c <MX_DMA_Init>
  MX_TIM2_Init();
 80010b6:	f000 f91d 	bl	80012f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 f9bd 	bl	8001438 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80010be:	f000 f8e1 	bl	8001284 <MX_SPI1_Init>
  MX_ADC1_Init();
 80010c2:	f000 f88d 	bl	80011e0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80010c6:	f000 f961 	bl	800138c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UartProtocol_Init(&proto, OnFrameReceived);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <main+0x64>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fcfe 	bl	8001ad2 <UartProtocol_Init>
  /* USER CODE BEGIN WHILE */
  uint8_t c;

  while (1)
  {
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 80010d6:	1df9      	adds	r1, r7, #7
 80010d8:	230a      	movs	r3, #10
 80010da:	2201      	movs	r2, #1
 80010dc:	480a      	ldr	r0, [pc, #40]	@ (8001108 <main+0x68>)
 80010de:	f003 ffc8 	bl	8005072 <HAL_UART_Receive>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10a      	bne.n	80010fe <main+0x5e>
          UartProtocol_ParseByte(&proto, c);
 80010e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fd0b 	bl	8001b14 <UartProtocol_ParseByte>
      }

      Check_EXTI_Reactivation();
 80010fe:	f7ff fefb 	bl	8000ef8 <Check_EXTI_Reactivation>
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8001102:	e7e8      	b.n	80010d6 <main+0x36>
 8001104:	08000fc9 	.word	0x08000fc9
 8001108:	2000022c 	.word	0x2000022c

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	@ 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f004 fb70 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b28      	ldr	r3, [pc, #160]	@ (80011d8 <SystemClock_Config+0xcc>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <SystemClock_Config+0xcc>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001140:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <SystemClock_Config+0xcc>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <SystemClock_Config+0xd0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <SystemClock_Config+0xd0>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <SystemClock_Config+0xd0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001180:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001184:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001186:	2304      	movs	r3, #4
 8001188:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800118a:	2304      	movs	r3, #4
 800118c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fa6c 	bl	8003670 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800119e:	f000 fa3d 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fcce 	bl	8003b60 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ca:	f000 fa27 	bl	800161c <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3750      	adds	r7, #80	@ 0x50
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <MX_ADC1_Init+0x9c>)
 80011f4:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <MX_ADC1_Init+0xa0>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_ADC1_Init+0x9c>)
 80011fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_ADC1_Init+0x9c>)
 800120e:	2200      	movs	r2, #0
 8001210:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_ADC1_Init+0x9c>)
 800121c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_ADC1_Init+0x9c>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001232:	2201      	movs	r2, #1
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001240:	2201      	movs	r2, #1
 8001242:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001246:	f000 feb1 	bl	8001fac <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001250:	f000 f9e4 	bl	800161c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_ADC1_Init+0x9c>)
 8001266:	f001 f847 	bl	80022f8 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001270:	f000 f9d4 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000003c 	.word	0x2000003c
 8001280:	40012000 	.word	0x40012000

08001284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_SPI1_Init+0x68>)
 800128a:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <MX_SPI1_Init+0x6c>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <MX_SPI1_Init+0x68>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_SPI1_Init+0x68>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_SPI1_Init+0x68>)
 800129e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012d2:	220a      	movs	r2, #10
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_SPI1_Init+0x68>)
 80012d8:	f002 fe62 	bl	8003fa0 <HAL_SPI_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012e2:	f000 f99b 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000e4 	.word	0x200000e4
 80012f0:	40013000 	.word	0x40013000

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001312:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_TIM2_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (84000000 / SAMPLE_RATE_HZ) - 1;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001326:	f240 3247 	movw	r2, #839	@ 0x347
 800132a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_TIM2_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	@ (8001388 <MX_TIM2_Init+0x94>)
 800133a:	f003 f8db 	bl	80044f4 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001344:	f000 f96a 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001356:	f003 fb20 	bl	800499a <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 f95c 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001364:	2320      	movs	r3, #32
 8001366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_TIM2_Init+0x94>)
 8001372:	f003 fd21 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 f94e 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000019c 	.word	0x2000019c

0800138c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013aa:	4a20      	ldr	r2, [pc, #128]	@ (800142c <MX_TIM3_Init+0xa0>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (SystemCoreClock / 500000) - 1;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_TIM3_Init+0xa4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <MX_TIM3_Init+0xa8>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c5b      	lsrs	r3, r3, #17
 80013c6:	3b01      	subs	r3, #1
 80013c8:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013ca:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013da:	f003 f88b 	bl	80044f4 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80013e4:	f000 f91a 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_TIM3_Init+0x9c>)
 80013f6:	f003 fad0 	bl	800499a <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001400:	f000 f90c 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001404:	2320      	movs	r3, #32
 8001406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_TIM3_Init+0x9c>)
 8001412:	f003 fcd1 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800141c:	f000 f8fe 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001e4 	.word	0x200001e4
 800142c:	40000400 	.word	0x40000400
 8001430:	20000004 	.word	0x20000004
 8001434:	431bde83 	.word	0x431bde83

08001438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <MX_USART2_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001470:	f003 fd24 	bl	8004ebc <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f8cf 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000022c 	.word	0x2000022c
 8001488:	40004400 	.word	0x40004400

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_DMA_Init+0x4c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <MX_DMA_Init+0x4c>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <MX_DMA_Init+0x4c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2038      	movs	r0, #56	@ 0x38
 80014b4:	f001 facf 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014b8:	2038      	movs	r0, #56	@ 0x38
 80014ba:	f001 fae8 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	203a      	movs	r0, #58	@ 0x3a
 80014c4:	f001 fac7 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014c8:	203a      	movs	r0, #58	@ 0x3a
 80014ca:	f001 fae0 	bl	8002a8e <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b46      	ldr	r3, [pc, #280]	@ (8001610 <MX_GPIO_Init+0x134>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a45      	ldr	r2, [pc, #276]	@ (8001610 <MX_GPIO_Init+0x134>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800150e:	2320      	movs	r3, #32
 8001510:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	483b      	ldr	r0, [pc, #236]	@ (8001614 <MX_GPIO_Init+0x138>)
 8001526:	f001 febb 	bl	80032a0 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800152a:	2340      	movs	r3, #64	@ 0x40
 800152c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4837      	ldr	r0, [pc, #220]	@ (8001614 <MX_GPIO_Init+0x138>)
 8001536:	f001 feb3 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a33      	ldr	r2, [pc, #204]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <MX_GPIO_Init+0x134>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <MX_GPIO_Init+0x134>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a2c      	ldr	r2, [pc, #176]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <MX_GPIO_Init+0x134>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <MX_GPIO_Init+0x134>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2110      	movs	r1, #16
 8001592:	4820      	ldr	r0, [pc, #128]	@ (8001614 <MX_GPIO_Init+0x138>)
 8001594:	f002 f820 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800159e:	481e      	ldr	r0, [pc, #120]	@ (8001618 <MX_GPIO_Init+0x13c>)
 80015a0:	f002 f81a 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a4:	2310      	movs	r3, #16
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <MX_GPIO_Init+0x138>)
 80015bc:	f001 fe70 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sync_Trig_Pin */
  GPIO_InitStruct.Pin = Sync_Trig_Pin;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sync_Trig_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4810      	ldr	r0, [pc, #64]	@ (8001618 <MX_GPIO_Init+0x13c>)
 80015d6:	f001 fe63 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4809      	ldr	r0, [pc, #36]	@ (8001618 <MX_GPIO_Init+0x13c>)
 80015f4:	f001 fe54 	bl	80032a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2006      	movs	r0, #6
 80015fe:	f001 fa2a 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001602:	2006      	movs	r0, #6
 8001604:	f001 fa43 	bl	8002a8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 8001624:	2120      	movs	r1, #32
 8001626:	4804      	ldr	r0, [pc, #16]	@ (8001638 <Error_Handler+0x1c>)
 8001628:	f001 ffef 	bl	800360a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800162c:	2064      	movs	r0, #100	@ 0x64
 800162e:	f000 fc99 	bl	8001f64 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 8001632:	bf00      	nop
 8001634:	e7f6      	b.n	8001624 <Error_Handler+0x8>
 8001636:	bf00      	nop
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001764 <HAL_ADC_MspInit+0xd8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d156      	bne.n	800175c <HAL_ADC_MspInit+0xd0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a25      	ldr	r2, [pc, #148]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_ADC_MspInit+0xdc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	481c      	ldr	r0, [pc, #112]	@ (800176c <HAL_ADC_MspInit+0xe0>)
 80016fa:	f001 fdd1 	bl	80032a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001700:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <HAL_ADC_MspInit+0xe8>)
 8001702:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001718:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001724:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001742:	f001 f9cd 	bl	8002ae0 <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800174c:	f7ff ff66 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
 8001756:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_ADC_MspInit+0xe4>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40012000 	.word	0x40012000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	20000084 	.word	0x20000084
 8001774:	40026410 	.word	0x40026410

08001778 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_SPI_MspInit+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d15c      	bne.n	8001854 <HAL_SPI_MspInit+0xdc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a28      	ldr	r2, [pc, #160]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <HAL_SPI_MspInit+0xe8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017d2:	23a0      	movs	r3, #160	@ 0xa0
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e2:	2305      	movs	r3, #5
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	481d      	ldr	r0, [pc, #116]	@ (8001864 <HAL_SPI_MspInit+0xec>)
 80017ee:	f001 fd57 	bl	80032a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_SPI_MspInit+0xf4>)
 80017f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 80017fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001802:	2240      	movs	r2, #64	@ 0x40
 8001804:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 800180e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001812:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800181a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 800181e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001822:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 800182c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001830:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001838:	480b      	ldr	r0, [pc, #44]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 800183a:	f001 f951 	bl	8002ae0 <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001844:	f7ff feea 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 800184c:	649a      	str	r2, [r3, #72]	@ 0x48
 800184e:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_SPI_MspInit+0xf0>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013000 	.word	0x40013000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	2000013c 	.word	0x2000013c
 800186c:	40026440 	.word	0x40026440

08001870 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001880:	d116      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201c      	movs	r0, #28
 80018a4:	f001 f8d7 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a8:	201c      	movs	r0, #28
 80018aa:	f001 f8f0 	bl	8002a8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018ae:	e012      	b.n	80018d6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <HAL_TIM_Base_MspInit+0x74>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_TIM_Base_MspInit+0x70>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40000400 	.word	0x40000400

080018e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_UART_MspInit+0x84>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12b      	bne.n	8001962 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_UART_MspInit+0x88>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_UART_MspInit+0x88>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_UART_MspInit+0x88>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_UART_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <HAL_UART_MspInit+0x88>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_UART_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001942:	230c      	movs	r3, #12
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001952:	2307      	movs	r3, #7
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <HAL_UART_MspInit+0x8c>)
 800195e:	f001 fc9f 	bl	80032a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40004400 	.word	0x40004400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <MemManage_Handler+0x4>

08001990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <UsageFault_Handler+0x4>

080019a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 faa9 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sync_Trig_Pin);
 80019da:	2001      	movs	r0, #1
 80019dc:	f001 fe30 	bl	8003640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <TIM2_IRQHandler+0x10>)
 80019ea:	f002 fee6 	bl	80047ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000019c 	.word	0x2000019c

080019f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <DMA2_Stream0_IRQHandler+0x10>)
 80019fe:	f001 f9e5 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000084 	.word	0x20000084

08001a0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <DMA2_Stream2_IRQHandler+0x10>)
 8001a12:	f001 f9db 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000013c 	.word	0x2000013c

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <CalcChecksum>:
#include "uart_protocol.h"
#include "stm32f4xx_hal.h"
#include "CMD.h"
#include <ctype.h>

static uint8_t CalcChecksum(uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	603a      	str	r2, [r7, #0]
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	460b      	mov	r3, r1
 8001a52:	80bb      	strh	r3, [r7, #4]
    uint8_t cs = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
    cs ^= 0xFE;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 8) & 0xFF;
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4053      	eors	r3, r2
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 0) & 0xFF;
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	b25a      	sxtb	r2, r3
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	4053      	eors	r3, r2
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 8) & 0xFF;
 8001a82:	88bb      	ldrh	r3, [r7, #4]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4053      	eors	r3, r2
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 0) & 0xFF;
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	b25a      	sxtb	r2, r3
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9c:	4053      	eors	r3, r2
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	81bb      	strh	r3, [r7, #12]
 8001aa6:	e009      	b.n	8001abc <CalcChecksum+0x78>
        cs ^= payload[i];
 8001aa8:	89bb      	ldrh	r3, [r7, #12]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4053      	eors	r3, r2
 8001ab4:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	81bb      	strh	r3, [r7, #12]
 8001abc:	89ba      	ldrh	r2, [r7, #12]
 8001abe:	88bb      	ldrh	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3f1      	bcc.n	8001aa8 <CalcChecksum+0x64>
    }
    return cs;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <UartProtocol_Init>:

void UartProtocol_Init(UartProtocol* proto, FrameReceivedCallback cb) {
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
    proto->rx_state = WAIT_SOF;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    proto->rx_cmd = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	805a      	strh	r2, [r3, #2]
    proto->rx_len = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	809a      	strh	r2, [r3, #4]
    proto->rx_payload_idx = 0;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	80da      	strh	r2, [r3, #6]
    proto->rx_checksum = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	721a      	strb	r2, [r3, #8]
    proto->rx_calc_checksum = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	725a      	strb	r2, [r3, #9]
    proto->onFrameReceived = cb;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <UartProtocol_ParseByte>:

void UartProtocol_ParseByte(UartProtocol* proto, uint8_t c) {
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
    switch(proto->rx_state) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	f200 80b1 	bhi.w	8001c8c <UartProtocol_ParseByte+0x178>
 8001b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <UartProtocol_ParseByte+0x1c>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b4d 	.word	0x08001b4d
 8001b34:	08001b63 	.word	0x08001b63
 8001b38:	08001b85 	.word	0x08001b85
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001bcd 	.word	0x08001bcd
 8001b44:	08001c1b 	.word	0x08001c1b
 8001b48:	08001c53 	.word	0x08001c53
        case WAIT_SOF:
            if (c == 0xFE) {
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b50:	f040 80a0 	bne.w	8001c94 <UartProtocol_ParseByte+0x180>
                proto->rx_state = READ_CMD_MSB;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
                proto->rx_calc_checksum = 0xFE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	22fe      	movs	r2, #254	@ 0xfe
 8001b5e:	725a      	strb	r2, [r3, #9]
            }
            break;
 8001b60:	e098      	b.n	8001c94 <UartProtocol_ParseByte+0x180>
        case READ_CMD_MSB:
            proto->rx_cmd = ((uint16_t)c) << 8;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7a5a      	ldrb	r2, [r3, #9]
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	4053      	eors	r3, r2
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_CMD_LSB;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
            break;
 8001b82:	e08a      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
        case READ_CMD_LSB:
            proto->rx_cmd |= c;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	885a      	ldrh	r2, [r3, #2]
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a5a      	ldrb	r2, [r3, #9]
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	4053      	eors	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_MSB;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	701a      	strb	r2, [r3, #0]
            break;
 8001ba8:	e077      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
        case READ_LEN_MSB:
            proto->rx_len = ((uint16_t)c) << 8;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a5a      	ldrb	r2, [r3, #9]
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	4053      	eors	r3, r2
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_LSB;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	701a      	strb	r2, [r3, #0]
            break;
 8001bca:	e066      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
        case READ_LEN_LSB:
            proto->rx_len |= c;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	889a      	ldrh	r2, [r3, #4]
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7a5a      	ldrb	r2, [r3, #9]
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	4053      	eors	r3, r2
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	725a      	strb	r2, [r3, #9]
            if (proto->rx_len > FRAME_MAX_PAYLOAD) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	889b      	ldrh	r3, [r3, #4]
 8001bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf2:	d903      	bls.n	8001bfc <UartProtocol_ParseByte+0xe8>
                proto->rx_state = WAIT_SOF;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
                proto->rx_state = READ_CHECKSUM;
            } else {
                proto->rx_payload_idx = 0;
                proto->rx_state = READ_PAYLOAD;
            }
            break;
 8001bfa:	e04e      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
            } else if (proto->rx_len == 0) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <UartProtocol_ParseByte+0xf8>
                proto->rx_state = READ_CHECKSUM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2206      	movs	r2, #6
 8001c08:	701a      	strb	r2, [r3, #0]
            break;
 8001c0a:	e046      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
                proto->rx_payload_idx = 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	80da      	strh	r2, [r3, #6]
                proto->rx_state = READ_PAYLOAD;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2205      	movs	r2, #5
 8001c16:	701a      	strb	r2, [r3, #0]
            break;
 8001c18:	e03f      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
        case READ_PAYLOAD:
            proto->frame_payload[proto->rx_payload_idx++] = c;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	88db      	ldrh	r3, [r3, #6]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	b291      	uxth	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	80d1      	strh	r1, [r2, #6]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	729a      	strb	r2, [r3, #10]
            proto->rx_calc_checksum ^= c;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7a5a      	ldrb	r2, [r3, #9]
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	4053      	eors	r3, r2
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	725a      	strb	r2, [r3, #9]
            if (proto->rx_payload_idx >= proto->rx_len) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	88da      	ldrh	r2, [r3, #6]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	889b      	ldrh	r3, [r3, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d326      	bcc.n	8001c98 <UartProtocol_ParseByte+0x184>
                proto->rx_state = READ_CHECKSUM;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001c50:	e022      	b.n	8001c98 <UartProtocol_ParseByte+0x184>
        case READ_CHECKSUM:
            proto->rx_checksum = c;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	721a      	strb	r2, [r3, #8]
            if (proto->rx_checksum == proto->rx_calc_checksum && proto->onFrameReceived) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7a1a      	ldrb	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7a5b      	ldrb	r3, [r3, #9]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10f      	bne.n	8001c84 <UartProtocol_ParseByte+0x170>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <UartProtocol_ParseByte+0x170>
                proto->onFrameReceived(proto, proto->rx_cmd, proto->rx_len, proto->frame_payload);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 410c 	ldr.w	r4, [r3, #268]	@ 0x10c
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8859      	ldrh	r1, [r3, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	889a      	ldrh	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	330a      	adds	r3, #10
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	47a0      	blx	r4
            }
            proto->rx_state = WAIT_SOF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e006      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
        default:
            proto->rx_state = WAIT_SOF;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
            break;
 8001c92:	e002      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
            break;
 8001c94:	bf00      	nop
 8001c96:	e000      	b.n	8001c9a <UartProtocol_ParseByte+0x186>
            break;
 8001c98:	bf00      	nop
    }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop

08001ca4 <UartProtocol_SendFrame>:

void UartProtocol_SendFrame(UART_HandleTypeDef* huart, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b0c9      	sub	sp, #292	@ 0x124
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001cae:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001cb2:	6020      	str	r0, [r4, #0]
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cbc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cc6:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001cca:	4602      	mov	r2, r0
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd6:	460a      	mov	r2, r1
 8001cd8:	801a      	strh	r2, [r3, #0]
    uint8_t tx_buf[6 + FRAME_MAX_PAYLOAD];
    int pos = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tx_buf[pos++] = 0xFE;
 8001ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001cea:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cee:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001cf2:	21fe      	movs	r1, #254	@ 0xfe
 8001cf4:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 8) & 0xFF;
 8001cf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cfa:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b299      	uxth	r1, r3
 8001d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d14:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d18:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 0) & 0xFF;
 8001d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d24:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d28:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	b2d1      	uxtb	r1, r2
 8001d30:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d34:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d38:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 8) & 0xFF;
 8001d3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b299      	uxth	r1, r3
 8001d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d52:	b2c9      	uxtb	r1, r1
 8001d54:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d58:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d5c:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 0) & 0xFF;
 8001d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d68:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d6c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	b2d1      	uxtb	r1, r2
 8001d74:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d78:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d7c:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001d84:	e017      	b.n	8001db6 <UartProtocol_SendFrame+0x112>
        tx_buf[pos++] = payload[i];
 8001d86:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d8a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d8e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	441a      	add	r2, r3
 8001d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8001da0:	7811      	ldrb	r1, [r2, #0]
 8001da2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001da6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001daa:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001dac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbde      	blt.n	8001d86 <UartProtocol_SendFrame+0xe2>
    }
    uint8_t cs = CalcChecksum(cmd, len, payload);
 8001dc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dcc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dd0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001dd4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001dd8:	8811      	ldrh	r1, [r2, #0]
 8001dda:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001dde:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001de2:	8810      	ldrh	r0, [r2, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f7ff fe2d 	bl	8001a44 <CalcChecksum>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    tx_buf[pos++] = cs;
 8001df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001dfa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001dfe:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001e02:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 8001e06:	54d1      	strb	r1, [r2, r3]

    HAL_UART_Transmit(huart, tx_buf, pos, 100);
 8001e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f107 0110 	add.w	r1, r7, #16
 8001e12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e16:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8001e1a:	2364      	movs	r3, #100	@ 0x64
 8001e1c:	6800      	ldr	r0, [r0, #0]
 8001e1e:	f003 f89d 	bl	8004f5c <HAL_UART_Transmit>
}
 8001e22:	bf00      	nop
 8001e24:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e30:	f7ff fdf6 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f003 fcd9 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7ff f91f 	bl	80010a0 <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e70:	080058a0 	.word	0x080058a0
  ldr r2, =_sbss
 8001e74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e78:	20014164 	.word	0x20014164

08001e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <HAL_Init+0x40>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_Init+0x40>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	@ (8001ec0 <HAL_Init+0x40>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 fdc9 	bl	8002a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f000 f808 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb4:	f7ff fbc2 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_InitTick+0x54>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x58>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fdef 	bl	8002ac6 <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00e      	b.n	8001f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d80a      	bhi.n	8001f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f000 fda9 	bl	8002a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f04:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_InitTick+0x5c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20014160 	.word	0x20014160

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20014160 	.word	0x20014160

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff ffee 	bl	8001f4c <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffde 	bl	8001f4c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e033      	b.n	800202a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fb5e 	bl	800168c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ff2:	f023 0302 	bic.w	r3, r3, #2
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 faac 	bl	800255c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
 800201a:	e001      	b.n	8002020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Start_DMA+0x22>
 8002052:	2302      	movs	r3, #2
 8002054:	e0d0      	b.n	80021f8 <HAL_ADC_Start_DMA+0x1c4>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d018      	beq.n	800209e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800207c:	4b60      	ldr	r3, [pc, #384]	@ (8002200 <HAL_ADC_Start_DMA+0x1cc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a60      	ldr	r2, [pc, #384]	@ (8002204 <HAL_ADC_Start_DMA+0x1d0>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9a      	lsrs	r2, r3, #18
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002090:	e002      	b.n	8002098 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3b01      	subs	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ac:	d107      	bne.n	80020be <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 8088 	bne.w	80021de <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800210c:	d106      	bne.n	800211c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f023 0206 	bic.w	r2, r3, #6
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
 800211a:	e002      	b.n	8002122 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_ADC_Start_DMA+0x1d4>)
 800212c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	4a36      	ldr	r2, [pc, #216]	@ (800220c <HAL_ADC_Start_DMA+0x1d8>)
 8002134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213a:	4a35      	ldr	r2, [pc, #212]	@ (8002210 <HAL_ADC_Start_DMA+0x1dc>)
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	4a34      	ldr	r2, [pc, #208]	@ (8002214 <HAL_ADC_Start_DMA+0x1e0>)
 8002144:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800214e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800215e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800216e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	334c      	adds	r3, #76	@ 0x4c
 800217a:	4619      	mov	r1, r3
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f000 fd5c 	bl	8002c3c <HAL_DMA_Start_IT>
 8002184:	4603      	mov	r3, r0
 8002186:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d129      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	e020      	b.n	80021f6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_ADC_Start_DMA+0x1e4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11b      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1c2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d114      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e00b      	b.n	80021f6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f043 0210 	orr.w	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000004 	.word	0x20000004
 8002204:	431bde83 	.word	0x431bde83
 8002208:	40012300 	.word	0x40012300
 800220c:	08002755 	.word	0x08002755
 8002210:	0800280f 	.word	0x0800280f
 8002214:	0800282b 	.word	0x0800282b
 8002218:	40012000 	.word	0x40012000

0800221c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Stop_DMA+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e048      	b.n	80022c8 <HAL_ADC_Stop_DMA+0xac>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d130      	bne.n	80022be <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800226a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d10f      	bne.n	800229a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fd34 	bl	8002cec <HAL_DMA_Abort>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80022a8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e113      	b.n	800253c <HAL_ADC_ConfigChannel+0x244>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d925      	bls.n	8002370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68d9      	ldr	r1, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68d9      	ldr	r1, [r3, #12]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	4603      	mov	r3, r0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4403      	add	r3, r0
 8002362:	3b1e      	subs	r3, #30
 8002364:	409a      	lsls	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	e022      	b.n	80023b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	2207      	movs	r2, #7
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4403      	add	r3, r0
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d824      	bhi.n	8002408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b05      	subs	r3, #5
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b05      	subs	r3, #5
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
 8002406:	e04c      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d824      	bhi.n	800245a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b23      	subs	r3, #35	@ 0x23
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	@ 0x23
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
 8002458:	e023      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b41      	subs	r3, #65	@ 0x41
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	@ 0x41
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_ADC_ConfigChannel+0x250>)
 80024a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a28      	ldr	r2, [pc, #160]	@ (800254c <HAL_ADC_ConfigChannel+0x254>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10f      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x1d8>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d10b      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <HAL_ADC_ConfigChannel+0x254>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d12b      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x23a>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <HAL_ADC_ConfigChannel+0x258>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x1f4>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b11      	cmp	r3, #17
 80024ea:	d122      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a11      	ldr	r2, [pc, #68]	@ (8002550 <HAL_ADC_ConfigChannel+0x258>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d111      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <HAL_ADC_ConfigChannel+0x25c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a11      	ldr	r2, [pc, #68]	@ (8002558 <HAL_ADC_ConfigChannel+0x260>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9a      	lsrs	r2, r3, #18
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002524:	e002      	b.n	800252c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3b01      	subs	r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f9      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40012300 	.word	0x40012300
 800254c:	40012000 	.word	0x40012000
 8002550:	10000012 	.word	0x10000012
 8002554:	20000004 	.word	0x20000004
 8002558:	431bde83 	.word	0x431bde83

0800255c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002564:	4b79      	ldr	r3, [pc, #484]	@ (800274c <ADC_Init+0x1f0>)
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	4a58      	ldr	r2, [pc, #352]	@ (8002750 <ADC_Init+0x1f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	e00f      	b.n	800265a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002658:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0202 	bic.w	r2, r2, #2
 8002668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6899      	ldr	r1, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7e1b      	ldrb	r3, [r3, #24]
 8002674:	005a      	lsls	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002696:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	3b01      	subs	r3, #1
 80026b4:	035a      	lsls	r2, r3, #13
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e007      	b.n	80026d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	051a      	lsls	r2, r3, #20
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002712:	025a      	lsls	r2, r3, #9
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	029a      	lsls	r2, r3, #10
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40012300 	.word	0x40012300
 8002750:	0f000001 	.word	0x0f000001

08002754 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d13c      	bne.n	80027e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d12b      	bne.n	80027e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800278c:	2b00      	cmp	r3, #0
 800278e:	d127      	bne.n	80027e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d119      	bne.n	80027e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0220 	bic.w	r2, r2, #32
 80027ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7fe fad7 	bl	8000d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027e6:	e00e      	b.n	8002806 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff fd75 	bl	80022e4 <HAL_ADC_ErrorCallback>
}
 80027fa:	e004      	b.n	8002806 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff fd57 	bl	80022d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	@ 0x40
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fd4a 	bl	80022e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db12      	blt.n	8002930 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	490a      	ldr	r1, [pc, #40]	@ (800293c <__NVIC_DisableIRQ+0x44>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	3320      	adds	r3, #32
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002924:	f3bf 8f4f 	dsb	sy
}
 8002928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
}
 800292e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	@ (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	@ (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
         );
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0c:	d301      	bcc.n	8002a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00f      	b.n	8002a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a12:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <SysTick_Config+0x40>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f7ff ff8e 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <SysTick_Config+0x40>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <SysTick_Config+0x40>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff05 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff1a 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff8e 	bl	8002994 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5d 	bl	8002940 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff0d 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff1d 	bl	80028f8 <__NVIC_DisableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff94 	bl	80029fc <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff fa2e 	bl	8001f4c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e099      	b.n	8002c30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1c:	e00f      	b.n	8002b3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1e:	f7ff fa15 	bl	8001f4c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d908      	bls.n	8002b3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e078      	b.n	8002c30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e8      	bne.n	8002b1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <HAL_DMA_Init+0x158>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0307 	bic.w	r3, r3, #7
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d117      	bne.n	8002c02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fadf 	bl	80031a8 <DMA_CheckFifoParam>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2240      	movs	r2, #64	@ 0x40
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e016      	b.n	8002c30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa96 	bl	800313c <DMA_CalcBaseAndBitshift>
 8002c10:	4603      	mov	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	223f      	movs	r2, #63	@ 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	f010803f 	.word	0xf010803f

08002c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Start_IT+0x26>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e040      	b.n	8002ce4 <HAL_DMA_Start_IT+0xa8>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12f      	bne.n	8002cd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa28 	bl	80030e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	223f      	movs	r2, #63	@ 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0216 	orr.w	r2, r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0208 	orr.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e005      	b.n	8002ce2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cfa:	f7ff f927 	bl	8001f4c <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2280      	movs	r2, #128	@ 0x80
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e052      	b.n	8002dc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0216 	bic.w	r2, r2, #22
 8002d2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <HAL_DMA_Abort+0x62>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0208 	bic.w	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6e:	e013      	b.n	8002d98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d70:	f7ff f8ec 	bl	8001f4c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d90c      	bls.n	8002d98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e015      	b.n	8002dc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e4      	bne.n	8002d70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	223f      	movs	r2, #63	@ 0x3f
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <HAL_DMA_IRQHandler+0x248>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8003018 <HAL_DMA_IRQHandler+0x24c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	2208      	movs	r2, #8
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e01f      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e016      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	2220      	movs	r2, #32
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808f 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d136      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0216 	bic.w	r2, r2, #22
 8002f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x1da>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	223f      	movs	r2, #63	@ 0x3f
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d07e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
        }
        return;
 8002fe2:	e079      	b.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d031      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e02c      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
 8003012:	bf00      	nop
 8003014:	20000004 	.word	0x20000004
 8003018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <HAL_DMA_IRQHandler+0x2cc>
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d8:	bf00      	nop
    }
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b40      	cmp	r3, #64	@ 0x40
 800310c:	d108      	bne.n	8003120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800311e:	e007      	b.n	8003130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3b10      	subs	r3, #16
 800314c:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <DMA_CalcBaseAndBitshift+0x64>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d909      	bls.n	800317e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	@ 0x58
 800317c:	e007      	b.n	800318e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	08005888 	.word	0x08005888

080031a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d856      	bhi.n	8003276 <DMA_CheckFifoParam+0xce>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <DMA_CheckFifoParam+0x28>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	080031e1 	.word	0x080031e1
 80031dc:	08003277 	.word	0x08003277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d046      	beq.n	800327a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e043      	b.n	800327a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031fa:	d140      	bne.n	800327e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e03d      	b.n	800327e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800320a:	d121      	bne.n	8003250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d837      	bhi.n	8003282 <DMA_CheckFifoParam+0xda>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <DMA_CheckFifoParam+0x70>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	0800322f 	.word	0x0800322f
 8003220:	08003229 	.word	0x08003229
 8003224:	08003241 	.word	0x08003241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e030      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323e:	e022      	b.n	8003286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003248:	d11f      	bne.n	800328a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800324e:	e01c      	b.n	800328a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d903      	bls.n	800325e <DMA_CheckFifoParam+0xb6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800325c:	e018      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e015      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      break;
 8003274:	e00b      	b.n	800328e <DMA_CheckFifoParam+0xe6>
      break;
 8003276:	bf00      	nop
 8003278:	e00a      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e008      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e006      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;   
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
    }
  } 
  
  return status; 
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e159      	b.n	8003570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 8148 	bne.w	800356a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d005      	beq.n	80032f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d130      	bne.n	8003354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 0201 	and.w	r2, r3, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d017      	beq.n	8003390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d123      	bne.n	80033e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a2 	beq.w	800356a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4a56      	ldr	r2, [pc, #344]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	4b54      	ldr	r3, [pc, #336]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003442:	4a52      	ldr	r2, [pc, #328]	@ (800358c <HAL_GPIO_Init+0x2ec>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a49      	ldr	r2, [pc, #292]	@ (8003590 <HAL_GPIO_Init+0x2f0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0x202>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_GPIO_Init+0x2f4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_GPIO_Init+0x1fe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a47      	ldr	r2, [pc, #284]	@ (8003598 <HAL_GPIO_Init+0x2f8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00d      	beq.n	800349a <HAL_GPIO_Init+0x1fa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a46      	ldr	r2, [pc, #280]	@ (800359c <HAL_GPIO_Init+0x2fc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x1f6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a45      	ldr	r2, [pc, #276]	@ (80035a0 <HAL_GPIO_Init+0x300>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_GPIO_Init+0x1f2>
 800348e:	2304      	movs	r3, #4
 8003490:	e008      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 8003492:	2307      	movs	r3, #7
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 8003496:	2303      	movs	r3, #3
 8003498:	e004      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 800349a:	2302      	movs	r3, #2
 800349c:	e002      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 80034a2:	2300      	movs	r3, #0
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	f002 0203 	and.w	r2, r2, #3
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	4093      	lsls	r3, r2
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b4:	4935      	ldr	r1, [pc, #212]	@ (800358c <HAL_GPIO_Init+0x2ec>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	3302      	adds	r3, #2
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e6:	4a2f      	ldr	r2, [pc, #188]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ec:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003510:	4a24      	ldr	r2, [pc, #144]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800353a:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003540:	4b18      	ldr	r3, [pc, #96]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003564:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	f67f aea2 	bls.w	80032bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e001      	b.n	80035ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e8:	787b      	ldrb	r3, [r7, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f4:	e003      	b.n	80035fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	041a      	lsls	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	619a      	str	r2, [r3, #24]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800361c:	887a      	ldrh	r2, [r7, #2]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	041a      	lsls	r2, r3, #16
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43d9      	mvns	r1, r3
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	400b      	ands	r3, r1
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800364a:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fc72 	bl	8000f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e267      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d075      	beq.n	800377a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800368e:	4b88      	ldr	r3, [pc, #544]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b85      	ldr	r3, [pc, #532]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d112      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b82      	ldr	r3, [pc, #520]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b7e      	ldr	r3, [pc, #504]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05b      	beq.n	8003778 <HAL_RCC_OscConfig+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d157      	bne.n	8003778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e242      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x74>
 80036d6:	4b76      	ldr	r3, [pc, #472]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a75      	ldr	r2, [pc, #468]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x98>
 80036ee:	4b70      	ldr	r3, [pc, #448]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6f      	ldr	r2, [pc, #444]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b6d      	ldr	r3, [pc, #436]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6c      	ldr	r2, [pc, #432]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 8003708:	4b69      	ldr	r3, [pc, #420]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a68      	ldr	r2, [pc, #416]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b66      	ldr	r3, [pc, #408]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a65      	ldr	r2, [pc, #404]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fc10 	bl	8001f4c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fc0c 	bl	8001f4c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e207      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b5b      	ldr	r3, [pc, #364]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xc0>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fbfc 	bl	8001f4c <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fbf8 	bl	8001f4c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1f3      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b51      	ldr	r3, [pc, #324]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0xe8>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003786:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b44      	ldr	r3, [pc, #272]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b41      	ldr	r3, [pc, #260]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e1c7      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b3b      	ldr	r3, [pc, #236]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4937      	ldr	r1, [pc, #220]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e03a      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_RCC_OscConfig+0x244>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe fbb1 	bl	8001f4c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe fbad 	bl	8001f4c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1a8      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b28      	ldr	r3, [pc, #160]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4925      	ldr	r1, [pc, #148]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e015      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <HAL_RCC_OscConfig+0x244>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fb90 	bl	8001f4c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003830:	f7fe fb8c 	bl	8001f4c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e187      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d036      	beq.n	80038c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <HAL_RCC_OscConfig+0x248>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe fb70 	bl	8001f4c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003870:	f7fe fb6c 	bl	8001f4c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e167      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x200>
 800388e:	e01b      	b.n	80038c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003890:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_OscConfig+0x248>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7fe fb59 	bl	8001f4c <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	e00e      	b.n	80038bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389e:	f7fe fb55 	bl	8001f4c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d907      	bls.n	80038bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e150      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	42470000 	.word	0x42470000
 80038b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b88      	ldr	r3, [pc, #544]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ea      	bne.n	800389e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8097 	beq.w	8003a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b81      	ldr	r3, [pc, #516]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b77      	ldr	r3, [pc, #476]	@ (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d118      	bne.n	8003944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b74      	ldr	r3, [pc, #464]	@ (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a73      	ldr	r2, [pc, #460]	@ (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe fb15 	bl	8001f4c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe fb11 	bl	8001f4c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e10c      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <HAL_RCC_OscConfig+0x474>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x2ea>
 800394c:	4b64      	ldr	r3, [pc, #400]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a63      	ldr	r2, [pc, #396]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
 8003958:	e01c      	b.n	8003994 <HAL_RCC_OscConfig+0x324>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x30c>
 8003962:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a5e      	ldr	r2, [pc, #376]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0x324>
 800397c:	4b58      	ldr	r3, [pc, #352]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003980:	4a57      	ldr	r2, [pc, #348]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	@ 0x70
 8003988:	4b55      	ldr	r3, [pc, #340]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a54      	ldr	r2, [pc, #336]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fe fad6 	bl	8001f4c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe fad2 	bl	8001f4c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0cb      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	4b49      	ldr	r3, [pc, #292]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0ee      	beq.n	80039a4 <HAL_RCC_OscConfig+0x334>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c8:	f7fe fac0 	bl	8001f4c <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fe fabc 	bl	8001f4c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0b5      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ee      	bne.n	80039d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	4a38      	ldr	r2, [pc, #224]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a1 	beq.w	8003b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d05c      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d141      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fa90 	bl	8001f4c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fa8c 	bl	8001f4c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e087      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	3b01      	subs	r3, #1
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	491b      	ldr	r1, [pc, #108]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fa65 	bl	8001f4c <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe fa61 	bl	8001f4c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e05c      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x416>
 8003aa4:	e054      	b.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fa4e 	bl	8001f4c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe fa4a 	bl	8001f4c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e045      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x444>
 8003ad2:	e03d      	b.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e038      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d028      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d121      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d11a      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0cc      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b68      	ldr	r3, [pc, #416]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d90c      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b65      	ldr	r3, [pc, #404]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b63      	ldr	r3, [pc, #396]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0b8      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a58      	ldr	r2, [pc, #352]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bcc:	4b53      	ldr	r3, [pc, #332]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	494d      	ldr	r1, [pc, #308]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d044      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d119      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e067      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 0203 	bic.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4934      	ldr	r1, [pc, #208]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c50:	f7fe f97c 	bl	8001f4c <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c58:	f7fe f978 	bl	8001f4c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e04f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 020c 	and.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1eb      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d20c      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b22      	ldr	r3, [pc, #136]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b20      	ldr	r3, [pc, #128]	@ (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e032      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4916      	ldr	r1, [pc, #88]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd2:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	490e      	ldr	r1, [pc, #56]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce6:	f000 f821 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	490a      	ldr	r1, [pc, #40]	@ (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	5ccb      	ldrb	r3, [r1, r3]
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	4a09      	ldr	r2, [pc, #36]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d02:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe f8dc 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08005870 	.word	0x08005870
 8003d24:	20000004 	.word	0x20000004
 8003d28:	20000008 	.word	0x20000008

08003d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b094      	sub	sp, #80	@ 0x50
 8003d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d44:	4b79      	ldr	r3, [pc, #484]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x40>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	f200 80e1 	bhi.w	8003f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5e:	e0db      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b73      	ldr	r3, [pc, #460]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d64:	e0db      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d66:	4b73      	ldr	r3, [pc, #460]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d6a:	e0d8      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d76:	4b6d      	ldr	r3, [pc, #436]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d063      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b6a      	ldr	r3, [pc, #424]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	2200      	movs	r2, #0
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d96:	2300      	movs	r3, #0
 8003d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db0:	0150      	lsls	r0, r2, #5
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4621      	mov	r1, r4
 8003db8:	1a51      	subs	r1, r2, r1
 8003dba:	6139      	str	r1, [r7, #16]
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dd0:	4659      	mov	r1, fp
 8003dd2:	018b      	lsls	r3, r1, #6
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dda:	4651      	mov	r1, sl
 8003ddc:	018a      	lsls	r2, r1, #6
 8003dde:	4651      	mov	r1, sl
 8003de0:	ebb2 0801 	subs.w	r8, r2, r1
 8003de4:	4659      	mov	r1, fp
 8003de6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfe:	4690      	mov	r8, r2
 8003e00:	4699      	mov	r9, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	eb18 0303 	adds.w	r3, r8, r3
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	eb49 0303 	adc.w	r3, r9, r3
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	024b      	lsls	r3, r1, #9
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e28:	4621      	mov	r1, r4
 8003e2a:	024a      	lsls	r2, r1, #9
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e3c:	f7fc f9cc 	bl	80001d8 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e48:	e058      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	2200      	movs	r2, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	4611      	mov	r1, r2
 8003e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	f04f 0000 	mov.w	r0, #0
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e76:	0150      	lsls	r0, r2, #5
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e82:	4649      	mov	r1, r9
 8003e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb2:	00e2      	lsls	r2, r4, #3
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	18e3      	adds	r3, r4, r3
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb45 0303 	adc.w	r3, r5, r3
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	028b      	lsls	r3, r1, #10
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003edc:	4621      	mov	r1, r4
 8003ede:	028a      	lsls	r2, r1, #10
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	61fa      	str	r2, [r7, #28]
 8003eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef0:	f7fc f972 	bl	80001d8 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	3301      	adds	r3, #1
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f16:	e002      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3750      	adds	r7, #80	@ 0x50
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	00f42400 	.word	0x00f42400
 8003f34:	007a1200 	.word	0x007a1200

08003f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000004 	.word	0x20000004

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f7ff fff0 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	0a9b      	lsrs	r3, r3, #10
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4903      	ldr	r1, [pc, #12]	@ (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	08005880 	.word	0x08005880

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f7c:	f7ff ffdc 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0b5b      	lsrs	r3, r3, #13
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	@ (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	08005880 	.word	0x08005880

08003fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07b      	b.n	80040aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	61da      	str	r2, [r3, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fbc0 	bl	8001778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0104 	and.w	r1, r3, #4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	f003 0210 	and.w	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b088      	sub	sp, #32
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c2:	f7fd ff43 	bl	8001f4c <HAL_GetTick>
 80040c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	e12a      	b.n	8004332 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x36>
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e122      	b.n	8004332 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_SPI_Transmit+0x48>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e11b      	b.n	8004332 <HAL_SPI_Transmit+0x280>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2203      	movs	r2, #3
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004148:	d10f      	bne.n	800416a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004168:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d007      	beq.n	8004188 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004186:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004190:	d152      	bne.n	8004238 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Transmit+0xee>
 800419a:	8b7b      	ldrh	r3, [r7, #26]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d145      	bne.n	800422c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041c4:	e032      	b.n	800422c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d112      	bne.n	80041fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041f8:	e018      	b.n	800422c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fa:	f7fd fea7 	bl	8001f4c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d803      	bhi.n	8004212 <HAL_SPI_Transmit+0x160>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d102      	bne.n	8004218 <HAL_SPI_Transmit+0x166>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e082      	b.n	8004332 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1c7      	bne.n	80041c6 <HAL_SPI_Transmit+0x114>
 8004236:	e053      	b.n	80042e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Transmit+0x194>
 8004240:	8b7b      	ldrh	r3, [r7, #26]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d147      	bne.n	80042d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800426c:	e033      	b.n	80042d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d113      	bne.n	80042a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042a2:	e018      	b.n	80042d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a4:	f7fd fe52 	bl	8001f4c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d803      	bhi.n	80042bc <HAL_SPI_Transmit+0x20a>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d102      	bne.n	80042c2 <HAL_SPI_Transmit+0x210>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e02d      	b.n	8004332 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1c6      	bne.n	800426e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	6839      	ldr	r1, [r7, #0]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f8b1 	bl	800444c <SPI_EndRxTxTransaction>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004330:	2300      	movs	r3, #0
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800434c:	f7fd fdfe 	bl	8001f4c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4413      	add	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800435c:	f7fd fdf6 	bl	8001f4c <HAL_GetTick>
 8004360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004362:	4b39      	ldr	r3, [pc, #228]	@ (8004448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	015b      	lsls	r3, r3, #5
 8004368:	0d1b      	lsrs	r3, r3, #20
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	e055      	b.n	8004420 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d051      	beq.n	8004420 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800437c:	f7fd fde6 	bl	8001f4c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	429a      	cmp	r2, r3
 800438a:	d902      	bls.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d13d      	bne.n	800440e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043aa:	d111      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b4:	d004      	beq.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043be:	d107      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d8:	d10f      	bne.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e018      	b.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e002      	b.n	8004420 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3b01      	subs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d19a      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000004 	.word	0x20000004

0800444c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2201      	movs	r2, #1
 8004460:	2102      	movs	r1, #2
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff ff6a 	bl	800433c <SPI_WaitFlagStateUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e032      	b.n	80044e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800447e:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <SPI_EndRxTxTransaction+0xa0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <SPI_EndRxTxTransaction+0xa4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	0d5b      	lsrs	r3, r3, #21
 800448a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449c:	d112      	bne.n	80044c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	@ 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff ff47 	bl	800433c <SPI_WaitFlagStateUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d016      	beq.n	80044e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e00f      	b.n	80044e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d0f2      	beq.n	80044c4 <SPI_EndRxTxTransaction+0x78>
 80044de:	e000      	b.n	80044e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80044e0:	bf00      	nop
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000004 	.word	0x20000004
 80044f0:	165e9f81 	.word	0x165e9f81

080044f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e041      	b.n	800458a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f9a8 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fb20 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d001      	beq.n	80045ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e03c      	b.n	8004626 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <HAL_TIM_Base_Start+0xa0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_TIM_Base_Start+0x5c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c6:	d013      	beq.n	80045f0 <HAL_TIM_Base_Start+0x5c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <HAL_TIM_Base_Start+0xa4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_TIM_Base_Start+0x5c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a19      	ldr	r2, [pc, #100]	@ (800463c <HAL_TIM_Base_Start+0xa8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_TIM_Base_Start+0x5c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_TIM_Base_Start+0xac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_TIM_Base_Start+0x5c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a16      	ldr	r2, [pc, #88]	@ (8004644 <HAL_TIM_Base_Start+0xb0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d111      	bne.n	8004614 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d010      	beq.n	8004624 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004612:	e007      	b.n	8004624 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40014000 	.word	0x40014000

08004648 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	f241 1311 	movw	r3, #4369	@ 0x1111
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <HAL_TIM_Base_Stop+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	f240 4344 	movw	r3, #1092	@ 0x444
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_TIM_Base_Stop+0x38>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e044      	b.n	800473a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_TIM_Base_Start_IT+0xb4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_TIM_Base_Start_IT+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a17      	ldr	r2, [pc, #92]	@ (8004754 <HAL_TIM_Base_Start_IT+0xbc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	@ (8004758 <HAL_TIM_Base_Start_IT+0xc0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40014000 	.word	0x40014000

0800475c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <HAL_TIM_Base_Stop_IT+0x48>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a1a      	ldr	r2, [r3, #32]
 800478a:	f240 4344 	movw	r3, #1092	@ 0x444
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_TIM_Base_Stop_IT+0x48>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0202 	mvn.w	r2, #2
 80047ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f999 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 800480a:	e005      	b.n	8004818 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f98b 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f99c 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01b      	beq.n	800486a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f06f 0204 	mvn.w	r2, #4
 800483a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f973 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 8004856:	e005      	b.n	8004864 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f965 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f976 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01b      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0208 	mvn.w	r2, #8
 8004886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2204      	movs	r2, #4
 800488c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f94d 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 80048a2:	e005      	b.n	80048b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f93f 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f950 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01b      	beq.n	8004902 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0210 	mvn.w	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2208      	movs	r2, #8
 80048d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f927 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 80048ee:	e005      	b.n	80048fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f919 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f92a 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f06f 0201 	mvn.w	r2, #1
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc f9f7 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 faaf 	bl	8004ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8fb 	bl	8004b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0220 	mvn.w	r2, #32
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa81 	bl	8004e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_ConfigClockSource+0x1c>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0b4      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x186>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ee:	d03e      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xd4>
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049f4:	f200 8087 	bhi.w	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fc:	f000 8086 	beq.w	8004b0c <HAL_TIM_ConfigClockSource+0x172>
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a04:	d87f      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a06:	2b70      	cmp	r3, #112	@ 0x70
 8004a08:	d01a      	beq.n	8004a40 <HAL_TIM_ConfigClockSource+0xa6>
 8004a0a:	2b70      	cmp	r3, #112	@ 0x70
 8004a0c:	d87b      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	2b60      	cmp	r3, #96	@ 0x60
 8004a10:	d050      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0x11a>
 8004a12:	2b60      	cmp	r3, #96	@ 0x60
 8004a14:	d877      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a16:	2b50      	cmp	r3, #80	@ 0x50
 8004a18:	d03c      	beq.n	8004a94 <HAL_TIM_ConfigClockSource+0xfa>
 8004a1a:	2b50      	cmp	r3, #80	@ 0x50
 8004a1c:	d873      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1e:	2b40      	cmp	r3, #64	@ 0x40
 8004a20:	d058      	beq.n	8004ad4 <HAL_TIM_ConfigClockSource+0x13a>
 8004a22:	2b40      	cmp	r3, #64	@ 0x40
 8004a24:	d86f      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a26:	2b30      	cmp	r3, #48	@ 0x30
 8004a28:	d064      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0x15a>
 8004a2a:	2b30      	cmp	r3, #48	@ 0x30
 8004a2c:	d86b      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d060      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0x15a>
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d867      	bhi.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d05c      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d05a      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3e:	e062      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	f000 f992 	bl	8004d78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e04f      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7e:	f000 f97b 	bl	8004d78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a90:	609a      	str	r2, [r3, #8]
      break;
 8004a92:	e03c      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f000 f8ef 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2150      	movs	r1, #80	@ 0x50
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f948 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004ab2:	e02c      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f000 f90e 	bl	8004ce2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2160      	movs	r1, #96	@ 0x60
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f938 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e01c      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f000 f8cf 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2140      	movs	r1, #64	@ 0x40
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 f928 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004af2:	e00c      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 f91f 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e003      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      break;
 8004b0a:	e000      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a37      	ldr	r2, [pc, #220]	@ (8004c68 <TIM_Base_SetConfig+0xf0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a34      	ldr	r2, [pc, #208]	@ (8004c6c <TIM_Base_SetConfig+0xf4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <TIM_Base_SetConfig+0xf8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <TIM_Base_SetConfig+0xfc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	@ (8004c68 <TIM_Base_SetConfig+0xf0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	@ (8004c6c <TIM_Base_SetConfig+0xf4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	@ (8004c70 <TIM_Base_SetConfig+0xf8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <TIM_Base_SetConfig+0xfc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a22      	ldr	r2, [pc, #136]	@ (8004c78 <TIM_Base_SetConfig+0x100>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a21      	ldr	r2, [pc, #132]	@ (8004c7c <TIM_Base_SetConfig+0x104>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a20      	ldr	r2, [pc, #128]	@ (8004c80 <TIM_Base_SetConfig+0x108>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a0c      	ldr	r2, [pc, #48]	@ (8004c68 <TIM_Base_SetConfig+0xf0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d103      	bne.n	8004c42 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f043 0204 	orr.w	r2, r3, #4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	601a      	str	r2, [r3, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0201 	bic.w	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 030a 	bic.w	r3, r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b087      	sub	sp, #28
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 0210 	bic.w	r2, r3, #16
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f043 0307 	orr.w	r3, r3, #7
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	021a      	lsls	r2, r3, #8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	609a      	str	r2, [r3, #8]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e050      	b.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d013      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a13      	ldr	r2, [pc, #76]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d10c      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40014000 	.word	0x40014000

08004e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e042      	b.n	8004f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fd00 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	@ 0x24
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fa09 	bl	8005318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d175      	bne.n	8005068 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_UART_Transmit+0x2c>
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e06e      	b.n	800506a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2221      	movs	r2, #33	@ 0x21
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9a:	f7fc ffd7 	bl	8001f4c <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	88fa      	ldrh	r2, [r7, #6]
 8004faa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb4:	d108      	bne.n	8004fc8 <HAL_UART_Transmit+0x6c>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e003      	b.n	8004fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd0:	e02e      	b.n	8005030 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2180      	movs	r1, #128	@ 0x80
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f8df 	bl	80051a0 <UART_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e03a      	b.n	800506a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	3302      	adds	r3, #2
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e007      	b.n	8005022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	781a      	ldrb	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3301      	adds	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1cb      	bne.n	8004fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	2140      	movs	r1, #64	@ 0x40
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f8ab 	bl	80051a0 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b08a      	sub	sp, #40	@ 0x28
 8005076:	af02      	add	r7, sp, #8
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	f040 8081 	bne.w	8005196 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Receive+0x2e>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e079      	b.n	8005198 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2222      	movs	r2, #34	@ 0x22
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b8:	f7fc ff48 	bl	8001f4c <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d2:	d108      	bne.n	80050e6 <HAL_UART_Receive+0x74>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e003      	b.n	80050ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050ee:	e047      	b.n	8005180 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	2120      	movs	r1, #32
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f850 	bl	80051a0 <UART_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e042      	b.n	8005198 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10c      	bne.n	8005132 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	b29a      	uxth	r2, r3
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	3302      	adds	r3, #2
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e01f      	b.n	8005172 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513a:	d007      	beq.n	800514c <HAL_UART_Receive+0xda>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <HAL_UART_Receive+0xe8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e008      	b.n	800516c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005166:	b2da      	uxtb	r2, r3
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1b2      	bne.n	80050f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b0:	e03b      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d037      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fc fec7 	bl	8001f4c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e03a      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d023      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b80      	cmp	r3, #128	@ 0x80
 80051e6:	d020      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b40      	cmp	r3, #64	@ 0x40
 80051ec:	d01d      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d116      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f81d 	bl	8005252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2208      	movs	r2, #8
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e00f      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	429a      	cmp	r2, r3
 8005246:	d0b4      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005252:	b480      	push	{r7}
 8005254:	b095      	sub	sp, #84	@ 0x54
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800527a:	643a      	str	r2, [r7, #64]	@ 0x40
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e5      	bne.n	800525a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	61fb      	str	r3, [r7, #28]
   return(result);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e5      	bne.n	800528e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d119      	bne.n	80052fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ea:	61ba      	str	r2, [r7, #24]
 80052ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	613b      	str	r3, [r7, #16]
   return(result);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800530c:	bf00      	nop
 800530e:	3754      	adds	r7, #84	@ 0x54
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b0c0      	sub	sp, #256	@ 0x100
 800531e:	af00      	add	r7, sp, #0
 8005320:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	68d9      	ldr	r1, [r3, #12]
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	ea40 0301 	orr.w	r3, r0, r1
 8005340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005370:	f021 010c 	bic.w	r1, r1, #12
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800537e:	430b      	orrs	r3, r1
 8005380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	6999      	ldr	r1, [r3, #24]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	ea40 0301 	orr.w	r3, r0, r1
 800539e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b8f      	ldr	r3, [pc, #572]	@ (80055e4 <UART_SetConfig+0x2cc>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d005      	beq.n	80053b8 <UART_SetConfig+0xa0>
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8d      	ldr	r3, [pc, #564]	@ (80055e8 <UART_SetConfig+0x2d0>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d104      	bne.n	80053c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe fdde 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 80053bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053c0:	e003      	b.n	80053ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c2:	f7fe fdc5 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 80053c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d4:	f040 810c 	bne.w	80055f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ea:	4622      	mov	r2, r4
 80053ec:	462b      	mov	r3, r5
 80053ee:	1891      	adds	r1, r2, r2
 80053f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053f2:	415b      	adcs	r3, r3
 80053f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053fa:	4621      	mov	r1, r4
 80053fc:	eb12 0801 	adds.w	r8, r2, r1
 8005400:	4629      	mov	r1, r5
 8005402:	eb43 0901 	adc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005428:	462b      	mov	r3, r5
 800542a:	eb49 0303 	adc.w	r3, r9, r3
 800542e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800543e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005446:	460b      	mov	r3, r1
 8005448:	18db      	adds	r3, r3, r3
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
 800544c:	4613      	mov	r3, r2
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	657b      	str	r3, [r7, #84]	@ 0x54
 8005454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800545c:	f7fa febc 	bl	80001d8 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b61      	ldr	r3, [pc, #388]	@ (80055ec <UART_SetConfig+0x2d4>)
 8005466:	fba3 2302 	umull	r2, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	011c      	lsls	r4, r3, #4
 800546e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005478:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800547c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	1891      	adds	r1, r2, r2
 8005486:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005488:	415b      	adcs	r3, r3
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005490:	4641      	mov	r1, r8
 8005492:	eb12 0a01 	adds.w	sl, r2, r1
 8005496:	4649      	mov	r1, r9
 8005498:	eb43 0b01 	adc.w	fp, r3, r1
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b0:	4692      	mov	sl, r2
 80054b2:	469b      	mov	fp, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054be:	464b      	mov	r3, r9
 80054c0:	eb4b 0303 	adc.w	r3, fp, r3
 80054c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054dc:	460b      	mov	r3, r1
 80054de:	18db      	adds	r3, r3, r3
 80054e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e2:	4613      	mov	r3, r2
 80054e4:	eb42 0303 	adc.w	r3, r2, r3
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054f2:	f7fa fe71 	bl	80001d8 <__aeabi_uldivmod>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ec <UART_SetConfig+0x2d4>)
 80054fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2264      	movs	r2, #100	@ 0x64
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	1acb      	subs	r3, r1, r3
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005512:	4b36      	ldr	r3, [pc, #216]	@ (80055ec <UART_SetConfig+0x2d4>)
 8005514:	fba3 2302 	umull	r2, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005520:	441c      	add	r4, r3
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800552c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	1891      	adds	r1, r2, r2
 800553a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800553c:	415b      	adcs	r3, r3
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005544:	4641      	mov	r1, r8
 8005546:	1851      	adds	r1, r2, r1
 8005548:	6339      	str	r1, [r7, #48]	@ 0x30
 800554a:	4649      	mov	r1, r9
 800554c:	414b      	adcs	r3, r1
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800555c:	4659      	mov	r1, fp
 800555e:	00cb      	lsls	r3, r1, #3
 8005560:	4651      	mov	r1, sl
 8005562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005566:	4651      	mov	r1, sl
 8005568:	00ca      	lsls	r2, r1, #3
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	4603      	mov	r3, r0
 8005570:	4642      	mov	r2, r8
 8005572:	189b      	adds	r3, r3, r2
 8005574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005578:	464b      	mov	r3, r9
 800557a:	460a      	mov	r2, r1
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005590:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005598:	460b      	mov	r3, r1
 800559a:	18db      	adds	r3, r3, r3
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559e:	4613      	mov	r3, r2
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055ae:	f7fa fe13 	bl	80001d8 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <UART_SetConfig+0x2d4>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	@ 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3332      	adds	r3, #50	@ 0x32
 80055ca:	4a08      	ldr	r2, [pc, #32]	@ (80055ec <UART_SetConfig+0x2d4>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 0207 	and.w	r2, r3, #7
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4422      	add	r2, r4
 80055de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e0:	e106      	b.n	80057f0 <UART_SetConfig+0x4d8>
 80055e2:	bf00      	nop
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005602:	4642      	mov	r2, r8
 8005604:	464b      	mov	r3, r9
 8005606:	1891      	adds	r1, r2, r2
 8005608:	6239      	str	r1, [r7, #32]
 800560a:	415b      	adcs	r3, r3
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
 800560e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005612:	4641      	mov	r1, r8
 8005614:	1854      	adds	r4, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb43 0501 	adc.w	r5, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	00eb      	lsls	r3, r5, #3
 8005626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562a:	00e2      	lsls	r2, r4, #3
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	4643      	mov	r3, r8
 8005632:	18e3      	adds	r3, r4, r3
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005638:	464b      	mov	r3, r9
 800563a:	eb45 0303 	adc.w	r3, r5, r3
 800563e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800564e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800565e:	4629      	mov	r1, r5
 8005660:	008b      	lsls	r3, r1, #2
 8005662:	4621      	mov	r1, r4
 8005664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005668:	4621      	mov	r1, r4
 800566a:	008a      	lsls	r2, r1, #2
 800566c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005670:	f7fa fdb2 	bl	80001d8 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4b60      	ldr	r3, [pc, #384]	@ (80057fc <UART_SetConfig+0x4e4>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	011c      	lsls	r4, r3, #4
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800568c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	1891      	adds	r1, r2, r2
 800569a:	61b9      	str	r1, [r7, #24]
 800569c:	415b      	adcs	r3, r3
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a4:	4641      	mov	r1, r8
 80056a6:	1851      	adds	r1, r2, r1
 80056a8:	6139      	str	r1, [r7, #16]
 80056aa:	4649      	mov	r1, r9
 80056ac:	414b      	adcs	r3, r1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056bc:	4659      	mov	r1, fp
 80056be:	00cb      	lsls	r3, r1, #3
 80056c0:	4651      	mov	r1, sl
 80056c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c6:	4651      	mov	r1, sl
 80056c8:	00ca      	lsls	r2, r1, #3
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	4642      	mov	r2, r8
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056d8:	464b      	mov	r3, r9
 80056da:	460a      	mov	r2, r1
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056fc:	4649      	mov	r1, r9
 80056fe:	008b      	lsls	r3, r1, #2
 8005700:	4641      	mov	r1, r8
 8005702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005706:	4641      	mov	r1, r8
 8005708:	008a      	lsls	r2, r1, #2
 800570a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800570e:	f7fa fd63 	bl	80001d8 <__aeabi_uldivmod>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4611      	mov	r1, r2
 8005718:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <UART_SetConfig+0x4e4>)
 800571a:	fba3 2301 	umull	r2, r3, r3, r1
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2264      	movs	r2, #100	@ 0x64
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	1acb      	subs	r3, r1, r3
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	3332      	adds	r3, #50	@ 0x32
 800572c:	4a33      	ldr	r2, [pc, #204]	@ (80057fc <UART_SetConfig+0x4e4>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005738:	441c      	add	r4, r3
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	2200      	movs	r2, #0
 8005740:	673b      	str	r3, [r7, #112]	@ 0x70
 8005742:	677a      	str	r2, [r7, #116]	@ 0x74
 8005744:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	1891      	adds	r1, r2, r2
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	415b      	adcs	r3, r3
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005758:	4641      	mov	r1, r8
 800575a:	1851      	adds	r1, r2, r1
 800575c:	6039      	str	r1, [r7, #0]
 800575e:	4649      	mov	r1, r9
 8005760:	414b      	adcs	r3, r1
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005770:	4659      	mov	r1, fp
 8005772:	00cb      	lsls	r3, r1, #3
 8005774:	4651      	mov	r1, sl
 8005776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577a:	4651      	mov	r1, sl
 800577c:	00ca      	lsls	r2, r1, #3
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	4603      	mov	r3, r0
 8005784:	4642      	mov	r2, r8
 8005786:	189b      	adds	r3, r3, r2
 8005788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800578a:	464b      	mov	r3, r9
 800578c:	460a      	mov	r2, r1
 800578e:	eb42 0303 	adc.w	r3, r2, r3
 8005792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	663b      	str	r3, [r7, #96]	@ 0x60
 800579e:	667a      	str	r2, [r7, #100]	@ 0x64
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057ac:	4649      	mov	r1, r9
 80057ae:	008b      	lsls	r3, r1, #2
 80057b0:	4641      	mov	r1, r8
 80057b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b6:	4641      	mov	r1, r8
 80057b8:	008a      	lsls	r2, r1, #2
 80057ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057be:	f7fa fd0b 	bl	80001d8 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <UART_SetConfig+0x4e4>)
 80057c8:	fba3 1302 	umull	r1, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	2164      	movs	r1, #100	@ 0x64
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	3332      	adds	r3, #50	@ 0x32
 80057da:	4a08      	ldr	r2, [pc, #32]	@ (80057fc <UART_SetConfig+0x4e4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4422      	add	r2, r4
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057f6:	46bd      	mov	sp, r7
 80057f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fc:	51eb851f 	.word	0x51eb851f

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	@ (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	@ (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	@ (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	@ (8005854 <__libc_init_array+0x44>)
 8005824:	f000 f818 	bl	8005858 <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	08005898 	.word	0x08005898
 800584c:	08005898 	.word	0x08005898
 8005850:	08005898 	.word	0x08005898
 8005854:	0800589c 	.word	0x0800589c

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
