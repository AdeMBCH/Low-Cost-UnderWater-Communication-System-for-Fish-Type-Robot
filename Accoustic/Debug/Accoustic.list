
Accoustic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a18  08005a18  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005a20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b890  20000010  08005a30  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b8a0  08005a30  000078a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d9  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abb  00000000  00000000  0001a319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4c  00000000  00000000  0001dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018768  00000000  00000000  0001ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140c3  00000000  00000000  00037374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ceac  00000000  00000000  0004b437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e82e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  000e8328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000eca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080059d8 	.word	0x080059d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080059d8 	.word	0x080059d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AskModem_Init>:
#include "ask_modem.h"
#include <math.h>
#include "uart_protocol.h"
#include <stdlib.h>

void AskModem_Init(AskModem* modem, uint16_t sample_per_symbol, float f0, float fs) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	460b      	mov	r3, r1
 800050e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000512:	edc7 0a00 	vstr	s1, [r7]
 8000516:	817b      	strh	r3, [r7, #10]
    modem->samples_per_symbol = sample_per_symbol;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	897a      	ldrh	r2, [r7, #10]
 800051c:	801a      	strh	r2, [r3, #0]
    modem->f0 = f0;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
    modem->fs = fs;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	609a      	str	r2, [r3, #8]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <AskModem_Modulate_OOK>:
                AskRingBuffer_Put(outbuf, (int16_t)(sample * 2047.0f));
            }
        }
    }
}
void AskModem_Modulate_OOK(UART_HandleTypeDef* huart, AskModem* modem, const uint8_t* payload, uint16_t byte_len, AskRingBuffer* outbuf, float amplitude) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b08e      	sub	sp, #56	@ 0x38
 800053c:	af00      	add	r7, sp, #0
 800053e:	6178      	str	r0, [r7, #20]
 8000540:	6139      	str	r1, [r7, #16]
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	ed87 0a01 	vstr	s0, [r7, #4]
 8000548:	817b      	strh	r3, [r7, #10]
    uint32_t global_sample = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	637b      	str	r3, [r7, #52]	@ 0x34

    // === Préambule : 1 bit à 1 ===
    int16_t preamble_high = (int16_t)(amplitude * 1024.0f);
 800054e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000552:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000644 <AskModem_Modulate_OOK+0x10c>
 8000556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800055a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055e:	ee17 3a90 	vmov	r3, s15
 8000562:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000564:	2300      	movs	r3, #0
 8000566:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000568:	e00b      	b.n	8000582 <AskModem_Modulate_OOK+0x4a>
        AskRingBuffer_Put(outbuf, preamble_high);
 800056a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800056e:	4619      	mov	r1, r3
 8000570:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000572:	f000 f9f9 	bl	8000968 <AskRingBuffer_Put>
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000576:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000578:	3301      	adds	r3, #1
 800057a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800057c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057e:	3301      	adds	r3, #1
 8000580:	637b      	str	r3, [r7, #52]	@ 0x34
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000588:	429a      	cmp	r2, r3
 800058a:	d3ee      	bcc.n	800056a <AskModem_Modulate_OOK+0x32>
    }

    // === Préambule : 1 bit à 0 ===
    int16_t preamble_low = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	847b      	strh	r3, [r7, #34]	@ 0x22
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000590:	2300      	movs	r3, #0
 8000592:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000594:	e00b      	b.n	80005ae <AskModem_Modulate_OOK+0x76>
        AskRingBuffer_Put(outbuf, preamble_low);
 8000596:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800059a:	4619      	mov	r1, r3
 800059c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800059e:	f000 f9e3 	bl	8000968 <AskRingBuffer_Put>
    for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80005a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80005a4:	3301      	adds	r3, #1
 80005a6:	863b      	strh	r3, [r7, #48]	@ 0x30
 80005a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005aa:	3301      	adds	r3, #1
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3ee      	bcc.n	8000596 <AskModem_Modulate_OOK+0x5e>
    }

    // === Données utiles ===
    for (uint16_t i = 0; i < byte_len; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80005bc:	e039      	b.n	8000632 <AskModem_Modulate_OOK+0xfa>
        uint8_t byte = payload[i];
 80005be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        for (int b = 7; b >= 0; b--) {
 80005ca:	2307      	movs	r3, #7
 80005cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005ce:	e02a      	b.n	8000626 <AskModem_Modulate_OOK+0xee>
            uint8_t bit = (byte >> b) & 1;
 80005d0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80005d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d6:	fa42 f303 	asr.w	r3, r2, r3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	f887 3020 	strb.w	r3, [r7, #32]
            int16_t sample = bit ? preamble_high : preamble_low;
 80005e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <AskModem_Modulate_OOK+0xba>
 80005ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80005f0:	e001      	b.n	80005f6 <AskModem_Modulate_OOK+0xbe>
 80005f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80005f6:	83fb      	strh	r3, [r7, #30]

            for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80005f8:	2300      	movs	r3, #0
 80005fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80005fc:	e00b      	b.n	8000616 <AskModem_Modulate_OOK+0xde>
                AskRingBuffer_Put(outbuf, sample);
 80005fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000602:	4619      	mov	r1, r3
 8000604:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000606:	f000 f9af 	bl	8000968 <AskRingBuffer_Put>
            for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 800060a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800060c:	3301      	adds	r3, #1
 800060e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000612:	3301      	adds	r3, #1
 8000614:	637b      	str	r3, [r7, #52]	@ 0x34
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800061c:	429a      	cmp	r2, r3
 800061e:	d3ee      	bcc.n	80005fe <AskModem_Modulate_OOK+0xc6>
        for (int b = 7; b >= 0; b--) {
 8000620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000622:	3b01      	subs	r3, #1
 8000624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000628:	2b00      	cmp	r3, #0
 800062a:	dad1      	bge.n	80005d0 <AskModem_Modulate_OOK+0x98>
    for (uint16_t i = 0; i < byte_len; i++) {
 800062c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800062e:	3301      	adds	r3, #1
 8000630:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000632:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000634:	897b      	ldrh	r3, [r7, #10]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3c1      	bcc.n	80005be <AskModem_Modulate_OOK+0x86>
            }
        }
    }
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3738      	adds	r7, #56	@ 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	44800000 	.word	0x44800000

08000648 <AskModem_Demodulate_OOK>:

void AskModem_Demodulate_OOK(UART_HandleTypeDef* huart, AskModem* modem, AskRingBuffer* inbuf, uint8_t* bits_out, uint16_t* bit_len) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
    *bit_len = 0;
 8000656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    const uint16_t N = modem->samples_per_symbol;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	833b      	strh	r3, [r7, #24]

    if (AskRingBuffer_Available(inbuf) < 2 * N)
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f9e2 	bl	8000a2c <AskRingBuffer_Available>
 8000668:	4602      	mov	r2, r0
 800066a:	8b3b      	ldrh	r3, [r7, #24]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	f0c0 80c0 	bcc.w	80007f4 <AskModem_Demodulate_OOK+0x1ac>
        return;

    // Dynamique selon amplitude connue (3.3V * 1024 = ~3379)
    float threshold = 1800.0f;
 8000674:	4b61      	ldr	r3, [pc, #388]	@ (80007fc <AskModem_Demodulate_OOK+0x1b4>)
 8000676:	617b      	str	r3, [r7, #20]

    int synced = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!synced && AskRingBuffer_Available(inbuf) >= 2 * N) {
 800067c:	e063      	b.n	8000746 <AskModem_Demodulate_OOK+0xfe>
        float avg1 = 0.0f, avg2 = 0.0f;
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24

        for (uint16_t i = 0; i < N; i++) avg1 += fabsf((float)AskRingBuffer_Get(inbuf));
 800068a:	2300      	movs	r3, #0
 800068c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800068e:	e012      	b.n	80006b6 <AskModem_Demodulate_OOK+0x6e>
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f999 	bl	80009c8 <AskRingBuffer_Get>
 8000696:	4603      	mov	r3, r0
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a0:	eef0 7ae7 	vabs.f32	s15, s15
 80006a4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80006a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ac:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80006b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80006b2:	3301      	adds	r3, #1
 80006b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80006b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80006b8:	8b3b      	ldrh	r3, [r7, #24]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3e8      	bcc.n	8000690 <AskModem_Demodulate_OOK+0x48>
        avg1 /= N;
 80006be:	8b3b      	ldrh	r3, [r7, #24]
 80006c0:	ee07 3a90 	vmov	s15, r3
 80006c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80006cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        for (uint16_t i = 0; i < N; i++) avg2 += fabsf((float)AskRingBuffer_Get(inbuf));
 80006d4:	2300      	movs	r3, #0
 80006d6:	843b      	strh	r3, [r7, #32]
 80006d8:	e012      	b.n	8000700 <AskModem_Demodulate_OOK+0xb8>
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f974 	bl	80009c8 <AskRingBuffer_Get>
 80006e0:	4603      	mov	r3, r0
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ea:	eef0 7ae7 	vabs.f32	s15, s15
 80006ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80006fa:	8c3b      	ldrh	r3, [r7, #32]
 80006fc:	3301      	adds	r3, #1
 80006fe:	843b      	strh	r3, [r7, #32]
 8000700:	8c3a      	ldrh	r2, [r7, #32]
 8000702:	8b3b      	ldrh	r3, [r7, #24]
 8000704:	429a      	cmp	r2, r3
 8000706:	d3e8      	bcc.n	80006da <AskModem_Demodulate_OOK+0x92>
        avg2 /= N;
 8000708:	8b3b      	ldrh	r3, [r7, #24]
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000712:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        if (avg1 > threshold && avg2 < threshold) {
 800071e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000722:	edd7 7a05 	vldr	s15, [r7, #20]
 8000726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	dd0a      	ble.n	8000746 <AskModem_Demodulate_OOK+0xfe>
 8000730:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000734:	edd7 7a05 	vldr	s15, [r7, #20]
 8000738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000740:	d501      	bpl.n	8000746 <AskModem_Demodulate_OOK+0xfe>
            synced = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (!synced && AskRingBuffer_Available(inbuf) >= 2 * N) {
 8000746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000748:	2b00      	cmp	r3, #0
 800074a:	d147      	bne.n	80007dc <AskModem_Demodulate_OOK+0x194>
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f96d 	bl	8000a2c <AskRingBuffer_Available>
 8000752:	4602      	mov	r2, r0
 8000754:	8b3b      	ldrh	r3, [r7, #24]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	429a      	cmp	r2, r3
 800075a:	d290      	bcs.n	800067e <AskModem_Demodulate_OOK+0x36>
        }
    }

    // Lecture des symboles après synchro
    while (AskRingBuffer_Available(inbuf) >= N && *bit_len < ASK_MAX_BITS) {
 800075c:	e03e      	b.n	80007dc <AskModem_Demodulate_OOK+0x194>
        float energy = 0.0f;
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < N; ++i) {
 8000764:	2300      	movs	r3, #0
 8000766:	837b      	strh	r3, [r7, #26]
 8000768:	e012      	b.n	8000790 <AskModem_Demodulate_OOK+0x148>
            energy += fabsf((float)AskRingBuffer_Get(inbuf));
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f92c 	bl	80009c8 <AskRingBuffer_Get>
 8000770:	4603      	mov	r3, r0
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077a:	eef0 7ae7 	vabs.f32	s15, s15
 800077e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000786:	edc7 7a07 	vstr	s15, [r7, #28]
        for (uint16_t i = 0; i < N; ++i) {
 800078a:	8b7b      	ldrh	r3, [r7, #26]
 800078c:	3301      	adds	r3, #1
 800078e:	837b      	strh	r3, [r7, #26]
 8000790:	8b7a      	ldrh	r2, [r7, #26]
 8000792:	8b3b      	ldrh	r3, [r7, #24]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3e8      	bcc.n	800076a <AskModem_Demodulate_OOK+0x122>
        }

        float avg = energy / N;
 8000798:	8b3b      	ldrh	r3, [r7, #24]
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80007a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007aa:	edc7 7a04 	vstr	s15, [r7, #16]
        bits_out[(*bit_len)++] = (avg > threshold) ? 1 : 0;
 80007ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80007b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007be:	bfcc      	ite	gt
 80007c0:	2301      	movgt	r3, #1
 80007c2:	2300      	movle	r3, #0
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	b290      	uxth	r0, r2
 80007ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007d0:	8010      	strh	r0, [r2, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	460a      	mov	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
    while (AskRingBuffer_Available(inbuf) >= N && *bit_len < ASK_MAX_BITS) {
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f925 	bl	8000a2c <AskRingBuffer_Available>
 80007e2:	4602      	mov	r2, r0
 80007e4:	8b3b      	ldrh	r3, [r7, #24]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d305      	bcc.n	80007f6 <AskModem_Demodulate_OOK+0x1ae>
 80007ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	d9b5      	bls.n	800075e <AskModem_Demodulate_OOK+0x116>
 80007f2:	e000      	b.n	80007f6 <AskModem_Demodulate_OOK+0x1ae>
        return;
 80007f4:	bf00      	nop
    }
}
 80007f6:	3730      	adds	r7, #48	@ 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	44e10000 	.word	0x44e10000

08000800 <SignalDetected>:
    }

    return (energy > threshold) ? 1 : 0;
}*/

uint8_t SignalDetected(AskRingBuffer* buf, uint32_t threshold) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    uint32_t energy = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    if (AskRingBuffer_Available(buf) < 64) return 0;
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f90c 	bl	8000a2c <AskRingBuffer_Available>
 8000814:	4603      	mov	r3, r0
 8000816:	2b3f      	cmp	r3, #63	@ 0x3f
 8000818:	d801      	bhi.n	800081e <SignalDetected+0x1e>
 800081a:	2300      	movs	r3, #0
 800081c:	e047      	b.n	80008ae <SignalDetected+0xae>

    // On fait une copie temporaire du tail et on lit sans consommer
    uint16_t original_tail = buf->tail;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000824:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000828:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < 64; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	e02e      	b.n	800088e <SignalDetected+0x8e>
        int16_t s = buf->buf[buf->tail];
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000836:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000840:	81bb      	strh	r3, [r7, #12]
        buf->tail = (buf->tail + 1) % ASK_RINGBUF_SIZE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000848:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <SignalDetected+0xb8>)
 8000850:	fba3 1302 	umull	r1, r3, r3, r2
 8000854:	0adb      	lsrs	r3, r3, #11
 8000856:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800085a:	fb01 f303 	mul.w	r3, r1, r3
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000866:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

        int16_t centered = s - 2048;
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000870:	b29b      	uxth	r3, r3
 8000872:	817b      	strh	r3, [r7, #10]
        energy += abs(centered);
 8000874:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000878:	2b00      	cmp	r3, #0
 800087a:	bfb8      	it	lt
 800087c:	425b      	neglt	r3, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 64; i++) {
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	3301      	adds	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b3f      	cmp	r3, #63	@ 0x3f
 8000892:	ddcd      	ble.n	8000830 <SignalDetected+0x30>
    }

    buf->tail = original_tail;  // restore l'état initial (non destructif)
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800089c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

    return (energy > threshold) ? 1 : 0;
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	bf8c      	ite	hi
 80008a8:	2301      	movhi	r3, #1
 80008aa:	2300      	movls	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	51eb851f 	.word	0x51eb851f

080008bc <AskRingBuffer_Init>:

void AskRingBuffer_Init(AskRingBuffer* rb) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    rb->head = rb->tail = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80008cc:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80008d6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <AskRingBuffer_IsFull>:

uint8_t AskRingBuffer_IsFull(const AskRingBuffer* rb) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    return ((rb->head + 1) % ASK_RINGBUF_SIZE) == rb->tail;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80008f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <AskRingBuffer_IsFull+0x48>)
 80008fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000902:	0adb      	lsrs	r3, r3, #11
 8000904:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000908:	fb01 f303 	mul.w	r3, r1, r3
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000914:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8000918:	4293      	cmp	r3, r2
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	51eb851f 	.word	0x51eb851f

08000934 <AskRingBuffer_IsEmpty>:

uint8_t AskRingBuffer_IsEmpty(const AskRingBuffer* rb) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    return rb->head == rb->tail;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000942:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800094c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000950:	429a      	cmp	r2, r3
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <AskRingBuffer_Put>:

void AskRingBuffer_Put(AskRingBuffer* rb, int16_t value) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
    if (!AskRingBuffer_IsFull(rb)) {
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffb7 	bl	80008e8 <AskRingBuffer_IsFull>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11c      	bne.n	80009ba <AskRingBuffer_Put+0x52>
        rb->buf[rb->head] = value;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000986:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	8879      	ldrh	r1, [r7, #2]
 800098e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        rb->head = (rb->head + 1) % ASK_RINGBUF_SIZE;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000998:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <AskRingBuffer_Put+0x5c>)
 80009a0:	fba3 1302 	umull	r1, r3, r3, r2
 80009a4:	0adb      	lsrs	r3, r3, #11
 80009a6:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80009b6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    }
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	51eb851f 	.word	0x51eb851f

080009c8 <AskRingBuffer_Get>:

int16_t AskRingBuffer_Get(AskRingBuffer* rb) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
    int16_t val = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	81fb      	strh	r3, [r7, #14]
    if (!AskRingBuffer_IsEmpty(rb)) {
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffad 	bl	8000934 <AskRingBuffer_IsEmpty>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d11c      	bne.n	8000a1a <AskRingBuffer_Get+0x52>
        val = rb->buf[rb->tail];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80009e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009f0:	81fb      	strh	r3, [r7, #14]
        rb->tail = (rb->tail + 1) % ASK_RINGBUF_SIZE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80009f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <AskRingBuffer_Get+0x60>)
 8000a00:	fba3 1302 	umull	r1, r3, r3, r2
 8000a04:	0adb      	lsrs	r3, r3, #11
 8000a06:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000a16:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    }
    return val;
 8000a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	51eb851f 	.word	0x51eb851f

08000a2c <AskRingBuffer_Available>:

uint32_t AskRingBuffer_Available(const AskRingBuffer* rb) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    if (rb->head >= rb->tail)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d30b      	bcc.n	8000a64 <AskRingBuffer_Available+0x38>
        return rb->head - rb->tail;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a52:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	e00c      	b.n	8000a7e <AskRingBuffer_Available+0x52>
    else
        return ASK_RINGBUF_SIZE - (rb->tail - rb->head);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000a74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	f503 53c8 	add.w	r3, r3, #6400	@ 0x1900
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <MCP4922_Select>:
static IQTransmitter iq_tx;

#define MCP4922_CS_GPIO GPIOA
#define MCP4922_CS_PIN GPIO_PIN_4

static void MCP4922_Select(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <MCP4922_Select+0x14>)
 8000a96:	f002 fe9f 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <MCP4922_Unselect>:

static void MCP4922_Unselect(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP4922_CS_GPIO, MCP4922_CS_PIN, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2110      	movs	r1, #16
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <MCP4922_Unselect+0x14>)
 8000aae:	f002 fe93 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40020000 	.word	0x40020000

08000abc <MCP4922_Pack>:

static uint16_t MCP4922_Pack(uint8_t channel, uint16_t val12) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	80bb      	strh	r3, [r7, #4]
    val12 &= 0x0FFF; // 12 bits
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ad2:	80bb      	strh	r3, [r7, #4]
    uint16_t ctrl = (channel ? 0xB000 : 0x3000);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <MCP4922_Pack+0x24>
 8000ada:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000ade:	e001      	b.n	8000ae4 <MCP4922_Pack+0x28>
 8000ae0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ae4:	81fb      	strh	r3, [r7, #14]
    return ctrl | val12;
 8000ae6:	89fa      	ldrh	r2, [r7, #14]
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b29b      	uxth	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <IQTransmitter_InitFromBuffer>:

void IQTransmitter_InitFromBuffer(const int16_t* signal, uint16_t length) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
    iq_tx.buffer = signal;
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <IQTransmitter_InitFromBuffer+0x30>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
    iq_tx.length = length;
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <IQTransmitter_InitFromBuffer+0x30>)
 8000b12:	6053      	str	r3, [r2, #4]
    iq_tx.index = 0;
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <IQTransmitter_InitFromBuffer+0x30>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    iq_tx.active = 0;
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <IQTransmitter_InitFromBuffer+0x30>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	731a      	strb	r2, [r3, #12]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	2000002c 	.word	0x2000002c

08000b30 <IQTransmitter_Start>:

void IQTransmitter_Start(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    iq_tx.active = 1;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <IQTransmitter_Start+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	731a      	strb	r2, [r3, #12]
    iq_tx.index = 0;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <IQTransmitter_Start+0x1c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    HAL_TIM_Base_Start_IT(&htim2);
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <IQTransmitter_Start+0x20>)
 8000b42:	f003 fe69 	bl	8004818 <HAL_TIM_Base_Start_IT>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000002c 	.word	0x2000002c
 8000b50:	2000019c 	.word	0x2000019c

08000b54 <IQTransmitter_Stop>:

void IQTransmitter_Stop(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
    iq_tx.active = 0;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <IQTransmitter_Stop+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]
    HAL_TIM_Base_Stop_IT(&htim2);
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <IQTransmitter_Stop+0x50>)
 8000b62:	f003 febb 	bl	80048dc <HAL_TIM_Base_Stop_IT>

    uint16_t spi_word = MCP4922_Pack(0, 0);
 8000b66:	2100      	movs	r1, #0
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff ffa7 	bl	8000abc <MCP4922_Pack>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
    uint8_t spi_buf[2] = { (spi_word >> 8) & 0xFF, spi_word & 0xFF };
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	713b      	strb	r3, [r7, #4]
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	717b      	strb	r3, [r7, #5]

    MCP4922_Select();
 8000b82:	f7ff ff83 	bl	8000a8c <MCP4922_Select>
    HAL_SPI_Transmit(&hspi1, spi_buf, 2, HAL_MAX_DELAY);
 8000b86:	1d39      	adds	r1, r7, #4
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <IQTransmitter_Stop+0x54>)
 8000b90:	f003 fb77 	bl	8004282 <HAL_SPI_Transmit>
    MCP4922_Unselect();
 8000b94:	f7ff ff86 	bl	8000aa4 <MCP4922_Unselect>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	2000019c 	.word	0x2000019c
 8000ba8:	200000e4 	.word	0x200000e4

08000bac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && iq_tx.active) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d12d      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bc0:	7b1b      	ldrb	r3, [r3, #12]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d028      	beq.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x6e>
        if (iq_tx.index < iq_tx.length) {
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d220      	bcs.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x6a>
            int16_t sample = iq_tx.buffer[iq_tx.index++];
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000be0:	6081      	str	r1, [r0, #8]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	81fb      	strh	r3, [r7, #14]
            uint16_t val = (uint16_t)sample;
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	81bb      	strh	r3, [r7, #12]
            uint16_t spi_word = MCP4922_Pack(0, val);
 8000bee:	89bb      	ldrh	r3, [r7, #12]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff ff62 	bl	8000abc <MCP4922_Pack>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	817b      	strh	r3, [r7, #10]

            MCP4922_Select();
 8000bfc:	f7ff ff46 	bl	8000a8c <MCP4922_Select>
            HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_word, sizeof(spi_word), HAL_MAX_DELAY);
 8000c00:	f107 010a 	add.w	r1, r7, #10
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c0c:	f003 fb39 	bl	8004282 <HAL_SPI_Transmit>
            MCP4922_Unselect();
 8000c10:	f7ff ff48 	bl	8000aa4 <MCP4922_Unselect>
        } else {
            IQTransmitter_Stop();
        }
    }
}
 8000c14:	e001      	b.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x6e>
            IQTransmitter_Stop();
 8000c16:	f7ff ff9d 	bl	8000b54 <IQTransmitter_Stop>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000002c 	.word	0x2000002c
 8000c28:	200000e4 	.word	0x200000e4

08000c2c <IQTransmitter_IsActive>:
void Enable_TIM2_Interrupt(void) {
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

uint8_t IQTransmitter_IsActive(void) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    return iq_tx.active;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <IQTransmitter_IsActive+0x14>)
 8000c32:	7b1b      	ldrb	r3, [r3, #12]
 8000c34:	b2db      	uxtb	r3, r3
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	2000002c 	.word	0x2000002c

08000c44 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile uint8_t adc_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d102      	bne.n	8000c5c <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_ADC_ConvCpltCallback+0x28>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
    }
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40012000 	.word	0x40012000
 8000c6c:	2000b898 	.word	0x2000b898

08000c70 <OnFrameReceived>:


void OnFrameReceived(UartProtocol* proto, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	817b      	strh	r3, [r7, #10]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	813b      	strh	r3, [r7, #8]
    if (cmd == CMD_QPSK_MOD_DEMOD) {
 8000c82:	897b      	ldrh	r3, [r7, #10]
 8000c84:	f241 0210 	movw	r2, #4112	@ 0x1010
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d142      	bne.n	8000d12 <OnFrameReceived+0xa2>
        AskRingBuffer_Init(&tx_ringbuf);
 8000c8c:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <OnFrameReceived+0xac>)
 8000c8e:	f7ff fe15 	bl	80008bc <AskRingBuffer_Init>
        AskRingBuffer_Init(&rx_ringbuf);
 8000c92:	4823      	ldr	r0, [pc, #140]	@ (8000d20 <OnFrameReceived+0xb0>)
 8000c94:	f7ff fe12 	bl	80008bc <AskRingBuffer_Init>
        AskModem_Init(&ask_modem, samples_per_symbol, 40000.0f, SAMPLE_RATE_HZ);
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <OnFrameReceived+0xb4>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8000d28 <OnFrameReceived+0xb8>
 8000ca0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000d2c <OnFrameReceived+0xbc>
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4822      	ldr	r0, [pc, #136]	@ (8000d30 <OnFrameReceived+0xc0>)
 8000ca8:	f7ff fc2c 	bl	8000504 <AskModem_Init>
        //AskModem_Modulate(&huart2, &ask_modem, payload, len, &tx_ringbuf, 1.0f);
        AskModem_Modulate_OOK(&huart2, &ask_modem, payload, len, &tx_ringbuf, 3.3f);
 8000cac:	893b      	ldrh	r3, [r7, #8]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <OnFrameReceived+0xac>)
 8000cb0:	9200      	str	r2, [sp, #0]
 8000cb2:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8000d34 <OnFrameReceived+0xc4>
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	491d      	ldr	r1, [pc, #116]	@ (8000d30 <OnFrameReceived+0xc0>)
 8000cba:	481f      	ldr	r0, [pc, #124]	@ (8000d38 <OnFrameReceived+0xc8>)
 8000cbc:	f7ff fc3c 	bl	8000538 <AskModem_Modulate_OOK>

        tx_signal_len = 0;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <OnFrameReceived+0xcc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 8000cc6:	e00e      	b.n	8000ce6 <OnFrameReceived+0x76>
            tx_signal[tx_signal_len++] = AskRingBuffer_Get(&tx_ringbuf);
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <OnFrameReceived+0xcc>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	b291      	uxth	r1, r2
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <OnFrameReceived+0xcc>)
 8000cd2:	8011      	strh	r1, [r2, #0]
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <OnFrameReceived+0xac>)
 8000cd8:	f7ff fe76 	bl	80009c8 <AskRingBuffer_Get>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <OnFrameReceived+0xd0>)
 8000ce2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        while (!AskRingBuffer_IsEmpty(&tx_ringbuf) && tx_signal_len < ASK_RINGBUF_SIZE) {
 8000ce6:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <OnFrameReceived+0xac>)
 8000ce8:	f7ff fe24 	bl	8000934 <AskRingBuffer_IsEmpty>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d104      	bne.n	8000cfc <OnFrameReceived+0x8c>
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <OnFrameReceived+0xcc>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8000cfa:	d3e5      	bcc.n	8000cc8 <OnFrameReceived+0x58>
        }

        IQTransmitter_InitFromBuffer(tx_signal, tx_signal_len);
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <OnFrameReceived+0xcc>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <OnFrameReceived+0xd0>)
 8000d04:	f7ff fefa 	bl	8000afc <IQTransmitter_InitFromBuffer>
        //Afficher le signal sur l'interface pour debug
        /*for (int i = 0; i < tx_signal_len; i++) {
            SendIQFrame(&huart2, tx_signal[i], i);
        }*/
        IQTransmitter_Start();
 8000d08:	f7ff ff12 	bl	8000b30 <IQTransmitter_Start>


        // On laisse le main() gérer la suite
        ready_to_demodulate = 1;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <OnFrameReceived+0xd4>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
    }
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20005488 	.word	0x20005488
 8000d20:	20008690 	.word	0x20008690
 8000d24:	20000000 	.word	0x20000000
 8000d28:	47c35000 	.word	0x47c35000
 8000d2c:	471c4000 	.word	0x471c4000
 8000d30:	2000547c 	.word	0x2000547c
 8000d34:	40533333 	.word	0x40533333
 8000d38:	2000022c 	.word	0x2000022c
 8000d3c:	20005478 	.word	0x20005478
 8000d40:	20002278 	.word	0x20002278
 8000d44:	20002274 	.word	0x20002274

08000d48 <WaitForRisingEdge>:


uint8_t WaitForRisingEdge(ADC_HandleTypeDef* hadc, uint16_t low_thresh, uint16_t high_thresh, uint32_t timeout_ms) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	817b      	strh	r3, [r7, #10]
 8000d56:	4613      	mov	r3, r2
 8000d58:	813b      	strh	r3, [r7, #8]
    uint32_t start = HAL_GetTick();
 8000d5a:	f001 f867 	bl	8001e2c <HAL_GetTick>
 8000d5e:	61b8      	str	r0, [r7, #24]
    uint8_t was_low = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77fb      	strb	r3, [r7, #31]

    while ((HAL_GetTick() - start) < timeout_ms) {
 8000d64:	e023      	b.n	8000dae <WaitForRisingEdge+0x66>
        HAL_ADC_Start(hadc);
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f001 f8d4 	bl	8001f14 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc, 5); // court timeout
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f001 f9b7 	bl	80020e2 <HAL_ADC_PollForConversion>
        uint16_t val = HAL_ADC_GetValue(hadc);
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f001 fc43 	bl	8002600 <HAL_ADC_GetValue>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	82fb      	strh	r3, [r7, #22]
        HAL_ADC_Stop(hadc);
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f001 f97c 	bl	800207c <HAL_ADC_Stop>

        if (!was_low && val < low_thresh) {
 8000d84:	7ffb      	ldrb	r3, [r7, #31]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <WaitForRisingEdge+0x4e>
 8000d8a:	8afa      	ldrh	r2, [r7, #22]
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d201      	bcs.n	8000d96 <WaitForRisingEdge+0x4e>
            was_low = 1;  // On a vu un "niveau bas"
 8000d92:	2301      	movs	r3, #1
 8000d94:	77fb      	strb	r3, [r7, #31]
        }

        if (was_low && val > high_thresh) {
 8000d96:	7ffb      	ldrb	r3, [r7, #31]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <WaitForRisingEdge+0x60>
 8000d9c:	8afa      	ldrh	r2, [r7, #22]
 8000d9e:	893b      	ldrh	r3, [r7, #8]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d901      	bls.n	8000da8 <WaitForRisingEdge+0x60>
            return 1;  // Front montant détecté
 8000da4:	2301      	movs	r3, #1
 8000da6:	e00b      	b.n	8000dc0 <WaitForRisingEdge+0x78>
        }

        HAL_Delay(1); // pour éviter de trop bloquer CPU
 8000da8:	2001      	movs	r0, #1
 8000daa:	f001 f84b 	bl	8001e44 <HAL_Delay>
    while ((HAL_GetTick() - start) < timeout_ms) {
 8000dae:	f001 f83d 	bl	8001e2c <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d8d3      	bhi.n	8000d66 <WaitForRisingEdge+0x1e>
    }

    return 0; // Timeout sans front montant
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0d8      	sub	sp, #352	@ 0x160
 8000dcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 ffc7 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f93f 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 fb1d 	bl	8001414 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dda:	f000 faf3 	bl	80013c4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000dde:	f000 fa2d 	bl	800123c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 fac5 	bl	8001370 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000de6:	f000 f9f1 	bl	80011cc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000dea:	f000 f99d 	bl	8001128 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dee:	f000 fa71 	bl	80012d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UartProtocol_Init(&proto, OnFrameReceived);
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	498e      	ldr	r1, [pc, #568]	@ (8001030 <main+0x268>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fdda 	bl	80019b2 <UartProtocol_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t c;

  // Démarrage du Timer (doit être fait avant l’ADC)
  HAL_TIM_Base_Start(&htim3);
 8000dfe:	488d      	ldr	r0, [pc, #564]	@ (8001034 <main+0x26c>)
 8000e00:	f003 fcb0 	bl	8004764 <HAL_TIM_Base_Start>

  while (1)
  {
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8000e04:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8000e08:	230a      	movs	r3, #10
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	488a      	ldr	r0, [pc, #552]	@ (8001038 <main+0x270>)
 8000e0e:	f004 f9f0 	bl	80051f2 <HAL_UART_Receive>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <main+0x66>
          UartProtocol_ParseByte(&proto, c);
 8000e18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e1c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fde3 	bl	80019f4 <UartProtocol_ParseByte>
      }

      if (ready_to_demodulate && !IQTransmitter_IsActive()) {
 8000e2e:	4b83      	ldr	r3, [pc, #524]	@ (800103c <main+0x274>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0e5      	beq.n	8000e04 <main+0x3c>
 8000e38:	f7ff fef8 	bl	8000c2c <IQTransmitter_IsActive>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1e0      	bne.n	8000e04 <main+0x3c>
          ready_to_demodulate = 0;
 8000e42:	4b7e      	ldr	r3, [pc, #504]	@ (800103c <main+0x274>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]

          // ATTENDRE LE FRONT MONTANT AVANT DE DEMARRER DMA
          if (!WaitForRisingEdge(&hadc1, 500, 3000, 100)) {
 8000e48:	2364      	movs	r3, #100	@ 0x64
 8000e4a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000e4e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e52:	487b      	ldr	r0, [pc, #492]	@ (8001040 <main+0x278>)
 8000e54:	f7ff ff78 	bl	8000d48 <WaitForRisingEdge>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80e6 	beq.w	800102c <main+0x264>
              // Pas de front détecté dans le délai -> abandon
              continue;
          }

          adc_ready = 0;
 8000e60:	4b78      	ldr	r3, [pc, #480]	@ (8001044 <main+0x27c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
          HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN);
 8000e66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e6a:	4977      	ldr	r1, [pc, #476]	@ (8001048 <main+0x280>)
 8000e6c:	4874      	ldr	r0, [pc, #464]	@ (8001040 <main+0x278>)
 8000e6e:	f001 fad3 	bl	8002418 <HAL_ADC_Start_DMA>

          while (!adc_ready) {
 8000e72:	e002      	b.n	8000e7a <main+0xb2>
              HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 ffe5 	bl	8001e44 <HAL_Delay>
          while (!adc_ready) {
 8000e7a:	4b72      	ldr	r3, [pc, #456]	@ (8001044 <main+0x27c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f7      	beq.n	8000e74 <main+0xac>
          }

          AskRingBuffer_Init(&rx_ringbuf);
 8000e84:	4871      	ldr	r0, [pc, #452]	@ (800104c <main+0x284>)
 8000e86:	f7ff fd19 	bl	80008bc <AskRingBuffer_Init>
          int32_t sum = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
 8000e96:	e00f      	b.n	8000eb8 <main+0xf0>
              sum += adc_buffer[i];
 8000e98:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001048 <main+0x280>)
 8000e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000eae:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
 8000eb8:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8000ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ec0:	d3ea      	bcc.n	8000e98 <main+0xd0>
          }

          int16_t offset = sum / ADC_BUF_LEN;
 8000ec2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da01      	bge.n	8000ece <main+0x106>
 8000eca:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000ece:	131b      	asrs	r3, r3, #12
 8000ed0:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148

          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
 8000eda:	e016      	b.n	8000f0a <main+0x142>
              //int16_t centered = adc_buffer[i] - offset;
        	  int32_t centered = (int32_t)adc_buffer[i] - (int32_t)offset;
 8000edc:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8000ee0:	4a59      	ldr	r2, [pc, #356]	@ (8001048 <main+0x280>)
 8000ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f9b7 3148 	ldrsh.w	r3, [r7, #328]	@ 0x148
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
              AskRingBuffer_Put(&rx_ringbuf, centered);
 8000ef2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4854      	ldr	r0, [pc, #336]	@ (800104c <main+0x284>)
 8000efc:	f7ff fd34 	bl	8000968 <AskRingBuffer_Put>
          for (uint16_t i = 0; i < ADC_BUF_LEN; ++i) {
 8000f00:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8000f04:	3301      	adds	r3, #1
 8000f06:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
 8000f0a:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8000f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f12:	d3e3      	bcc.n	8000edc <main+0x114>
          }

          if (SignalDetected(&rx_ringbuf, 50000)) {
 8000f14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000f18:	484c      	ldr	r0, [pc, #304]	@ (800104c <main+0x284>)
 8000f1a:	f7ff fc71 	bl	8000800 <SignalDetected>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f43f af6f 	beq.w	8000e04 <main+0x3c>
              // Signal trouvé implique lancer la vraie démodulation
              uint8_t bits_out[ASK_MAX_BITS];
              uint16_t len_out = 0;
 8000f26:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000f2e:	2200      	movs	r2, #0
 8000f30:	801a      	strh	r2, [r3, #0]
              //AskModem_Demodulate(&huart2, &ask_modem, &rx_ringbuf, bits_out, &len_out);
              AskModem_Demodulate_OOK(&huart2, &ask_modem, &rx_ringbuf, bits_out, &len_out);
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	4a43      	ldr	r2, [pc, #268]	@ (800104c <main+0x284>)
 8000f3e:	4944      	ldr	r1, [pc, #272]	@ (8001050 <main+0x288>)
 8000f40:	483d      	ldr	r0, [pc, #244]	@ (8001038 <main+0x270>)
 8000f42:	f7ff fb81 	bl	8000648 <AskModem_Demodulate_OOK>

              uint8_t decoded_chars[ASK_MAX_BITS / 8] = {0};
 8000f46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
              uint16_t num_chars = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e

              const uint16_t payload_start = 2;  // skip les bits du préambule
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
              uint16_t usable_bits = len_out - payload_start;
 8000f5e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
              uint16_t usable_bytes = usable_bits / 8;
 8000f72:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142

              for (uint16_t i = 0; i < usable_bytes && num_chars < (ASK_MAX_BITS / 8); i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
 8000f82:	e03f      	b.n	8001004 <main+0x23c>
                  uint8_t byte = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
                  for (uint8_t b = 0; b < 8; b++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 314a 	strb.w	r3, [r7, #330]	@ 0x14a
 8000f90:	e022      	b.n	8000fd8 <main+0x210>
                      uint16_t idx = payload_start + i * 8 + b;
 8000f92:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
                      byte = (byte << 1) | bits_out[idx];
 8000fae:	f997 314b 	ldrsb.w	r3, [r7, #331]	@ 0x14b
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8000fba:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8000fbe:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 8000fc2:	5ccb      	ldrb	r3, [r1, r3]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
                  for (uint8_t b = 0; b < 8; b++) {
 8000fce:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f887 314a 	strb.w	r3, [r7, #330]	@ 0x14a
 8000fd8:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d9d8      	bls.n	8000f92 <main+0x1ca>
                  }
                  decoded_chars[num_chars++] = byte;
 8000fe0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	f8a7 214e 	strh.w	r2, [r7, #334]	@ 0x14e
 8000fea:	4619      	mov	r1, r3
 8000fec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ff0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ff4:	f897 214b 	ldrb.w	r2, [r7, #331]	@ 0x14b
 8000ff8:	545a      	strb	r2, [r3, r1]
              for (uint16_t i = 0; i < usable_bytes && num_chars < (ASK_MAX_BITS / 8); i++) {
 8000ffa:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
 8001004:	f8b7 214c 	ldrh.w	r2, [r7, #332]	@ 0x14c
 8001008:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800100c:	429a      	cmp	r2, r3
 800100e:	d203      	bcs.n	8001018 <main+0x250>
 8001010:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8001014:	2b03      	cmp	r3, #3
 8001016:	d9b5      	bls.n	8000f84 <main+0x1bc>
              }

			  // Envoie à l'interface PC
			  UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, num_chars, decoded_chars);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8001020:	f249 0110 	movw	r1, #36880	@ 0x9010
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <main+0x270>)
 8001026:	f000 fdad 	bl	8001b84 <UartProtocol_SendFrame>
 800102a:	e6eb      	b.n	8000e04 <main+0x3c>
              continue;
 800102c:	bf00      	nop
      if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 800102e:	e6e9      	b.n	8000e04 <main+0x3c>
 8001030:	08000c71 	.word	0x08000c71
 8001034:	200001e4 	.word	0x200001e4
 8001038:	2000022c 	.word	0x2000022c
 800103c:	20002274 	.word	0x20002274
 8001040:	2000003c 	.word	0x2000003c
 8001044:	2000b898 	.word	0x2000b898
 8001048:	20000274 	.word	0x20000274
 800104c:	20008690 	.word	0x20008690
 8001050:	2000547c 	.word	0x2000547c

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	@ 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	@ 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fc8c 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <SystemClock_Config+0xcc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	4a27      	ldr	r2, [pc, #156]	@ (8001120 <SystemClock_Config+0xcc>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	@ 0x40
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <SystemClock_Config+0xcc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <SystemClock_Config+0xd0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <SystemClock_Config+0xd0>)
 800109e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <SystemClock_Config+0xd0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fbb0 	bl	8003840 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010e6:	f000 f9fb 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2102      	movs	r1, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fe12 	bl	8003d30 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001112:	f000 f9e5 	bl	80014e0 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3750      	adds	r7, #80	@ 0x50
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800113c:	4a22      	ldr	r2, [pc, #136]	@ (80011c8 <MX_ADC1_Init+0xa0>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001142:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001146:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001156:	2201      	movs	r2, #1
 8001158:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800116c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800117a:	2201      	movs	r2, #1
 800117c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 8001188:	2201      	movs	r2, #1
 800118a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 800118e:	f000 fe7d 	bl	8001e8c <HAL_ADC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001198:	f000 f9a2 	bl	80014e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_ADC1_Init+0x9c>)
 80011ae:	f001 fa53 	bl	8002658 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011b8:	f000 f992 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000003c 	.word	0x2000003c
 80011c8:	40012000 	.word	0x40012000

080011cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011d2:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <MX_SPI1_Init+0x6c>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_SPI1_Init+0x68>)
 80011fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_SPI1_Init+0x68>)
 8001202:	2210      	movs	r2, #16
 8001204:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_SPI1_Init+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_SPI1_Init+0x68>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_SPI1_Init+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_SPI1_Init+0x68>)
 800121a:	220a      	movs	r2, #10
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_SPI1_Init+0x68>)
 8001220:	f002 ffa6 	bl	8004170 <HAL_SPI_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800122a:	f000 f959 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000e4 	.word	0x200000e4
 8001238:	40013000 	.word	0x40013000

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM2_Init+0x94>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_TIM2_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM2_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (84000000 / SAMPLE_RATE_HZ) - 1;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM2_Init+0x94>)
 800126e:	f240 3247 	movw	r2, #839	@ 0x347
 8001272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_TIM2_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM2_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_TIM2_Init+0x94>)
 8001282:	f003 fa1f 	bl	80046c4 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800128c:	f000 f928 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM2_Init+0x94>)
 800129e:	f003 fc3c 	bl	8004b1a <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a8:	f000 f91a 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ac:	2320      	movs	r3, #32
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM2_Init+0x94>)
 80012ba:	f003 fe3d 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 f90c 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000019c 	.word	0x2000019c

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_TIM3_Init+0x90>)
 80012f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001368 <MX_TIM3_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_TIM3_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <MX_TIM3_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (84000000 / 923) - 1;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_TIM3_Init+0x90>)
 8001304:	4a19      	ldr	r2, [pc, #100]	@ (800136c <MX_TIM3_Init+0x98>)
 8001306:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <MX_TIM3_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_TIM3_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001314:	4813      	ldr	r0, [pc, #76]	@ (8001364 <MX_TIM3_Init+0x90>)
 8001316:	f003 f9d5 	bl	80046c4 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001320:	f000 f8de 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <MX_TIM3_Init+0x90>)
 8001332:	f003 fbf2 	bl	8004b1a <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800133c:	f000 f8d0 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001340:	2320      	movs	r3, #32
 8001342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_TIM3_Init+0x90>)
 800134e:	f003 fdf3 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001358:	f000 f8c2 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001e4 	.word	0x200001e4
 8001368:	40000400 	.word	0x40000400
 800136c:	0001637e 	.word	0x0001637e

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f003 fe48 	bl	800503c <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 f895 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000022c 	.word	0x2000022c
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_DMA_Init+0x4c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <MX_DMA_Init+0x4c>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_DMA_Init+0x4c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2038      	movs	r0, #56	@ 0x38
 80013ec:	f001 fcc9 	bl	8002d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f0:	2038      	movs	r0, #56	@ 0x38
 80013f2:	f001 fce2 	bl	8002dba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	203a      	movs	r0, #58	@ 0x3a
 80013fc:	f001 fcc1 	bl	8002d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001400:	203a      	movs	r0, #58	@ 0x3a
 8001402:	f001 fcda 	bl	8002dba <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001446:	2320      	movs	r3, #32
 8001448:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <MX_GPIO_Init+0xc8>)
 800145e:	f002 f837 	bl	80034d0 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001462:	2340      	movs	r3, #64	@ 0x40
 8001464:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	481b      	ldr	r0, [pc, #108]	@ (80014dc <MX_GPIO_Init+0xc8>)
 800146e:	f002 f82f 	bl	80034d0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_GPIO_Init+0xc4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2110      	movs	r1, #16
 80014ae:	480b      	ldr	r0, [pc, #44]	@ (80014dc <MX_GPIO_Init+0xc8>)
 80014b0:	f002 f992 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b4:	2310      	movs	r3, #16
 80014b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_GPIO_Init+0xc8>)
 80014cc:	f002 f800 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 80014e8:	2120      	movs	r1, #32
 80014ea:	4804      	ldr	r0, [pc, #16]	@ (80014fc <Error_Handler+0x1c>)
 80014ec:	f002 f98d 	bl	800380a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80014f0:	2064      	movs	r0, #100	@ 0x64
 80014f2:	f000 fca7 	bl	8001e44 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink rapide
 80014f6:	bf00      	nop
 80014f8:	e7f6      	b.n	80014e8 <Error_Handler+0x8>
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a33      	ldr	r2, [pc, #204]	@ (800163c <HAL_ADC_MspInit+0xec>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d160      	bne.n	8001634 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a31      	ldr	r2, [pc, #196]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <HAL_ADC_MspInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4821      	ldr	r0, [pc, #132]	@ (8001644 <HAL_ADC_MspInit+0xf4>)
 80015be:	f001 ff87 	bl	80034d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <HAL_ADC_MspInit+0xfc>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e2:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015fa:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 80015fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001600:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001608:	480f      	ldr	r0, [pc, #60]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 800160a:	f001 fbf1 	bl	8002df0 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001614:	f7ff ff64 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 800161c:	639a      	str	r2, [r3, #56]	@ 0x38
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_ADC_MspInit+0xf8>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2012      	movs	r0, #18
 800162a:	f001 fbaa 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800162e:	2012      	movs	r0, #18
 8001630:	f001 fbc3 	bl	8002dba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40012000 	.word	0x40012000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	20000084 	.word	0x20000084
 800164c:	40026410 	.word	0x40026410

08001650 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a31      	ldr	r2, [pc, #196]	@ (8001734 <HAL_SPI_MspInit+0xe4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d15c      	bne.n	800172c <HAL_SPI_MspInit+0xdc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a28      	ldr	r2, [pc, #160]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <HAL_SPI_MspInit+0xe8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016aa:	23a0      	movs	r3, #160	@ 0xa0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ba:	2305      	movs	r3, #5
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	481d      	ldr	r0, [pc, #116]	@ (800173c <HAL_SPI_MspInit+0xec>)
 80016c6:	f001 ff03 	bl	80034d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_SPI_MspInit+0xf4>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 8001704:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001708:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001710:	480b      	ldr	r0, [pc, #44]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 8001712:	f001 fb6d 	bl	8002df0 <HAL_DMA_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 800171c:	f7ff fee0 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 8001724:	649a      	str	r2, [r3, #72]	@ 0x48
 8001726:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_SPI_MspInit+0xf0>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013000 	.word	0x40013000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000
 8001740:	2000013c 	.word	0x2000013c
 8001744:	40026440 	.word	0x40026440

08001748 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001758:	d116      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	201c      	movs	r0, #28
 800177c:	f001 fb01 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001780:	201c      	movs	r0, #28
 8001782:	f001 fb1a 	bl	8002dba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001786:	e012      	b.n	80017ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_TIM_Base_MspInit+0x74>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10d      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40000400 	.word	0x40000400

080017c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_UART_MspInit+0x84>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_UART_MspInit+0x88>)
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_UART_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_UART_MspInit+0x88>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_UART_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800181a:	230c      	movs	r3, #12
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182a:	2307      	movs	r3, #7
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <HAL_UART_MspInit+0x8c>)
 8001836:	f001 fe4b 	bl	80034d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40004400 	.word	0x40004400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 faad 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <ADC_IRQHandler+0x10>)
 80018b6:	f000 fc9f 	bl	80021f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000003c 	.word	0x2000003c

080018c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM2_IRQHandler+0x10>)
 80018ca:	f003 f836 	bl	800493a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000019c 	.word	0x2000019c

080018d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x10>)
 80018de:	f001 fb8d 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000084 	.word	0x20000084

080018ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <DMA2_Stream2_IRQHandler+0x10>)
 80018f2:	f001 fb83 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000013c 	.word	0x2000013c

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <CalcChecksum>:
#include "uart_protocol.h"
#include "stm32f4xx_hal.h"
#include "CMD.h"
#include <ctype.h>

static uint8_t CalcChecksum(uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	603a      	str	r2, [r7, #0]
 800192e:	80fb      	strh	r3, [r7, #6]
 8001930:	460b      	mov	r3, r1
 8001932:	80bb      	strh	r3, [r7, #4]
    uint8_t cs = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
    cs ^= 0xFE;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	43db      	mvns	r3, r3
 8001940:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 8) & 0xFF;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b25a      	sxtb	r2, r3
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4053      	eors	r3, r2
 8001950:	b25b      	sxtb	r3, r3
 8001952:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 0) & 0xFF;
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b25a      	sxtb	r2, r3
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4053      	eors	r3, r2
 800195e:	b25b      	sxtb	r3, r3
 8001960:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 8) & 0xFF;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29b      	uxth	r3, r3
 8001968:	b25a      	sxtb	r2, r3
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4053      	eors	r3, r2
 8001970:	b25b      	sxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 0) & 0xFF;
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	b25a      	sxtb	r2, r3
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	4053      	eors	r3, r2
 800197e:	b25b      	sxtb	r3, r3
 8001980:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	81bb      	strh	r3, [r7, #12]
 8001986:	e009      	b.n	800199c <CalcChecksum+0x78>
        cs ^= payload[i];
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	4053      	eors	r3, r2
 8001994:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001996:	89bb      	ldrh	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	81bb      	strh	r3, [r7, #12]
 800199c:	89ba      	ldrh	r2, [r7, #12]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3f1      	bcc.n	8001988 <CalcChecksum+0x64>
    }
    return cs;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <UartProtocol_Init>:

void UartProtocol_Init(UartProtocol* proto, FrameReceivedCallback cb) {
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
    proto->rx_state = WAIT_SOF;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
    proto->rx_cmd = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	805a      	strh	r2, [r3, #2]
    proto->rx_len = 0;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	809a      	strh	r2, [r3, #4]
    proto->rx_payload_idx = 0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	80da      	strh	r2, [r3, #6]
    proto->rx_checksum = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	721a      	strb	r2, [r3, #8]
    proto->rx_calc_checksum = 0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	725a      	strb	r2, [r3, #9]
    proto->onFrameReceived = cb;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <UartProtocol_ParseByte>:

void UartProtocol_ParseByte(UartProtocol* proto, uint8_t c) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
    switch(proto->rx_state) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	f200 80b1 	bhi.w	8001b6c <UartProtocol_ParseByte+0x178>
 8001a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <UartProtocol_ParseByte+0x1c>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a2d 	.word	0x08001a2d
 8001a14:	08001a43 	.word	0x08001a43
 8001a18:	08001a65 	.word	0x08001a65
 8001a1c:	08001a8b 	.word	0x08001a8b
 8001a20:	08001aad 	.word	0x08001aad
 8001a24:	08001afb 	.word	0x08001afb
 8001a28:	08001b33 	.word	0x08001b33
        case WAIT_SOF:
            if (c == 0xFE) {
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a30:	f040 80a0 	bne.w	8001b74 <UartProtocol_ParseByte+0x180>
                proto->rx_state = READ_CMD_MSB;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
                proto->rx_calc_checksum = 0xFE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	22fe      	movs	r2, #254	@ 0xfe
 8001a3e:	725a      	strb	r2, [r3, #9]
            }
            break;
 8001a40:	e098      	b.n	8001b74 <UartProtocol_ParseByte+0x180>
        case READ_CMD_MSB:
            proto->rx_cmd = ((uint16_t)c) << 8;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7a5a      	ldrb	r2, [r3, #9]
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	4053      	eors	r3, r2
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_CMD_LSB;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]
            break;
 8001a62:	e08a      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
        case READ_CMD_LSB:
            proto->rx_cmd |= c;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	885a      	ldrh	r2, [r3, #2]
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7a5a      	ldrb	r2, [r3, #9]
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	4053      	eors	r3, r2
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_MSB;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	701a      	strb	r2, [r3, #0]
            break;
 8001a88:	e077      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
        case READ_LEN_MSB:
            proto->rx_len = ((uint16_t)c) << 8;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a5a      	ldrb	r2, [r3, #9]
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	4053      	eors	r3, r2
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_LSB;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	701a      	strb	r2, [r3, #0]
            break;
 8001aaa:	e066      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
        case READ_LEN_LSB:
            proto->rx_len |= c;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	889a      	ldrh	r2, [r3, #4]
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7a5a      	ldrb	r2, [r3, #9]
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	4053      	eors	r3, r2
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	725a      	strb	r2, [r3, #9]
            if (proto->rx_len > FRAME_MAX_PAYLOAD) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	889b      	ldrh	r3, [r3, #4]
 8001ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad2:	d903      	bls.n	8001adc <UartProtocol_ParseByte+0xe8>
                proto->rx_state = WAIT_SOF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
                proto->rx_state = READ_CHECKSUM;
            } else {
                proto->rx_payload_idx = 0;
                proto->rx_state = READ_PAYLOAD;
            }
            break;
 8001ada:	e04e      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
            } else if (proto->rx_len == 0) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <UartProtocol_ParseByte+0xf8>
                proto->rx_state = READ_CHECKSUM;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2206      	movs	r2, #6
 8001ae8:	701a      	strb	r2, [r3, #0]
            break;
 8001aea:	e046      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
                proto->rx_payload_idx = 0;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	80da      	strh	r2, [r3, #6]
                proto->rx_state = READ_PAYLOAD;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2205      	movs	r2, #5
 8001af6:	701a      	strb	r2, [r3, #0]
            break;
 8001af8:	e03f      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
        case READ_PAYLOAD:
            proto->frame_payload[proto->rx_payload_idx++] = c;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	88db      	ldrh	r3, [r3, #6]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	b291      	uxth	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	80d1      	strh	r1, [r2, #6]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	729a      	strb	r2, [r3, #10]
            proto->rx_calc_checksum ^= c;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7a5a      	ldrb	r2, [r3, #9]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	4053      	eors	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	725a      	strb	r2, [r3, #9]
            if (proto->rx_payload_idx >= proto->rx_len) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	88da      	ldrh	r2, [r3, #6]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	889b      	ldrh	r3, [r3, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d326      	bcc.n	8001b78 <UartProtocol_ParseByte+0x184>
                proto->rx_state = READ_CHECKSUM;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001b30:	e022      	b.n	8001b78 <UartProtocol_ParseByte+0x184>
        case READ_CHECKSUM:
            proto->rx_checksum = c;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	721a      	strb	r2, [r3, #8]
            if (proto->rx_checksum == proto->rx_calc_checksum && proto->onFrameReceived) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7a1a      	ldrb	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7a5b      	ldrb	r3, [r3, #9]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10f      	bne.n	8001b64 <UartProtocol_ParseByte+0x170>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <UartProtocol_ParseByte+0x170>
                proto->onFrameReceived(proto, proto->rx_cmd, proto->rx_len, proto->frame_payload);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 410c 	ldr.w	r4, [r3, #268]	@ 0x10c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8859      	ldrh	r1, [r3, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	889a      	ldrh	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	330a      	adds	r3, #10
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	47a0      	blx	r4
            }
            proto->rx_state = WAIT_SOF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
            break;
 8001b6a:	e006      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
        default:
            proto->rx_state = WAIT_SOF;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
            break;
 8001b72:	e002      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
            break;
 8001b74:	bf00      	nop
 8001b76:	e000      	b.n	8001b7a <UartProtocol_ParseByte+0x186>
            break;
 8001b78:	bf00      	nop
    }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop

08001b84 <UartProtocol_SendFrame>:

void UartProtocol_SendFrame(UART_HandleTypeDef* huart, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b0c9      	sub	sp, #292	@ 0x124
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001b8e:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001b92:	6020      	str	r0, [r4, #0]
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b9c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ba6:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001baa:	4602      	mov	r2, r0
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	801a      	strh	r2, [r3, #0]
    uint8_t tx_buf[6 + FRAME_MAX_PAYLOAD];
    int pos = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tx_buf[pos++] = 0xFE;
 8001bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001bca:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001bce:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001bd2:	21fe      	movs	r1, #254	@ 0xfe
 8001bd4:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 8) & 0xFF;
 8001bd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bda:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	b299      	uxth	r1, r3
 8001be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001bee:	b2c9      	uxtb	r1, r1
 8001bf0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001bf4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001bf8:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 0) & 0xFF;
 8001bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c04:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c08:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	b2d1      	uxtb	r1, r2
 8001c10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c14:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c18:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 8) & 0xFF;
 8001c1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c1e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b299      	uxth	r1, r3
 8001c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c32:	b2c9      	uxtb	r1, r1
 8001c34:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c38:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c3c:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 0) & 0xFF;
 8001c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c48:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c4c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	b2d1      	uxtb	r1, r2
 8001c54:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c58:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c5c:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001c64:	e017      	b.n	8001c96 <UartProtocol_SendFrame+0x112>
        tx_buf[pos++] = payload[i];
 8001c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c6a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c6e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	441a      	add	r2, r3
 8001c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8001c80:	7811      	ldrb	r1, [r2, #0]
 8001c82:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c86:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c8a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001c8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c90:	3301      	adds	r3, #1
 8001c92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001c96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c9a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbde      	blt.n	8001c66 <UartProtocol_SendFrame+0xe2>
    }
    uint8_t cs = CalcChecksum(cmd, len, payload);
 8001ca8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cb0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cb4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001cb8:	8811      	ldrh	r1, [r2, #0]
 8001cba:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cbe:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001cc2:	8810      	ldrh	r0, [r2, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f7ff fe2d 	bl	8001924 <CalcChecksum>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    tx_buf[pos++] = cs;
 8001cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001cda:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cde:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001ce2:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 8001ce6:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(huart, tx_buf, pos, 100);
 8001ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f107 0110 	add.w	r1, r7, #16
 8001cf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cf6:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8001cfa:	2364      	movs	r3, #100	@ 0x64
 8001cfc:	6800      	ldr	r0, [r0, #0]
 8001cfe:	f003 f9ed 	bl	80050dc <HAL_UART_Transmit>
}
 8001d02:	bf00      	nop
 8001d04:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d10:	f7ff fdf6 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f003 fe29 	bl	8005990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff f843 	bl	8000dc8 <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d50:	08005a20 	.word	0x08005a20
  ldr r2, =_sbss
 8001d54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d58:	2000b8a0 	.word	0x2000b8a0

08001d5c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <DMA1_Stream0_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 ffef 	bl	8002d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fbb4 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 f807 	bl	8002dd6 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 ffcf 	bl	8002d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	2000b89c 	.word	0x2000b89c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000b89c 	.word	0x2000b89c

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e033      	b.n	8001f0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fb50 	bl	8001550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ed2:	f023 0302 	bic.w	r3, r3, #2
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fcec 	bl	80028bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Start+0x1a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e097      	b.n	800205e <HAL_ADC_Start+0x14a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d018      	beq.n	8001f76 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f54:	4b45      	ldr	r3, [pc, #276]	@ (800206c <HAL_ADC_Start+0x158>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a45      	ldr	r2, [pc, #276]	@ (8002070 <HAL_ADC_Start+0x15c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9a      	lsrs	r2, r3, #18
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d15f      	bne.n	8002044 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	f023 0206 	bic.w	r2, r3, #6
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_ADC_Start+0x160>)
 8001fe2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d129      	bne.n	800205c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	e020      	b.n	800205c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a16      	ldr	r2, [pc, #88]	@ (8002078 <HAL_ADC_Start+0x164>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d11b      	bne.n	800205c <HAL_ADC_Start+0x148>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d114      	bne.n	800205c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	e00b      	b.n	800205c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000004 	.word	0x20000004
 8002070:	431bde83 	.word	0x431bde83
 8002074:	40012300 	.word	0x40012300
 8002078:	40012000 	.word	0x40012000

0800207c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Stop+0x16>
 800208e:	2302      	movs	r3, #2
 8002090:	e021      	b.n	80020d6 <HAL_ADC_Stop+0x5a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d113      	bne.n	8002128 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800210a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e063      	b.n	80021f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002128:	f7ff fe80 	bl	8001e2c <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800212e:	e021      	b.n	8002174 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002136:	d01d      	beq.n	8002174 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_ADC_PollForConversion+0x6c>
 800213e:	f7ff fe75 	bl	8001e2c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d212      	bcs.n	8002174 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	d00b      	beq.n	8002174 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0204 	orr.w	r2, r3, #4
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e03d      	b.n	80021f0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d1d6      	bne.n	8002130 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0212 	mvn.w	r2, #18
 800218a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d123      	bne.n	80021ee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11f      	bne.n	80021ee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d111      	bne.n	80021ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d049      	beq.n	80022c2 <HAL_ADC_IRQHandler+0xca>
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d046      	beq.n	80022c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d12b      	bne.n	80022b2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d127      	bne.n	80022b2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800227a:	2b00      	cmp	r3, #0
 800227c:	d119      	bne.n	80022b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0220 	bic.w	r2, r2, #32
 800228c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fcc6 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0212 	mvn.w	r2, #18
 80022c0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d057      	beq.n	8002388 <HAL_ADC_IRQHandler+0x190>
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d054      	beq.n	8002388 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d139      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800231c:	2b00      	cmp	r3, #0
 800231e:	d12b      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d124      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11d      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d119      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002352:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fc1d 	bl	8002bb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 020c 	mvn.w	r2, #12
 8002386:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d017      	beq.n	80023ce <HAL_ADC_IRQHandler+0x1d6>
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10d      	bne.n	80023ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f935 	bl	800262e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0201 	mvn.w	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_ADC_IRQHandler+0x218>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f06f 0220 	mvn.w	r2, #32
 80023fe:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f91e 	bl	8002642 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0220 	mvn.w	r2, #32
 800240e:	601a      	str	r2, [r3, #0]
  }
}
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_Start_DMA+0x22>
 8002436:	2302      	movs	r3, #2
 8002438:	e0d0      	b.n	80025dc <HAL_ADC_Start_DMA+0x1c4>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d018      	beq.n	8002482 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002460:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <HAL_ADC_Start_DMA+0x1cc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a60      	ldr	r2, [pc, #384]	@ (80025e8 <HAL_ADC_Start_DMA+0x1d0>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9a      	lsrs	r2, r3, #18
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3b01      	subs	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002490:	d107      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f040 8088 	bne.w	80025c2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f023 0206 	bic.w	r2, r3, #6
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80024fe:	e002      	b.n	8002506 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800250e:	4b37      	ldr	r3, [pc, #220]	@ (80025ec <HAL_ADC_Start_DMA+0x1d4>)
 8002510:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	4a36      	ldr	r2, [pc, #216]	@ (80025f0 <HAL_ADC_Start_DMA+0x1d8>)
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	4a35      	ldr	r2, [pc, #212]	@ (80025f4 <HAL_ADC_Start_DMA+0x1dc>)
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_ADC_Start_DMA+0x1e0>)
 8002528:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002532:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002542:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002552:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	334c      	adds	r3, #76	@ 0x4c
 800255e:	4619      	mov	r1, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f000 fcf2 	bl	8002f4c <HAL_DMA_Start_IT>
 8002568:	4603      	mov	r3, r0
 800256a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10f      	bne.n	8002598 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d129      	bne.n	80025da <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	e020      	b.n	80025da <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_ADC_Start_DMA+0x1e4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11b      	bne.n	80025da <HAL_ADC_Start_DMA+0x1c2>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d114      	bne.n	80025da <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e00b      	b.n	80025da <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025da:	7ffb      	ldrb	r3, [r7, #31]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000004 	.word	0x20000004
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	40012300 	.word	0x40012300
 80025f0:	08002ab5 	.word	0x08002ab5
 80025f4:	08002b6f 	.word	0x08002b6f
 80025f8:	08002b8b 	.word	0x08002b8b
 80025fc:	40012000 	.word	0x40012000

08002600 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1c>
 8002670:	2302      	movs	r3, #2
 8002672:	e113      	b.n	800289c <HAL_ADC_ConfigChannel+0x244>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b09      	cmp	r3, #9
 8002682:	d925      	bls.n	80026d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	3b1e      	subs	r3, #30
 800269a:	2207      	movs	r2, #7
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	4603      	mov	r3, r0
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4403      	add	r3, r0
 80026c2:	3b1e      	subs	r3, #30
 80026c4:	409a      	lsls	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	e022      	b.n	8002716 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	2207      	movs	r2, #7
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	400a      	ands	r2, r1
 80026f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	4603      	mov	r3, r0
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4403      	add	r3, r0
 800270c:	409a      	lsls	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b06      	cmp	r3, #6
 800271c:	d824      	bhi.n	8002768 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b05      	subs	r3, #5
 8002730:	221f      	movs	r2, #31
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	400a      	ands	r2, r1
 800273e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3b05      	subs	r3, #5
 800275a:	fa00 f203 	lsl.w	r2, r0, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34
 8002766:	e04c      	b.n	8002802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d824      	bhi.n	80027ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b23      	subs	r3, #35	@ 0x23
 8002782:	221f      	movs	r2, #31
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43da      	mvns	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	400a      	ands	r2, r1
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b23      	subs	r3, #35	@ 0x23
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80027b8:	e023      	b.n	8002802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b41      	subs	r3, #65	@ 0x41
 80027cc:	221f      	movs	r2, #31
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b41      	subs	r3, #65	@ 0x41
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002802:	4b29      	ldr	r3, [pc, #164]	@ (80028a8 <HAL_ADC_ConfigChannel+0x250>)
 8002804:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <HAL_ADC_ConfigChannel+0x254>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10f      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d10b      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1d      	ldr	r2, [pc, #116]	@ (80028ac <HAL_ADC_ConfigChannel+0x254>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12b      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x23a>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1c      	ldr	r2, [pc, #112]	@ (80028b0 <HAL_ADC_ConfigChannel+0x258>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <HAL_ADC_ConfigChannel+0x1f4>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b11      	cmp	r3, #17
 800284a:	d122      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <HAL_ADC_ConfigChannel+0x258>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d111      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_ADC_ConfigChannel+0x260>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9a      	lsrs	r2, r3, #18
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40012300 	.word	0x40012300
 80028ac:	40012000 	.word	0x40012000
 80028b0:	10000012 	.word	0x10000012
 80028b4:	20000004 	.word	0x20000004
 80028b8:	431bde83 	.word	0x431bde83

080028bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c4:	4b79      	ldr	r3, [pc, #484]	@ (8002aac <ADC_Init+0x1f0>)
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	4a58      	ldr	r2, [pc, #352]	@ (8002ab0 <ADC_Init+0x1f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e00f      	b.n	80029ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0202 	bic.w	r2, r2, #2
 80029c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
 80029d4:	005a      	lsls	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	3b01      	subs	r3, #1
 8002a14:	035a      	lsls	r2, r3, #13
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	e007      	b.n	8002a30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	051a      	lsls	r2, r3, #20
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a72:	025a      	lsls	r2, r3, #9
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	029a      	lsls	r2, r3, #10
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40012300 	.word	0x40012300
 8002ab0:	0f000001 	.word	0x0f000001

08002ab4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d13c      	bne.n	8002b48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12b      	bne.n	8002b40 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d127      	bne.n	8002b40 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d119      	bne.n	8002b40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0220 	bic.w	r2, r2, #32
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7fe f87f 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b46:	e00e      	b.n	8002b66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fd74 	bl	8002642 <HAL_ADC_ErrorCallback>
}
 8002b5a:	e004      	b.n	8002b66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff fd4c 	bl	800261a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fd49 	bl	8002642 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	@ (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	@ (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d38:	d301      	bcc.n	8002d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00f      	b.n	8002d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <SysTick_Config+0x40>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d46:	210f      	movs	r1, #15
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f7ff ff8e 	bl	8002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <SysTick_Config+0x40>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d56:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <SysTick_Config+0x40>)
 8002d58:	2207      	movs	r2, #7
 8002d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	e000e010 	.word	0xe000e010

08002d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff29 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d94:	f7ff ff3e 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff ff8e 	bl	8002cc0 <NVIC_EncodePriority>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff5d 	bl	8002c6c <__NVIC_SetPriority>
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff31 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ffa2 	bl	8002d28 <SysTick_Config>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff f816 	bl	8001e2c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e099      	b.n	8002f40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2c:	e00f      	b.n	8002e4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e2e:	f7fe fffd 	bl	8001e2c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d908      	bls.n	8002e4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e078      	b.n	8002f40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e8      	bne.n	8002e2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_DMA_Init+0x158>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d117      	bne.n	8002f12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fa6f 	bl	80033d8 <DMA_CheckFifoParam>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e016      	b.n	8002f40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa26 	bl	800336c <DMA_CalcBaseAndBitshift>
 8002f20:	4603      	mov	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	223f      	movs	r2, #63	@ 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	f010803f 	.word	0xf010803f

08002f4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_Start_IT+0x26>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e040      	b.n	8002ff4 <HAL_DMA_Start_IT+0xa8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12f      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f9b8 	bl	8003310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	223f      	movs	r2, #63	@ 0x3f
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0216 	orr.w	r2, r2, #22
 8002fba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e005      	b.n	8002ff2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003008:	4b8e      	ldr	r3, [pc, #568]	@ (8003244 <HAL_DMA_IRQHandler+0x248>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a8e      	ldr	r2, [pc, #568]	@ (8003248 <HAL_DMA_IRQHandler+0x24c>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d043      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03c      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	2210      	movs	r2, #16
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d024      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e01f      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e016      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	2220      	movs	r2, #32
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808f 	beq.w	800329c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8087 	beq.w	800329c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2220      	movs	r2, #32
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d136      	bne.n	8003214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0216 	bic.w	r2, r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x1da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	223f      	movs	r2, #63	@ 0x3f
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d07e      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
        }
        return;
 8003212:	e079      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01d      	beq.n	800325e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	2b00      	cmp	r3, #0
 8003236:	d031      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e02c      	b.n	800329c <HAL_DMA_IRQHandler+0x2a0>
 8003242:	bf00      	nop
 8003244:	20000004 	.word	0x20000004
 8003248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
 800325c:	e01e      	b.n	800329c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0210 	bic.w	r2, r2, #16
 800327a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d032      	beq.n	800330a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2205      	movs	r2, #5
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d307      	bcc.n	80032e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f2      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x2cc>
 80032e2:	e000      	b.n	80032e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e000      	b.n	800330a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003308:	bf00      	nop
    }
  }
}
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800332c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b40      	cmp	r3, #64	@ 0x40
 800333c:	d108      	bne.n	8003350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800334e:	e007      	b.n	8003360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3b10      	subs	r3, #16
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x64>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003386:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d909      	bls.n	80033ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ac:	e007      	b.n	80033be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	aaaaaaab 	.word	0xaaaaaaab
 80033d4:	08005a08 	.word	0x08005a08

080033d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11f      	bne.n	8003432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d856      	bhi.n	80034a6 <DMA_CheckFifoParam+0xce>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <DMA_CheckFifoParam+0x28>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003411 	.word	0x08003411
 8003404:	08003423 	.word	0x08003423
 8003408:	08003411 	.word	0x08003411
 800340c:	080034a7 	.word	0x080034a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d046      	beq.n	80034aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e043      	b.n	80034aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800342a:	d140      	bne.n	80034ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e03d      	b.n	80034ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343a:	d121      	bne.n	8003480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d837      	bhi.n	80034b2 <DMA_CheckFifoParam+0xda>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <DMA_CheckFifoParam+0x70>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003459 	.word	0x08003459
 800344c:	0800345f 	.word	0x0800345f
 8003450:	08003459 	.word	0x08003459
 8003454:	08003471 	.word	0x08003471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e030      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d025      	beq.n	80034b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346e:	e022      	b.n	80034b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003478:	d11f      	bne.n	80034ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800347e:	e01c      	b.n	80034ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d903      	bls.n	800348e <DMA_CheckFifoParam+0xb6>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800348c:	e018      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      break;
 8003492:	e015      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      break;
 80034a4:	e00b      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034a6:	bf00      	nop
 80034a8:	e00a      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
 80034ac:	e008      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ae:	bf00      	nop
 80034b0:	e006      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e004      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e002      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
    }
  } 
  
  return status; 
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e159      	b.n	80037a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	f040 8148 	bne.w	800379a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	2b02      	cmp	r3, #2
 8003520:	d130      	bne.n	8003584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0201 	and.w	r2, r3, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d017      	beq.n	80035c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d123      	bne.n	8003614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a2 	beq.w	800379a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b57      	ldr	r3, [pc, #348]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4a56      	ldr	r2, [pc, #344]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003664:	6453      	str	r3, [r2, #68]	@ 0x44
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003672:	4a52      	ldr	r2, [pc, #328]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a49      	ldr	r2, [pc, #292]	@ (80037c0 <HAL_GPIO_Init+0x2f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x202>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a48      	ldr	r2, [pc, #288]	@ (80037c4 <HAL_GPIO_Init+0x2f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x1fe>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a47      	ldr	r2, [pc, #284]	@ (80037c8 <HAL_GPIO_Init+0x2f8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x1fa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a46      	ldr	r2, [pc, #280]	@ (80037cc <HAL_GPIO_Init+0x2fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x1f6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a45      	ldr	r2, [pc, #276]	@ (80037d0 <HAL_GPIO_Init+0x300>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x1f2>
 80036be:	2304      	movs	r3, #4
 80036c0:	e008      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036d2:	2300      	movs	r3, #0
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f002 0203 	and.w	r2, r2, #3
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4093      	lsls	r3, r2
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e4:	4935      	ldr	r1, [pc, #212]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003716:	4a2f      	ldr	r2, [pc, #188]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003740:	4a24      	ldr	r2, [pc, #144]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376a:	4a1a      	ldr	r2, [pc, #104]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003794:	4a0f      	ldr	r2, [pc, #60]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b0f      	cmp	r3, #15
 80037a4:	f67f aea2 	bls.w	80034ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3724      	adds	r7, #36	@ 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	041a      	lsls	r2, r3, #16
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43d9      	mvns	r1, r3
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	400b      	ands	r3, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	619a      	str	r2, [r3, #24]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e267      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b85      	ldr	r3, [pc, #532]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b82      	ldr	r3, [pc, #520]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b7e      	ldr	r3, [pc, #504]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e242      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b69      	ldr	r3, [pc, #420]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b66      	ldr	r3, [pc, #408]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fa98 	bl	8001e2c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fa94 	bl	8001e2c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	@ 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e207      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5b      	ldr	r3, [pc, #364]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fa84 	bl	8001e2c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fa80 	bl	8001e2c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f3      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b51      	ldr	r3, [pc, #324]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c7      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fa39 	bl	8001e2c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe fa35 	bl	8001e2c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a8      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fa18 	bl	8001e2c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe fa14 	bl	8001e2c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e187      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe f9f8 	bl	8001e2c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe f9f4 	bl	8001e2c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e167      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fe f9e1 	bl	8001e2c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe f9dd 	bl	8001e2c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e150      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b81      	ldr	r3, [pc, #516]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7d      	ldr	r3, [pc, #500]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b77      	ldr	r3, [pc, #476]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b74      	ldr	r3, [pc, #464]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a73      	ldr	r2, [pc, #460]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe f99d 	bl	8001e2c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe f999 	bl	8001e2c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e10c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2ea>
 8003b1c:	4b64      	ldr	r3, [pc, #400]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a63      	ldr	r2, [pc, #396]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x30c>
 8003b32:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b4c:	4b58      	ldr	r3, [pc, #352]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a57      	ldr	r2, [pc, #348]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a54      	ldr	r2, [pc, #336]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f95e 	bl	8001e2c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe f95a 	bl	8001e2c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0cb      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b49      	ldr	r3, [pc, #292]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fe f948 	bl	8001e2c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe f944 	bl	8001e2c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0b5      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a1 	beq.w	8003d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d05c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d141      	bne.n	8003c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe f918 	bl	8001e2c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe f914 	bl	8001e2c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e087      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b27      	ldr	r3, [pc, #156]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	491b      	ldr	r1, [pc, #108]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c48:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe f8ed 	bl	8001e2c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fe f8e9 	bl	8001e2c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e05c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x416>
 8003c74:	e054      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f8d6 	bl	8001e2c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe f8d2 	bl	8001e2c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e045      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e038      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fe f804 	bl	8001e2c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe f800 	bl	8001e2c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ff64 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	080059f0 	.word	0x080059f0
 8003ef4:	20000004 	.word	0x20000004
 8003ef8:	20000008 	.word	0x20000008

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b094      	sub	sp, #80	@ 0x50
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f14:	4b79      	ldr	r3, [pc, #484]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x40>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 80e1 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2e:	e0db      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b73      	ldr	r3, [pc, #460]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f34:	e0db      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4b73      	ldr	r3, [pc, #460]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f3a:	e0d8      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4b6d      	ldr	r3, [pc, #436]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f80:	0150      	lsls	r0, r2, #5
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4621      	mov	r1, r4
 8003f88:	1a51      	subs	r1, r2, r1
 8003f8a:	6139      	str	r1, [r7, #16]
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003faa:	4651      	mov	r1, sl
 8003fac:	018a      	lsls	r2, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fce:	4690      	mov	r8, r2
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	eb18 0303 	adds.w	r3, r8, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	462b      	mov	r3, r5
 8003fdc:	eb49 0303 	adc.w	r3, r9, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	024b      	lsls	r3, r1, #9
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	024a      	lsls	r2, r1, #9
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800400c:	f7fc f8e4 	bl	80001d8 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	e058      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b38      	ldr	r3, [pc, #224]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	4618      	mov	r0, r3
 8004024:	4611      	mov	r1, r2
 8004026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	0159      	lsls	r1, r3, #5
 8004042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004046:	0150      	lsls	r0, r2, #5
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4641      	mov	r1, r8
 800404e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb63 0b01 	sbc.w	fp, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800406c:	ebb2 040a 	subs.w	r4, r2, sl
 8004070:	eb63 050b 	sbc.w	r5, r3, fp
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	464b      	mov	r3, r9
 8004090:	eb45 0303 	adc.w	r3, r5, r3
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a2:	4629      	mov	r1, r5
 80040a4:	028b      	lsls	r3, r1, #10
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ac:	4621      	mov	r1, r4
 80040ae:	028a      	lsls	r2, r1, #10
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c0:	f7fc f88a 	bl	80001d8 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3750      	adds	r7, #80	@ 0x50
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000004 	.word	0x20000004

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	08005a00 	.word	0x08005a00

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800414c:	f7ff ffdc 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0b5b      	lsrs	r3, r3, #13
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08005a00 	.word	0x08005a00

08004170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e07b      	b.n	800427a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d108      	bne.n	800419c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004192:	d009      	beq.n	80041a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
 800419a:	e005      	b.n	80041a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fa44 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422c:	ea42 0103 	orr.w	r1, r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0104 	and.w	r1, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f003 0210 	and.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b088      	sub	sp, #32
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004292:	f7fd fdcb 	bl	8001e2c <HAL_GetTick>
 8004296:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	e12a      	b.n	8004502 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0x36>
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e122      	b.n	8004502 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Transmit+0x48>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e11b      	b.n	8004502 <HAL_SPI_Transmit+0x280>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004318:	d10f      	bne.n	800433a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d007      	beq.n	8004358 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004360:	d152      	bne.n	8004408 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SPI_Transmit+0xee>
 800436a:	8b7b      	ldrh	r3, [r7, #26]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d145      	bne.n	80043fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004394:	e032      	b.n	80043fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d112      	bne.n	80043ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043c8:	e018      	b.n	80043fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ca:	f7fd fd2f 	bl	8001e2c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d803      	bhi.n	80043e2 <HAL_SPI_Transmit+0x160>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_Transmit+0x166>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e082      	b.n	8004502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1c7      	bne.n	8004396 <HAL_SPI_Transmit+0x114>
 8004406:	e053      	b.n	80044b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_SPI_Transmit+0x194>
 8004410:	8b7b      	ldrh	r3, [r7, #26]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d147      	bne.n	80044a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	7812      	ldrb	r2, [r2, #0]
 8004422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800443c:	e033      	b.n	80044a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b02      	cmp	r3, #2
 800444a:	d113      	bne.n	8004474 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004472:	e018      	b.n	80044a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004474:	f7fd fcda 	bl	8001e2c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d803      	bhi.n	800448c <HAL_SPI_Transmit+0x20a>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d102      	bne.n	8004492 <HAL_SPI_Transmit+0x210>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e02d      	b.n	8004502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1c6      	bne.n	800443e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	6839      	ldr	r1, [r7, #0]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f8b1 	bl	800461c <SPI_EndRxTxTransaction>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004500:	2300      	movs	r3, #0
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800451c:	f7fd fc86 	bl	8001e2c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	4413      	add	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800452c:	f7fd fc7e 	bl	8001e2c <HAL_GetTick>
 8004530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004532:	4b39      	ldr	r3, [pc, #228]	@ (8004618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	015b      	lsls	r3, r3, #5
 8004538:	0d1b      	lsrs	r3, r3, #20
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	fb02 f303 	mul.w	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004542:	e055      	b.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d051      	beq.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800454c:	f7fd fc6e 	bl	8001e2c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	429a      	cmp	r2, r3
 800455a:	d902      	bls.n	8004562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d13d      	bne.n	80045de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800457a:	d111      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004584:	d004      	beq.n	8004590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d107      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a8:	d10f      	bne.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e018      	b.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e002      	b.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	429a      	cmp	r2, r3
 800460c:	d19a      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000004 	.word	0x20000004

0800461c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2201      	movs	r2, #1
 8004630:	2102      	movs	r1, #2
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff ff6a 	bl	800450c <SPI_WaitFlagStateUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e032      	b.n	80046b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800464e:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <SPI_EndRxTxTransaction+0xa0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <SPI_EndRxTxTransaction+0xa4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	0d5b      	lsrs	r3, r3, #21
 800465a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800466c:	d112      	bne.n	8004694 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	@ 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff47 	bl	800450c <SPI_WaitFlagStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d016      	beq.n	80046b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e00f      	b.n	80046b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3b01      	subs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	2b80      	cmp	r3, #128	@ 0x80
 80046ac:	d0f2      	beq.n	8004694 <SPI_EndRxTxTransaction+0x78>
 80046ae:	e000      	b.n	80046b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80046b0:	bf00      	nop
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000004 	.word	0x20000004
 80046c0:	165e9f81 	.word	0x165e9f81

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f82c 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 faf8 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e03c      	b.n	80047f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <HAL_TIM_Base_Start+0xa0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_TIM_Base_Start+0x5c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004796:	d013      	beq.n	80047c0 <HAL_TIM_Base_Start+0x5c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1a      	ldr	r2, [pc, #104]	@ (8004808 <HAL_TIM_Base_Start+0xa4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_Base_Start+0x5c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a19      	ldr	r2, [pc, #100]	@ (800480c <HAL_TIM_Base_Start+0xa8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_Base_Start+0x5c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <HAL_TIM_Base_Start+0xac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_Base_Start+0x5c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a16      	ldr	r2, [pc, #88]	@ (8004814 <HAL_TIM_Base_Start+0xb0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d010      	beq.n	80047f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	e007      	b.n	80047f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40014000 	.word	0x40014000

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e044      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	@ (80048cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a16      	ldr	r2, [pc, #88]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e007      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10f      	bne.n	8004924 <HAL_TIM_Base_Stop_IT+0x48>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	f240 4344 	movw	r3, #1092	@ 0x444
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_TIM_Base_Stop_IT+0x48>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0202 	mvn.w	r2, #2
 800496e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f999 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 800498a:	e005      	b.n	8004998 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f98b 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f99c 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f06f 0204 	mvn.w	r2, #4
 80049ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f973 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 80049d6:	e005      	b.n	80049e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f965 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f976 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0208 	mvn.w	r2, #8
 8004a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f94d 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 8004a22:	e005      	b.n	8004a30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f93f 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f950 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01b      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0210 	mvn.w	r2, #16
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f927 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f919 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f92a 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0201 	mvn.w	r2, #1
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fc f883 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 faaf 	bl	8005028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8fb 	bl	8004ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0220 	mvn.w	r2, #32
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa81 	bl	8005014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_ConfigClockSource+0x1c>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0b4      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x186>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6e:	d03e      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0xd4>
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b74:	f200 8087 	bhi.w	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	f000 8086 	beq.w	8004c8c <HAL_TIM_ConfigClockSource+0x172>
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b84:	d87f      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004b86:	2b70      	cmp	r3, #112	@ 0x70
 8004b88:	d01a      	beq.n	8004bc0 <HAL_TIM_ConfigClockSource+0xa6>
 8004b8a:	2b70      	cmp	r3, #112	@ 0x70
 8004b8c:	d87b      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8e:	2b60      	cmp	r3, #96	@ 0x60
 8004b90:	d050      	beq.n	8004c34 <HAL_TIM_ConfigClockSource+0x11a>
 8004b92:	2b60      	cmp	r3, #96	@ 0x60
 8004b94:	d877      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004b96:	2b50      	cmp	r3, #80	@ 0x50
 8004b98:	d03c      	beq.n	8004c14 <HAL_TIM_ConfigClockSource+0xfa>
 8004b9a:	2b50      	cmp	r3, #80	@ 0x50
 8004b9c:	d873      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d058      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0x13a>
 8004ba2:	2b40      	cmp	r3, #64	@ 0x40
 8004ba4:	d86f      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba6:	2b30      	cmp	r3, #48	@ 0x30
 8004ba8:	d064      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x15a>
 8004baa:	2b30      	cmp	r3, #48	@ 0x30
 8004bac:	d86b      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d060      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d867      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d05c      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x15a>
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d05a      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbe:	e062      	b.n	8004c86 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd0:	f000 f992 	bl	8004ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004be2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
      break;
 8004bec:	e04f      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	f000 f97b 	bl	8004ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c10:	609a      	str	r2, [r3, #8]
      break;
 8004c12:	e03c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c20:	461a      	mov	r2, r3
 8004c22:	f000 f8ef 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2150      	movs	r1, #80	@ 0x50
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f948 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 8004c32:	e02c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c40:	461a      	mov	r2, r3
 8004c42:	f000 f90e 	bl	8004e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2160      	movs	r1, #96	@ 0x60
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f938 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 8004c52:	e01c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c60:	461a      	mov	r2, r3
 8004c62:	f000 f8cf 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2140      	movs	r1, #64	@ 0x40
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f928 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 f91f 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a37      	ldr	r2, [pc, #220]	@ (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <TIM_Base_SetConfig+0xf4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <TIM_Base_SetConfig+0xf8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a32      	ldr	r2, [pc, #200]	@ (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a28      	ldr	r2, [pc, #160]	@ (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a25      	ldr	r2, [pc, #148]	@ (8004dec <TIM_Base_SetConfig+0xf4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a24      	ldr	r2, [pc, #144]	@ (8004df0 <TIM_Base_SetConfig+0xf8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <TIM_Base_SetConfig+0x100>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <TIM_Base_SetConfig+0x104>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	@ (8004e00 <TIM_Base_SetConfig+0x108>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a0c      	ldr	r2, [pc, #48]	@ (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d103      	bne.n	8004dc2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0210 	bic.w	r2, r3, #16
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f043 0307 	orr.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e050      	b.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	@ (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a16      	ldr	r2, [pc, #88]	@ (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a15      	ldr	r2, [pc, #84]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40014000 	.word	0x40014000

08005014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e042      	b.n	80050d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc fbac 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800507e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa09 	bl	8005498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	@ 0x28
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d175      	bne.n	80051e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_UART_Transmit+0x2c>
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e06e      	b.n	80051ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2221      	movs	r2, #33	@ 0x21
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511a:	f7fc fe87 	bl	8001e2c <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005134:	d108      	bne.n	8005148 <HAL_UART_Transmit+0x6c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e003      	b.n	8005150 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005150:	e02e      	b.n	80051b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	@ 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f8df 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e03a      	b.n	80051ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	3302      	adds	r3, #2
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	e007      	b.n	80051a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3301      	adds	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1cb      	bne.n	8005152 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	2140      	movs	r1, #64	@ 0x40
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f8ab 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b08a      	sub	sp, #40	@ 0x28
 80051f6:	af02      	add	r7, sp, #8
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	f040 8081 	bne.w	8005316 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Receive+0x2e>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e079      	b.n	8005318 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2222      	movs	r2, #34	@ 0x22
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005238:	f7fc fdf8 	bl	8001e2c <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	d108      	bne.n	8005266 <HAL_UART_Receive+0x74>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e003      	b.n	800526e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800526e:	e047      	b.n	8005300 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	2120      	movs	r1, #32
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f850 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e042      	b.n	8005318 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3302      	adds	r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	e01f      	b.n	80052f2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ba:	d007      	beq.n	80052cc <HAL_UART_Receive+0xda>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <HAL_UART_Receive+0xe8>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e008      	b.n	80052ec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1b2      	bne.n	8005270 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e000      	b.n	8005318 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005316:	2302      	movs	r3, #2
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	e03b      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d037      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fc fd77 	bl	8001e2c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <UART_WaitOnFlagUntilTimeout+0x30>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03a      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d023      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b80      	cmp	r3, #128	@ 0x80
 8005366:	d020      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d01d      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d116      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f81d 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2208      	movs	r2, #8
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0b4      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b095      	sub	sp, #84	@ 0x54
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	330c      	adds	r3, #12
 80053f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	61fb      	str	r3, [r7, #28]
   return(result);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	2b01      	cmp	r3, #1
 8005448:	d119      	bne.n	800547e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	60bb      	str	r3, [r7, #8]
   return(result);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0310 	bic.w	r3, r3, #16
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800546a:	61ba      	str	r2, [r7, #24]
 800546c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6979      	ldr	r1, [r7, #20]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800548c:	bf00      	nop
 800548e:	3754      	adds	r7, #84	@ 0x54
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800549c:	b0c0      	sub	sp, #256	@ 0x100
 800549e:	af00      	add	r7, sp, #0
 80054a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	68d9      	ldr	r1, [r3, #12]
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	ea40 0301 	orr.w	r3, r0, r1
 80054c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054f0:	f021 010c 	bic.w	r1, r1, #12
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054fe:	430b      	orrs	r3, r1
 8005500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	6999      	ldr	r1, [r3, #24]
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	ea40 0301 	orr.w	r3, r0, r1
 800551e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b8f      	ldr	r3, [pc, #572]	@ (8005764 <UART_SetConfig+0x2cc>)
 8005528:	429a      	cmp	r2, r3
 800552a:	d005      	beq.n	8005538 <UART_SetConfig+0xa0>
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b8d      	ldr	r3, [pc, #564]	@ (8005768 <UART_SetConfig+0x2d0>)
 8005534:	429a      	cmp	r2, r3
 8005536:	d104      	bne.n	8005542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe fe06 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 800553c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005540:	e003      	b.n	800554a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005542:	f7fe fded 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8005546:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	f040 810c 	bne.w	8005770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555c:	2200      	movs	r2, #0
 800555e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005562:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	1891      	adds	r1, r2, r2
 8005570:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005572:	415b      	adcs	r3, r3
 8005574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800557a:	4621      	mov	r1, r4
 800557c:	eb12 0801 	adds.w	r8, r2, r1
 8005580:	4629      	mov	r1, r5
 8005582:	eb43 0901 	adc.w	r9, r3, r1
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800559a:	4690      	mov	r8, r2
 800559c:	4699      	mov	r9, r3
 800559e:	4623      	mov	r3, r4
 80055a0:	eb18 0303 	adds.w	r3, r8, r3
 80055a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055a8:	462b      	mov	r3, r5
 80055aa:	eb49 0303 	adc.w	r3, r9, r3
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055c6:	460b      	mov	r3, r1
 80055c8:	18db      	adds	r3, r3, r3
 80055ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80055cc:	4613      	mov	r3, r2
 80055ce:	eb42 0303 	adc.w	r3, r2, r3
 80055d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055dc:	f7fa fdfc 	bl	80001d8 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b61      	ldr	r3, [pc, #388]	@ (800576c <UART_SetConfig+0x2d4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005608:	415b      	adcs	r3, r3
 800560a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005610:	4641      	mov	r1, r8
 8005612:	eb12 0a01 	adds.w	sl, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb43 0b01 	adc.w	fp, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800562c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005630:	4692      	mov	sl, r2
 8005632:	469b      	mov	fp, r3
 8005634:	4643      	mov	r3, r8
 8005636:	eb1a 0303 	adds.w	r3, sl, r3
 800563a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800563e:	464b      	mov	r3, r9
 8005640:	eb4b 0303 	adc.w	r3, fp, r3
 8005644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005654:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800565c:	460b      	mov	r3, r1
 800565e:	18db      	adds	r3, r3, r3
 8005660:	643b      	str	r3, [r7, #64]	@ 0x40
 8005662:	4613      	mov	r3, r2
 8005664:	eb42 0303 	adc.w	r3, r2, r3
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
 800566a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800566e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005672:	f7fa fdb1 	bl	80001d8 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4611      	mov	r1, r2
 800567c:	4b3b      	ldr	r3, [pc, #236]	@ (800576c <UART_SetConfig+0x2d4>)
 800567e:	fba3 2301 	umull	r2, r3, r3, r1
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	2264      	movs	r2, #100	@ 0x64
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	1acb      	subs	r3, r1, r3
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <UART_SetConfig+0x2d4>)
 8005694:	fba3 2302 	umull	r2, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056a0:	441c      	add	r4, r3
 80056a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056b4:	4642      	mov	r2, r8
 80056b6:	464b      	mov	r3, r9
 80056b8:	1891      	adds	r1, r2, r2
 80056ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056bc:	415b      	adcs	r3, r3
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056c4:	4641      	mov	r1, r8
 80056c6:	1851      	adds	r1, r2, r1
 80056c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ca:	4649      	mov	r1, r9
 80056cc:	414b      	adcs	r3, r1
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056dc:	4659      	mov	r1, fp
 80056de:	00cb      	lsls	r3, r1, #3
 80056e0:	4651      	mov	r1, sl
 80056e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e6:	4651      	mov	r1, sl
 80056e8:	00ca      	lsls	r2, r1, #3
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	4642      	mov	r2, r8
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056f8:	464b      	mov	r3, r9
 80056fa:	460a      	mov	r2, r1
 80056fc:	eb42 0303 	adc.w	r3, r2, r3
 8005700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005710:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800572a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800572e:	f7fa fd53 	bl	80001d8 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <UART_SetConfig+0x2d4>)
 8005738:	fba3 1302 	umull	r1, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	2164      	movs	r1, #100	@ 0x64
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	3332      	adds	r3, #50	@ 0x32
 800574a:	4a08      	ldr	r2, [pc, #32]	@ (800576c <UART_SetConfig+0x2d4>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	f003 0207 	and.w	r2, r3, #7
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4422      	add	r2, r4
 800575e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005760:	e106      	b.n	8005970 <UART_SetConfig+0x4d8>
 8005762:	bf00      	nop
 8005764:	40011000 	.word	0x40011000
 8005768:	40011400 	.word	0x40011400
 800576c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005774:	2200      	movs	r2, #0
 8005776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800577a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800577e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005782:	4642      	mov	r2, r8
 8005784:	464b      	mov	r3, r9
 8005786:	1891      	adds	r1, r2, r2
 8005788:	6239      	str	r1, [r7, #32]
 800578a:	415b      	adcs	r3, r3
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005792:	4641      	mov	r1, r8
 8005794:	1854      	adds	r4, r2, r1
 8005796:	4649      	mov	r1, r9
 8005798:	eb43 0501 	adc.w	r5, r3, r1
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	00eb      	lsls	r3, r5, #3
 80057a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057aa:	00e2      	lsls	r2, r4, #3
 80057ac:	4614      	mov	r4, r2
 80057ae:	461d      	mov	r5, r3
 80057b0:	4643      	mov	r3, r8
 80057b2:	18e3      	adds	r3, r4, r3
 80057b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057b8:	464b      	mov	r3, r9
 80057ba:	eb45 0303 	adc.w	r3, r5, r3
 80057be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057de:	4629      	mov	r1, r5
 80057e0:	008b      	lsls	r3, r1, #2
 80057e2:	4621      	mov	r1, r4
 80057e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e8:	4621      	mov	r1, r4
 80057ea:	008a      	lsls	r2, r1, #2
 80057ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057f0:	f7fa fcf2 	bl	80001d8 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b60      	ldr	r3, [pc, #384]	@ (800597c <UART_SetConfig+0x4e4>)
 80057fa:	fba3 2302 	umull	r2, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	011c      	lsls	r4, r3, #4
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800580c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	61b9      	str	r1, [r7, #24]
 800581c:	415b      	adcs	r3, r3
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005824:	4641      	mov	r1, r8
 8005826:	1851      	adds	r1, r2, r1
 8005828:	6139      	str	r1, [r7, #16]
 800582a:	4649      	mov	r1, r9
 800582c:	414b      	adcs	r3, r1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800583c:	4659      	mov	r1, fp
 800583e:	00cb      	lsls	r3, r1, #3
 8005840:	4651      	mov	r1, sl
 8005842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005846:	4651      	mov	r1, sl
 8005848:	00ca      	lsls	r2, r1, #3
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	4603      	mov	r3, r0
 8005850:	4642      	mov	r2, r8
 8005852:	189b      	adds	r3, r3, r2
 8005854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005858:	464b      	mov	r3, r9
 800585a:	460a      	mov	r2, r1
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800586e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800587c:	4649      	mov	r1, r9
 800587e:	008b      	lsls	r3, r1, #2
 8005880:	4641      	mov	r1, r8
 8005882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005886:	4641      	mov	r1, r8
 8005888:	008a      	lsls	r2, r1, #2
 800588a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800588e:	f7fa fca3 	bl	80001d8 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4611      	mov	r1, r2
 8005898:	4b38      	ldr	r3, [pc, #224]	@ (800597c <UART_SetConfig+0x4e4>)
 800589a:	fba3 2301 	umull	r2, r3, r3, r1
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2264      	movs	r2, #100	@ 0x64
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	3332      	adds	r3, #50	@ 0x32
 80058ac:	4a33      	ldr	r2, [pc, #204]	@ (800597c <UART_SetConfig+0x4e4>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b8:	441c      	add	r4, r3
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058be:	2200      	movs	r2, #0
 80058c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80058c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80058c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	415b      	adcs	r3, r3
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d8:	4641      	mov	r1, r8
 80058da:	1851      	adds	r1, r2, r1
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	4649      	mov	r1, r9
 80058e0:	414b      	adcs	r3, r1
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058f0:	4659      	mov	r1, fp
 80058f2:	00cb      	lsls	r3, r1, #3
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fa:	4651      	mov	r1, sl
 80058fc:	00ca      	lsls	r2, r1, #3
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	4603      	mov	r3, r0
 8005904:	4642      	mov	r2, r8
 8005906:	189b      	adds	r3, r3, r2
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800590a:	464b      	mov	r3, r9
 800590c:	460a      	mov	r2, r1
 800590e:	eb42 0303 	adc.w	r3, r2, r3
 8005912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	663b      	str	r3, [r7, #96]	@ 0x60
 800591e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800592c:	4649      	mov	r1, r9
 800592e:	008b      	lsls	r3, r1, #2
 8005930:	4641      	mov	r1, r8
 8005932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005936:	4641      	mov	r1, r8
 8005938:	008a      	lsls	r2, r1, #2
 800593a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800593e:	f7fa fc4b 	bl	80001d8 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <UART_SetConfig+0x4e4>)
 8005948:	fba3 1302 	umull	r1, r3, r3, r2
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	2164      	movs	r1, #100	@ 0x64
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	3332      	adds	r3, #50	@ 0x32
 800595a:	4a08      	ldr	r2, [pc, #32]	@ (800597c <UART_SetConfig+0x4e4>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4422      	add	r2, r4
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005976:	46bd      	mov	sp, r7
 8005978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800597c:	51eb851f 	.word	0x51eb851f

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <__libc_init_array>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	4d0d      	ldr	r5, [pc, #52]	@ (80059c8 <__libc_init_array+0x38>)
 8005994:	4c0d      	ldr	r4, [pc, #52]	@ (80059cc <__libc_init_array+0x3c>)
 8005996:	1b64      	subs	r4, r4, r5
 8005998:	10a4      	asrs	r4, r4, #2
 800599a:	2600      	movs	r6, #0
 800599c:	42a6      	cmp	r6, r4
 800599e:	d109      	bne.n	80059b4 <__libc_init_array+0x24>
 80059a0:	4d0b      	ldr	r5, [pc, #44]	@ (80059d0 <__libc_init_array+0x40>)
 80059a2:	4c0c      	ldr	r4, [pc, #48]	@ (80059d4 <__libc_init_array+0x44>)
 80059a4:	f000 f818 	bl	80059d8 <_init>
 80059a8:	1b64      	subs	r4, r4, r5
 80059aa:	10a4      	asrs	r4, r4, #2
 80059ac:	2600      	movs	r6, #0
 80059ae:	42a6      	cmp	r6, r4
 80059b0:	d105      	bne.n	80059be <__libc_init_array+0x2e>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b8:	4798      	blx	r3
 80059ba:	3601      	adds	r6, #1
 80059bc:	e7ee      	b.n	800599c <__libc_init_array+0xc>
 80059be:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c2:	4798      	blx	r3
 80059c4:	3601      	adds	r6, #1
 80059c6:	e7f2      	b.n	80059ae <__libc_init_array+0x1e>
 80059c8:	08005a18 	.word	0x08005a18
 80059cc:	08005a18 	.word	0x08005a18
 80059d0:	08005a18 	.word	0x08005a18
 80059d4:	08005a1c 	.word	0x08005a1c

080059d8 <_init>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr

080059e4 <_fini>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr
