
UWCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004404  08004404  00005404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047f4  080047f4  000057f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047fc  080047fc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004800  08004800  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004804  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043d0  2000000c  08004810  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043dc  08004810  000063dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094f6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001949  00000000  00000000  0000f532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00010e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000610  00000000  00000000  00011660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aef  00000000  00000000  00011c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a057  00000000  00000000  0002875f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918c3  00000000  00000000  000327b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000221c  00000000  00000000  000c40bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c62d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043ec 	.word	0x080043ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080043ec 	.word	0x080043ec

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <OnFrameReceived>:
    UartProtocol_SendFrame(&huart2, cmd, len, payload);

}
*/
void OnFrameReceived(UartProtocol* proto, uint16_t cmd, uint16_t len, uint8_t* payload)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b096      	sub	sp, #88	@ 0x58
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	817b      	strh	r3, [r7, #10]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	813b      	strh	r3, [r7, #8]
    if (cmd == CMD_QPSK_MOD_DEMOD) {
 8000b82:	897b      	ldrh	r3, [r7, #10]
 8000b84:	f241 0210 	movw	r2, #4112	@ 0x1010
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d12c      	bne.n	8000be6 <OnFrameReceived+0x76>

        QpskRingBuffer_Init(&tx_ringbuf);
 8000b8c:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <OnFrameReceived+0x80>)
 8000b8e:	f000 fc57 	bl	8001440 <QpskRingBuffer_Init>
        QpskRingBuffer_Init(&rx_ringbuf);
 8000b92:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <OnFrameReceived+0x84>)
 8000b94:	f000 fc54 	bl	8001440 <QpskRingBuffer_Init>
        QpskModem_Modulate(&modem, payload, len);
 8000b98:	893b      	ldrh	r3, [r7, #8]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4816      	ldr	r0, [pc, #88]	@ (8000bf8 <OnFrameReceived+0x88>)
 8000ba0:	f000 f97e 	bl	8000ea0 <QpskModem_Modulate>
        QpskModem_SymbolsToIQ(&modem);
 8000ba4:	4814      	ldr	r0, [pc, #80]	@ (8000bf8 <OnFrameReceived+0x88>)
 8000ba6:	f000 fb63 	bl	8001270 <QpskModem_SymbolsToIQ>
        QpskModem_GenerateSignal(&modem, &tx_ringbuf, 1.0f);
 8000baa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000bae:	4910      	ldr	r1, [pc, #64]	@ (8000bf0 <OnFrameReceived+0x80>)
 8000bb0:	4811      	ldr	r0, [pc, #68]	@ (8000bf8 <OnFrameReceived+0x88>)
 8000bb2:	f000 fb9b 	bl	80012ec <QpskModem_GenerateSignal>

        Qpsk_SimulateReception(&tx_ringbuf, &rx_ringbuf);
 8000bb6:	490f      	ldr	r1, [pc, #60]	@ (8000bf4 <OnFrameReceived+0x84>)
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <OnFrameReceived+0x80>)
 8000bba:	f000 fcf9 	bl	80015b0 <Qpsk_SimulateReception>

        uint8_t data_out[QPSK_MAX_SYMBOLS/4];
        uint16_t len_out = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        QpskModem_Demodulate(&modem, &rx_ringbuf, data_out, &len_out);
 8000bc4:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8000bc8:	f107 0214 	add.w	r2, r7, #20
 8000bcc:	4909      	ldr	r1, [pc, #36]	@ (8000bf4 <OnFrameReceived+0x84>)
 8000bce:	480a      	ldr	r0, [pc, #40]	@ (8000bf8 <OnFrameReceived+0x88>)
 8000bd0:	f000 f9a2 	bl	8000f18 <QpskModem_Demodulate>

        //UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, len, payload);

       UartProtocol_SendFrame(&huart2, CMD_QPSK_RESULT, len_out, data_out);
 8000bd4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	f249 0110 	movw	r1, #36880	@ 0x9010
 8000be0:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <OnFrameReceived+0x8c>)
 8000be2:	f000 ff2d 	bl	8001a40 <UartProtocol_SendFrame>
    }
}
 8000be6:	bf00      	nop
 8000be8:	3758      	adds	r7, #88	@ 0x58
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003c8 	.word	0x200003c8
 8000bf4:	200023d0 	.word	0x200023d0
 8000bf8:	200000b8 	.word	0x200000b8
 8000bfc:	20000070 	.word	0x20000070

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0c6      	sub	sp, #280	@ 0x118
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f001 f809 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f833 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 f90b 	bl	8000e28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c12:	f000 f8df 	bl	8000dd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c16:	f000 f88b 	bl	8000d30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	UartProtocol_Init(&proto, OnFrameReceived);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4910      	ldr	r1, [pc, #64]	@ (8000c60 <main+0x60>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fe24 	bl	800186e <UartProtocol_Init>

	QpskModem_Init(&modem, 16, 40000.0f, 640000.0f);
 8000c26:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000c64 <main+0x64>
 8000c2a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000c68 <main+0x68>
 8000c2e:	2110      	movs	r1, #16
 8000c30:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <main+0x6c>)
 8000c32:	f000 f919 	bl	8000e68 <QpskModem_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8000c36:	1df9      	adds	r1, r7, #7
 8000c38:	230a      	movs	r3, #10
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <main+0x70>)
 8000c3e:	f002 fa6e 	bl	800311e <HAL_UART_Receive>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f6      	bne.n	8000c36 <main+0x36>
		  UartProtocol_ParseByte(&proto, c); // This will parse the protocol and echo the whole frame
 8000c48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c4c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fe29 	bl	80018b0 <UartProtocol_ParseByte>
	  if (HAL_UART_Receive(&huart2, &c, 1, 10) == HAL_OK) {
 8000c5e:	e7ea      	b.n	8000c36 <main+0x36>
 8000c60:	08000b71 	.word	0x08000b71
 8000c64:	491c4000 	.word	0x491c4000
 8000c68:	471c4000 	.word	0x471c4000
 8000c6c:	200000b8 	.word	0x200000b8
 8000c70:	20000070 	.word	0x20000070

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	@ 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	@ 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fe12 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <SystemClock_Config+0xb4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <SystemClock_Config+0xb4>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <SystemClock_Config+0xb4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <SystemClock_Config+0xb8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <SystemClock_Config+0xb8>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <SystemClock_Config+0xb8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 fce7 	bl	80026b8 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cf0:	f000 f8b4 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ff4a 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d1a:	f000 f89f 	bl	8000e5c <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	@ 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d44:	4a21      	ldr	r2, [pc, #132]	@ (8000dcc <MX_ADC1_Init+0x9c>)
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d70:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <MX_ADC1_Init+0xa0>)
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000d90:	f000 ffb6 	bl	8001d00 <HAL_ADC_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f85f 	bl	8000e5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <MX_ADC1_Init+0x98>)
 8000db0:	f000 ffea 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f000 f84f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000028 	.word	0x20000028
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	0f000001 	.word	0x0f000001

08000dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_USART2_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	f002 f8ac 	bl	8002f68 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f000 f821 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000070 	.word	0x20000070
 8000e24:	40004400 	.word	0x40004400

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_GPIO_Init+0x30>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0x30>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0x30>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <QpskModem_Init>:
static const float PI = 3.14159265358979323846f;
static const float QPSK_PHASE[4] = { PI/4, 3*PI/4, 5*PI/4, 7*PI/4 };

//QPSK modulation Functions

void QpskModem_Init(QpskModem* modem, uint16_t sample_per_symbol, float f0, float fs){
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e76:	edc7 0a00 	vstr	s1, [r7]
 8000e7a:	817b      	strh	r3, [r7, #10]
	modem->samples_per_symbol = sample_per_symbol;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	897a      	ldrh	r2, [r7, #10]
 8000e80:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
	modem->f0 = f0;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	modem->fs = fs;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <QpskModem_Modulate>:

void QpskModem_Modulate(QpskModem* modem, const uint8_t* data, uint16_t len){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80fb      	strh	r3, [r7, #6]
	modem->num_symbols = len*4;
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uint16_t idx = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	83fb      	strh	r3, [r7, #30]
	for (uint16_t i =0 ; i < len ; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	83bb      	strh	r3, [r7, #28]
 8000ec2:	e01e      	b.n	8000f02 <QpskModem_Modulate+0x62>
		uint8_t byte = data[i];
 8000ec4:	8bbb      	ldrh	r3, [r7, #28]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	75fb      	strb	r3, [r7, #23]
		for(int b=6; b>= 0 ; b-=2){
 8000ece:	2306      	movs	r3, #6
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	e010      	b.n	8000ef6 <QpskModem_Modulate+0x56>
			modem->symbols[idx++] = (byte >> b) & 0x03;
 8000ed4:	7dfa      	ldrb	r2, [r7, #23]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	fa42 f303 	asr.w	r3, r2, r3
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	8bfb      	ldrh	r3, [r7, #30]
 8000ee0:	1c59      	adds	r1, r3, #1
 8000ee2:	83f9      	strh	r1, [r7, #30]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f002 0303 	and.w	r3, r2, #3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	545a      	strb	r2, [r3, r1]
		for(int b=6; b>= 0 ; b-=2){
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	daeb      	bge.n	8000ed4 <QpskModem_Modulate+0x34>
	for (uint16_t i =0 ; i < len ; i++){
 8000efc:	8bbb      	ldrh	r3, [r7, #28]
 8000efe:	3301      	adds	r3, #1
 8000f00:	83bb      	strh	r3, [r7, #28]
 8000f02:	8bba      	ldrh	r2, [r7, #28]
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3dc      	bcc.n	8000ec4 <QpskModem_Modulate+0x24>
		}
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3724      	adds	r7, #36	@ 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <QpskModem_Demodulate>:

void QpskModem_Demodulate(QpskModem* modem, QpskRingBuffer* rxbuf, uint8_t* data_out, uint16_t* len_out) {
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b0d0      	sub	sp, #320	@ 0x140
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8000f22:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8000f26:	6020      	str	r0, [r4, #0]
 8000f28:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8000f2c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8000f30:	6001      	str	r1, [r0, #0]
 8000f32:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8000f36:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8000f3a:	600a      	str	r2, [r1, #0]
 8000f3c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000f40:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8000f44:	6013      	str	r3, [r2, #0]
    uint16_t nb_symbols = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t symbols[QPSK_MAX_SYMBOLS];
    uint32_t global_sample = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    for (uint16_t s = 0; s < QPSK_MAX_SYMBOLS; s++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8000f58:	e11e      	b.n	8001198 <QpskModem_Demodulate+0x280>
        if (QpskRingBuffer_Available(rxbuf) < modem->samples_per_symbol)
 8000f5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	f000 fafb 	bl	800155e <QpskRingBuffer_Available>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f0c0 8113 	bcc.w	80011a4 <QpskModem_Demodulate+0x28c>
            break;
        float I = 0.0f, Q = 0.0f;
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 8000f94:	e098      	b.n	80010c8 <QpskModem_Demodulate+0x1b0>
            float t = (float)global_sample / modem->fs;
 8000f96:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fa2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fa6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
            float ref_cos = cosf(2 * M_PI * modem->f0 * t);
 8000fb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb94 	bl	80006f4 <__aeabi_f2d>
 8000fcc:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001268 <QpskModem_Demodulate+0x350>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff f901 	bl	80001d8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8000fe2:	f7ff fb87 	bl	80006f4 <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f8f3 	bl	80001d8 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fbd3 	bl	80007a4 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	ee00 3a10 	vmov	s0, r3
 8001004:	f002 fc7e 	bl	8003904 <cosf>
 8001008:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
            float ref_sin = sinf(2 * M_PI * modem->f0 * t);
 800100c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001010:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb6a 	bl	80006f4 <__aeabi_f2d>
 8001020:	a391      	add	r3, pc, #580	@ (adr r3, 8001268 <QpskModem_Demodulate+0x350>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff f8d7 	bl	80001d8 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4614      	mov	r4, r2
 8001030:	461d      	mov	r5, r3
 8001032:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001036:	f7ff fb5d 	bl	80006f4 <__aeabi_f2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff f8c9 	bl	80001d8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fba9 	bl	80007a4 <__aeabi_d2f>
 8001052:	4603      	mov	r3, r0
 8001054:	ee00 3a10 	vmov	s0, r3
 8001058:	f002 fc98 	bl	800398c <sinf>
 800105c:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
            int16_t sample = QpskRingBuffer_Get(rxbuf);
 8001060:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001064:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f000 fa53 	bl	8001514 <QpskRingBuffer_Get>
 800106e:	4603      	mov	r3, r0
 8001070:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
            I += sample * ref_cos;
 8001074:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001080:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	ed97 7a4c 	vldr	s14, [r7, #304]	@ 0x130
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
            Q += sample * ref_sin;
 8001094:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80010b4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80010b8:	3301      	adds	r3, #1
 80010ba:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 80010be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80010c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 80010d6:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 80010da:	429a      	cmp	r2, r3
 80010dc:	f4ff af5b 	bcc.w	8000f96 <QpskModem_Demodulate+0x7e>
        }
        uint8_t symbol = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        if (I >= 0 && Q >= 0) symbol = 0;
 80010e6:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	db0a      	blt.n	800110a <QpskModem_Demodulate+0x1f2>
 80010f4:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	db03      	blt.n	800110a <QpskModem_Demodulate+0x1f2>
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 8001108:	e034      	b.n	8001174 <QpskModem_Demodulate+0x25c>
        else if (I < 0 && Q >= 0) symbol = 1;
 800110a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 800110e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d50a      	bpl.n	800112e <QpskModem_Demodulate+0x216>
 8001118:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 800111c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	db03      	blt.n	800112e <QpskModem_Demodulate+0x216>
 8001126:	2301      	movs	r3, #1
 8001128:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 800112c:	e022      	b.n	8001174 <QpskModem_Demodulate+0x25c>
        else if (I < 0 && Q < 0) symbol = 2;
 800112e:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8001132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	d50a      	bpl.n	8001152 <QpskModem_Demodulate+0x23a>
 800113c:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d503      	bpl.n	8001152 <QpskModem_Demodulate+0x23a>
 800114a:	2302      	movs	r3, #2
 800114c:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 8001150:	e010      	b.n	8001174 <QpskModem_Demodulate+0x25c>
        else if (I >= 0 && Q < 0) symbol = 3;
 8001152:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8001156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	db09      	blt.n	8001174 <QpskModem_Demodulate+0x25c>
 8001160:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8001164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d502      	bpl.n	8001174 <QpskModem_Demodulate+0x25c>
 800116e:	2303      	movs	r3, #3
 8001170:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        symbols[nb_symbols++] = symbol;
 8001174:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	f8a7 213e 	strh.w	r2, [r7, #318]	@ 0x13e
 800117e:	4619      	mov	r1, r3
 8001180:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001188:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800118c:	545a      	strb	r2, [r3, r1]
    for (uint16_t s = 0; s < QPSK_MAX_SYMBOLS; s++) {
 800118e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8001192:	3301      	adds	r3, #1
 8001194:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001198:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800119c:	2bff      	cmp	r3, #255	@ 0xff
 800119e:	f67f aedc 	bls.w	8000f5a <QpskModem_Demodulate+0x42>
 80011a2:	e000      	b.n	80011a6 <QpskModem_Demodulate+0x28e>
            break;
 80011a4:	bf00      	nop
    }
    *len_out = nb_symbols / 4;
 80011a6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < *len_out; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 80011c0:	e041      	b.n	8001246 <QpskModem_Demodulate+0x32e>
        data_out[i] = (symbols[i*4+0] << 6) | (symbols[i*4+1] << 4) | (symbols[i*4+2] << 2) | (symbols[i*4+3]);
 80011c2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80011cc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	3301      	adds	r3, #1
 80011e0:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80011e4:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80011e8:	5ccb      	ldrb	r3, [r1, r3]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8001200:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001204:	5ccb      	ldrb	r3, [r1, r3]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b25a      	sxtb	r2, r3
 8001210:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3303      	adds	r3, #3
 8001218:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800121c:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b259      	sxtb	r1, r3
 8001228:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800122c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001230:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	4413      	add	r3, r2
 8001238:	b2ca      	uxtb	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < *len_out; i++) {
 800123c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001240:	3301      	adds	r3, #1
 8001242:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 8001246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800124a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8001256:	429a      	cmp	r2, r3
 8001258:	d3b3      	bcc.n	80011c2 <QpskModem_Demodulate+0x2aa>
    }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001262:	46bd      	mov	sp, r7
 8001264:	bdb0      	pop	{r4, r5, r7, pc}
 8001266:	bf00      	nop
 8001268:	54442d18 	.word	0x54442d18
 800126c:	401921fb 	.word	0x401921fb

08001270 <QpskModem_SymbolsToIQ>:


void QpskModem_SymbolsToIQ(QpskModem* modem){
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < modem ->num_symbols; i++){
 8001278:	2300      	movs	r3, #0
 800127a:	81fb      	strh	r3, [r7, #14]
 800127c:	e01d      	b.n	80012ba <QpskModem_SymbolsToIQ+0x4a>
		modem->iq[2*i] = QPSK_I[modem->symbols[i]];
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	4619      	mov	r1, r3
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4a16      	ldr	r2, [pc, #88]	@ (80012e4 <QpskModem_SymbolsToIQ+0x74>)
 800128c:	5651      	ldrsb	r1, [r2, r1]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	460a      	mov	r2, r1
 8001294:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
		modem->iq[2*i+1] = QPSK_Q[modem->symbols[i]];
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	4619      	mov	r1, r3
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <QpskModem_SymbolsToIQ+0x78>)
 80012a8:	5651      	ldrsb	r1, [r2, r1]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	for (uint16_t i=0; i < modem ->num_symbols; i++){
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	3301      	adds	r3, #1
 80012b8:	81fb      	strh	r3, [r7, #14]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80012c0:	89fa      	ldrh	r2, [r7, #14]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d3db      	bcc.n	800127e <QpskModem_SymbolsToIQ+0xe>
	}
	modem->num_iq = modem->num_symbols*2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8a3 2302 	strh.w	r2, [r3, #770]	@ 0x302
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	08004404 	.word	0x08004404
 80012e8:	08004408 	.word	0x08004408

080012ec <QpskModem_GenerateSignal>:

void QpskModem_GenerateSignal(QpskModem* modem, QpskRingBuffer* txbuf, float amplitude) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	ed2d 8b02 	vpush	{d8}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t global_sample = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint16_t s = 0; s < modem->num_symbols; s++) {
 8001302:	2300      	movs	r3, #0
 8001304:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001306:	e082      	b.n	800140e <QpskModem_GenerateSignal+0x122>
        float I = QPSK_I[modem->symbols[s]] / 127.0f;
 8001308:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	461a      	mov	r2, r3
 8001310:	4b46      	ldr	r3, [pc, #280]	@ (800142c <QpskModem_GenerateSignal+0x140>)
 8001312:	569b      	ldrsb	r3, [r3, r2]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001430 <QpskModem_GenerateSignal+0x144>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	edc7 7a07 	vstr	s15, [r7, #28]
        float Q = QPSK_Q[modem->symbols[s]] / 127.0f;
 8001328:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	461a      	mov	r2, r3
 8001330:	4b40      	ldr	r3, [pc, #256]	@ (8001434 <QpskModem_GenerateSignal+0x148>)
 8001332:	569b      	ldrsb	r3, [r3, r2]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133c:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001430 <QpskModem_GenerateSignal+0x144>
 8001340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001344:	edc7 7a06 	vstr	s15, [r7, #24]
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 8001348:	2300      	movs	r3, #0
 800134a:	843b      	strh	r3, [r7, #32]
 800134c:	e056      	b.n	80013fc <QpskModem_GenerateSignal+0x110>
            float t = (float)global_sample / modem->fs;
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 800135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001362:	edc7 7a05 	vstr	s15, [r7, #20]
            float sample = amplitude * (I * cosf(2 * PI * modem->f0 * t) + Q * sinf(2 * PI * modem->f0 * t));
 8001366:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8001438 <QpskModem_GenerateSignal+0x14c>
 800136a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001378:	edd7 7a05 	vldr	s15, [r7, #20]
 800137c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	f002 fabe 	bl	8003904 <cosf>
 8001388:	eeb0 7a40 	vmov.f32	s14, s0
 800138c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001390:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001394:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8001438 <QpskModem_GenerateSignal+0x14c>
 8001398:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80013a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	f002 faeb 	bl	800398c <sinf>
 80013b6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc7 7a04 	vstr	s15, [r7, #16]
            QpskRingBuffer_Put(txbuf, (int16_t)(sample * 2047.0f));
 80013d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800143c <QpskModem_GenerateSignal+0x150>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f000 f86f 	bl	80014ce <QpskRingBuffer_Put>
        for (uint16_t n = 0; n < modem->samples_per_symbol; n++, global_sample++) {
 80013f0:	8c3b      	ldrh	r3, [r7, #32]
 80013f2:	3301      	adds	r3, #1
 80013f4:	843b      	strh	r3, [r7, #32]
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	3301      	adds	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8001402:	8c3a      	ldrh	r2, [r7, #32]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3a2      	bcc.n	800134e <QpskModem_GenerateSignal+0x62>
    for (uint16_t s = 0; s < modem->num_symbols; s++) {
 8001408:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800140a:	3301      	adds	r3, #1
 800140c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001414:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001416:	429a      	cmp	r2, r3
 8001418:	f4ff af76 	bcc.w	8001308 <QpskModem_GenerateSignal+0x1c>
        }
    }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	ecbd 8b02 	vpop	{d8}
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08004404 	.word	0x08004404
 8001430:	42fe0000 	.word	0x42fe0000
 8001434:	08004408 	.word	0x08004408
 8001438:	40490fdb 	.word	0x40490fdb
 800143c:	44ffe000 	.word	0x44ffe000

08001440 <QpskRingBuffer_Init>:

//Buffer Functions

void QpskRingBuffer_Init(QpskRingBuffer* rb){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800144e:	461a      	mov	r2, r3
 8001450:	2300      	movs	r3, #0
 8001452:	6013      	str	r3, [r2, #0]
	rb->tail = 0;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800145a:	461a      	mov	r2, r3
 800145c:	2300      	movs	r3, #0
 800145e:	6053      	str	r3, [r2, #4]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <QpskRingBuffer_IsFull>:

uint8_t QpskRingBuffer_IsFull(const QpskRingBuffer* rb){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return ((rb->head + 1) % QPSK_RINGBUF_SIZE) == rb->tail;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	bf0c      	ite	eq
 800148e:	2301      	moveq	r3, #1
 8001490:	2300      	movne	r3, #0
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <QpskRingBuffer_IsEmpty>:

uint8_t QpskRingBuffer_IsEmpty(const QpskRingBuffer* rb){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	return rb->head == rb->tail;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <QpskRingBuffer_Put>:

void QpskRingBuffer_Put(QpskRingBuffer* rb, int16_t value) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
    if (!QpskRingBuffer_IsFull(rb)) {
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffc6 	bl	800146c <QpskRingBuffer_IsFull>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d112      	bne.n	800150c <QpskRingBuffer_Put+0x3e>
        rb->buf[rb->head] = value;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8879      	ldrh	r1, [r7, #2]
 80014f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        rb->head = (rb->head + 1) % QPSK_RINGBUF_SIZE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800150a:	6013      	str	r3, [r2, #0]
    }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <QpskRingBuffer_Get>:

int16_t QpskRingBuffer_Get(QpskRingBuffer* rb) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    int16_t val = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	81fb      	strh	r3, [r7, #14]
    if (!QpskRingBuffer_IsEmpty(rb)) {
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffbd 	bl	80014a0 <QpskRingBuffer_IsEmpty>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d112      	bne.n	8001552 <QpskRingBuffer_Get+0x3e>
        val = rb->buf[rb->tail];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800153a:	81fb      	strh	r3, [r7, #14]
        rb->tail = (rb->tail + 1) % QPSK_RINGBUF_SIZE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001550:	6053      	str	r3, [r2, #4]
    }
    return val;
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <QpskRingBuffer_Available>:

uint32_t QpskRingBuffer_Available(const QpskRingBuffer* rb) {
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
    // Returns the number of elements currently in the buffer
    if (rb->head >= rb->tail)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d309      	bcc.n	800158e <QpskRingBuffer_Available+0x30>
        return rb->head - rb->tail;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	e00a      	b.n	80015a4 <QpskRingBuffer_Available+0x46>
    else
        return QPSK_RINGBUF_SIZE - (rb->tail - rb->head);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <Qpsk_SimulateReception>:


// TESTS FUNCTION

void Qpsk_SimulateReception(QpskRingBuffer* txbuf, QpskRingBuffer* rxbuf) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
    while (!QpskRingBuffer_IsEmpty(txbuf) && !QpskRingBuffer_IsFull(rxbuf)) {
 80015ba:	e00a      	b.n	80015d2 <Qpsk_SimulateReception+0x22>
        int16_t val = QpskRingBuffer_Get(txbuf);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffa9 	bl	8001514 <QpskRingBuffer_Get>
 80015c2:	4603      	mov	r3, r0
 80015c4:	81fb      	strh	r3, [r7, #14]
        QpskRingBuffer_Put(rxbuf, val);
 80015c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ca:	4619      	mov	r1, r3
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f7ff ff7e 	bl	80014ce <QpskRingBuffer_Put>
    while (!QpskRingBuffer_IsEmpty(txbuf) && !QpskRingBuffer_IsFull(rxbuf)) {
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff64 	bl	80014a0 <QpskRingBuffer_IsEmpty>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <Qpsk_SimulateReception+0x3a>
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff ff44 	bl	800146c <QpskRingBuffer_IsFull>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0e8      	beq.n	80015bc <Qpsk_SimulateReception+0xc>
    }
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_ADC_MspInit+0x7c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d127      	bne.n	80016b6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_ADC_MspInit+0x80>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a2:	2303      	movs	r3, #3
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_ADC_MspInit+0x84>)
 80016b2:	f000 fe7d 	bl	80023b0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40012000 	.word	0x40012000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_UART_MspInit+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_UART_MspInit+0x88>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_UART_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001726:	230c      	movs	r3, #12
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001736:	2307      	movs	r3, #7
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_UART_MspInit+0x8c>)
 8001742:	f000 fe35 	bl	80023b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40004400 	.word	0x40004400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 fa85 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <CalcChecksum>:


#include "uart_protocol.h"
#include "stm32f4xx_hal.h"

static uint8_t CalcChecksum(uint16_t cmd, uint16_t len, uint8_t* payload) {
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	80fb      	strh	r3, [r7, #6]
 80017ec:	460b      	mov	r3, r1
 80017ee:	80bb      	strh	r3, [r7, #4]
    uint8_t cs = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
    cs ^= 0xFE;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	f083 0301 	eor.w	r3, r3, #1
 80017fa:	43db      	mvns	r3, r3
 80017fc:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 8) & 0xFF;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	b25a      	sxtb	r2, r3
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4053      	eors	r3, r2
 800180c:	b25b      	sxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
    cs ^= (cmd >> 0) & 0xFF;
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	b25a      	sxtb	r2, r3
 8001814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001818:	4053      	eors	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 8) & 0xFF;
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	b25a      	sxtb	r2, r3
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4053      	eors	r3, r2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	73fb      	strb	r3, [r7, #15]
    cs ^= (len >> 0) & 0xFF;
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	b25a      	sxtb	r2, r3
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	4053      	eors	r3, r2
 800183a:	b25b      	sxtb	r3, r3
 800183c:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	81bb      	strh	r3, [r7, #12]
 8001842:	e009      	b.n	8001858 <CalcChecksum+0x78>
        cs ^= payload[i];
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	4053      	eors	r3, r2
 8001850:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len; i++) {
 8001852:	89bb      	ldrh	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	81bb      	strh	r3, [r7, #12]
 8001858:	89ba      	ldrh	r2, [r7, #12]
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3f1      	bcc.n	8001844 <CalcChecksum+0x64>
    }
    return cs;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <UartProtocol_Init>:

void UartProtocol_Init(UartProtocol* proto, FrameReceivedCallback cb) {
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
    proto->rx_state = WAIT_SOF;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
    proto->rx_cmd = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	805a      	strh	r2, [r3, #2]
    proto->rx_len = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	809a      	strh	r2, [r3, #4]
    proto->rx_payload_idx = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	80da      	strh	r2, [r3, #6]
    proto->rx_checksum = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	721a      	strb	r2, [r3, #8]
    proto->rx_calc_checksum = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	725a      	strb	r2, [r3, #9]
    proto->onFrameReceived = cb;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <UartProtocol_ParseByte>:

void UartProtocol_ParseByte(UartProtocol* proto, uint8_t c) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
    switch(proto->rx_state) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b06      	cmp	r3, #6
 80018c2:	f200 80b1 	bhi.w	8001a28 <UartProtocol_ParseByte+0x178>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <UartProtocol_ParseByte+0x1c>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018e9 	.word	0x080018e9
 80018d0:	080018ff 	.word	0x080018ff
 80018d4:	08001921 	.word	0x08001921
 80018d8:	08001947 	.word	0x08001947
 80018dc:	08001969 	.word	0x08001969
 80018e0:	080019b7 	.word	0x080019b7
 80018e4:	080019ef 	.word	0x080019ef
        case WAIT_SOF:
            if (c == 0xFE) {
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80018ec:	f040 80a0 	bne.w	8001a30 <UartProtocol_ParseByte+0x180>
                proto->rx_state = READ_CMD_MSB;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
                proto->rx_calc_checksum = 0xFE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	22fe      	movs	r2, #254	@ 0xfe
 80018fa:	725a      	strb	r2, [r3, #9]
            }
            break;
 80018fc:	e098      	b.n	8001a30 <UartProtocol_ParseByte+0x180>
        case READ_CMD_MSB:
            proto->rx_cmd = ((uint16_t)c) << 8;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	b29b      	uxth	r3, r3
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5a      	ldrb	r2, [r3, #9]
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	4053      	eors	r3, r2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_CMD_LSB;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
            break;
 800191e:	e08a      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
        case READ_CMD_LSB:
            proto->rx_cmd |= c;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	885a      	ldrh	r2, [r3, #2]
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	805a      	strh	r2, [r3, #2]
            proto->rx_calc_checksum ^= c;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a5a      	ldrb	r2, [r3, #9]
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	4053      	eors	r3, r2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_MSB;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	701a      	strb	r2, [r3, #0]
            break;
 8001944:	e077      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
        case READ_LEN_MSB:
            proto->rx_len = ((uint16_t)c) << 8;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7a5a      	ldrb	r2, [r3, #9]
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	4053      	eors	r3, r2
 800195a:	b2da      	uxtb	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	725a      	strb	r2, [r3, #9]
            proto->rx_state = READ_LEN_LSB;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
            break;
 8001966:	e066      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
        case READ_LEN_LSB:
            proto->rx_len |= c;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	889a      	ldrh	r2, [r3, #4]
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	809a      	strh	r2, [r3, #4]
            proto->rx_calc_checksum ^= c;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a5a      	ldrb	r2, [r3, #9]
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	4053      	eors	r3, r2
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	725a      	strb	r2, [r3, #9]
            if (proto->rx_len > FRAME_MAX_PAYLOAD) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	889b      	ldrh	r3, [r3, #4]
 800198a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800198e:	d903      	bls.n	8001998 <UartProtocol_ParseByte+0xe8>
                proto->rx_state = WAIT_SOF;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
                proto->rx_state = READ_CHECKSUM;
            } else {
                proto->rx_payload_idx = 0;
                proto->rx_state = READ_PAYLOAD;
            }
            break;
 8001996:	e04e      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
            } else if (proto->rx_len == 0) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	889b      	ldrh	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <UartProtocol_ParseByte+0xf8>
                proto->rx_state = READ_CHECKSUM;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2206      	movs	r2, #6
 80019a4:	701a      	strb	r2, [r3, #0]
            break;
 80019a6:	e046      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
                proto->rx_payload_idx = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	80da      	strh	r2, [r3, #6]
                proto->rx_state = READ_PAYLOAD;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2205      	movs	r2, #5
 80019b2:	701a      	strb	r2, [r3, #0]
            break;
 80019b4:	e03f      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
        case READ_PAYLOAD:
            proto->frame_payload[proto->rx_payload_idx++] = c;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	88db      	ldrh	r3, [r3, #6]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	b291      	uxth	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	80d1      	strh	r1, [r2, #6]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	729a      	strb	r2, [r3, #10]
            proto->rx_calc_checksum ^= c;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7a5a      	ldrb	r2, [r3, #9]
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	4053      	eors	r3, r2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	725a      	strb	r2, [r3, #9]
            if (proto->rx_payload_idx >= proto->rx_len) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	88da      	ldrh	r2, [r3, #6]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	889b      	ldrh	r3, [r3, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d326      	bcc.n	8001a34 <UartProtocol_ParseByte+0x184>
                proto->rx_state = READ_CHECKSUM;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2206      	movs	r2, #6
 80019ea:	701a      	strb	r2, [r3, #0]
            }
            break;
 80019ec:	e022      	b.n	8001a34 <UartProtocol_ParseByte+0x184>
        case READ_CHECKSUM:
            proto->rx_checksum = c;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	721a      	strb	r2, [r3, #8]
            if (proto->rx_checksum == proto->rx_calc_checksum && proto->onFrameReceived) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1a      	ldrb	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7a5b      	ldrb	r3, [r3, #9]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10f      	bne.n	8001a20 <UartProtocol_ParseByte+0x170>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <UartProtocol_ParseByte+0x170>
                proto->onFrameReceived(proto, proto->rx_cmd, proto->rx_len, proto->frame_payload);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8d3 410c 	ldr.w	r4, [r3, #268]	@ 0x10c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8859      	ldrh	r1, [r3, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	889a      	ldrh	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	330a      	adds	r3, #10
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	47a0      	blx	r4
            }
            proto->rx_state = WAIT_SOF;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
            break;
 8001a26:	e006      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
        default:
            proto->rx_state = WAIT_SOF;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
            break;
 8001a2e:	e002      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
            break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <UartProtocol_ParseByte+0x186>
            break;
 8001a34:	bf00      	nop
    }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop

08001a40 <UartProtocol_SendFrame>:

void UartProtocol_SendFrame(UART_HandleTypeDef* huart, uint16_t cmd, uint16_t len, uint8_t* payload) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b0c9      	sub	sp, #292	@ 0x124
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001a4a:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001a4e:	6020      	str	r0, [r4, #0]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001a58:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a62:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001a66:	4602      	mov	r2, r0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a72:	460a      	mov	r2, r1
 8001a74:	801a      	strh	r2, [r3, #0]
    uint8_t tx_buf[6 + FRAME_MAX_PAYLOAD];
    int pos = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tx_buf[pos++] = 0xFE;
 8001a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a86:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001a8a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a8e:	21fe      	movs	r1, #254	@ 0xfe
 8001a90:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 8) & 0xFF;
 8001a92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a96:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	b299      	uxth	r1, r3
 8001aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001aaa:	b2c9      	uxtb	r1, r1
 8001aac:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ab0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001ab4:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (cmd >> 0) & 0xFF;
 8001ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ac0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ac4:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	b2d1      	uxtb	r1, r2
 8001acc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ad0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001ad4:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 8) & 0xFF;
 8001ad6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ada:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001aee:	b2c9      	uxtb	r1, r1
 8001af0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001af4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001af8:	54d1      	strb	r1, [r2, r3]
    tx_buf[pos++] = (len >> 0) & 0xFF;
 8001afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b04:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b08:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	b2d1      	uxtb	r1, r2
 8001b10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b14:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001b18:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b20:	e017      	b.n	8001b52 <UartProtocol_SendFrame+0x112>
        tx_buf[pos++] = payload[i];
 8001b22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b26:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b2a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	441a      	add	r2, r3
 8001b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8001b3c:	7811      	ldrb	r1, [r2, #0]
 8001b3e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b42:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001b46:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < len; i++) {
 8001b48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001b52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbde      	blt.n	8001b22 <UartProtocol_SendFrame+0xe2>
    }
    uint8_t cs = CalcChecksum(cmd, len, payload);
 8001b64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b68:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b6c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b70:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001b74:	8811      	ldrh	r1, [r2, #0]
 8001b76:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b7a:	f5a2 728b 	sub.w	r2, r2, #278	@ 0x116
 8001b7e:	8810      	ldrh	r0, [r2, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f7ff fe2d 	bl	80017e0 <CalcChecksum>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    tx_buf[pos++] = cs;
 8001b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b96:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b9a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001b9e:	f897 1117 	ldrb.w	r1, [r7, #279]	@ 0x117
 8001ba2:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(huart, tx_buf, pos, 100);
 8001ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f107 0110 	add.w	r1, r7, #16
 8001bae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bb2:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8001bb6:	2364      	movs	r3, #100	@ 0x64
 8001bb8:	6800      	ldr	r0, [r0, #0]
 8001bba:	f001 fa25 	bl	8003008 <HAL_UART_Transmit>
}
 8001bbe:	bf00      	nop
 8001bc0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bcc:	f7ff fdf6 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f001 fe61 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff f801 	bl	8000c00 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c0c:	08004804 	.word	0x08004804
  ldr r2, =_sbss
 8001c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c14:	200043dc 	.word	0x200043dc

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 fb7f 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff fcd0 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fb89 	bl	8002396 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 fb5f 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200043d8 	.word	0x200043d8

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200043d8 	.word	0x200043d8

08001d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e033      	b.n	8001d7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fc90 	bl	8001644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d46:	f023 0302 	bic.w	r3, r3, #2
 8001d4a:	f043 0202 	orr.w	r2, r3, #2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f94a 	bl	8001fec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d6e:	e001      	b.n	8001d74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1c>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e113      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x244>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d925      	bls.n	8001e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68d9      	ldr	r1, [r3, #12]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b1e      	subs	r3, #30
 8001dca:	2207      	movs	r2, #7
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4403      	add	r3, r0
 8001df2:	3b1e      	subs	r3, #30
 8001df4:	409a      	lsls	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	e022      	b.n	8001e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	2207      	movs	r2, #7
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	400a      	ands	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6919      	ldr	r1, [r3, #16]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	4603      	mov	r3, r0
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4403      	add	r3, r0
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d824      	bhi.n	8001e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b05      	subs	r3, #5
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b05      	subs	r3, #5
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e96:	e04c      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d824      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b23      	subs	r3, #35	@ 0x23
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b23      	subs	r3, #35	@ 0x23
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee8:	e023      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b41      	subs	r3, #65	@ 0x41
 8001efc:	221f      	movs	r2, #31
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b41      	subs	r3, #65	@ 0x41
 8001f26:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f32:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x250>)
 8001f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <HAL_ADC_ConfigChannel+0x254>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d10f      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d8>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b12      	cmp	r3, #18
 8001f46:	d10b      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <HAL_ADC_ConfigChannel+0x254>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x258>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x1f4>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d122      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x258>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x260>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9a      	lsrs	r2, r3, #18
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	40012000 	.word	0x40012000
 8001fe0:	10000012 	.word	0x10000012
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff4:	4b79      	ldr	r3, [pc, #484]	@ (80021dc <ADC_Init+0x1f0>)
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	4a58      	ldr	r2, [pc, #352]	@ (80021e0 <ADC_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e00f      	b.n	80020ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0202 	bic.w	r2, r2, #2
 80020f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
 8002104:	005a      	lsls	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002126:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	3b01      	subs	r3, #1
 8002144:	035a      	lsls	r2, r3, #13
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e007      	b.n	8002160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800215e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	3b01      	subs	r3, #1
 800217c:	051a      	lsls	r2, r3, #20
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021a2:	025a      	lsls	r2, r3, #9
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	029a      	lsls	r2, r3, #10
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40012300 	.word	0x40012300
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	@ (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	@ (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff47 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff5c 	bl	800222c <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffb0 	bl	8002304 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e159      	b.n	8002680 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8148 	bne.w	800267a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a2 	beq.w	800267a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b57      	ldr	r3, [pc, #348]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a56      	ldr	r2, [pc, #344]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b54      	ldr	r3, [pc, #336]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a52      	ldr	r2, [pc, #328]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a49      	ldr	r2, [pc, #292]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x202>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a48      	ldr	r2, [pc, #288]	@ (80026a4 <HAL_GPIO_Init+0x2f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x1fe>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <HAL_GPIO_Init+0x2f8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x1fa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a46      	ldr	r2, [pc, #280]	@ (80026ac <HAL_GPIO_Init+0x2fc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x1f6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a45      	ldr	r2, [pc, #276]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x1f2>
 800259e:	2304      	movs	r3, #4
 80025a0:	e008      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a6:	2303      	movs	r3, #3
 80025a8:	e004      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025b2:	2300      	movs	r3, #0
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f002 0203 	and.w	r2, r2, #3
 80025ba:	0092      	lsls	r2, r2, #2
 80025bc:	4093      	lsls	r3, r2
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c4:	4935      	ldr	r1, [pc, #212]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a2f      	ldr	r2, [pc, #188]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a24      	ldr	r2, [pc, #144]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264a:	4a1a      	ldr	r2, [pc, #104]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b0f      	cmp	r3, #15
 8002684:	f67f aea2 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40013800 	.word	0x40013800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e267      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026d6:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b7e      	ldr	r3, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e242      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b70      	ldr	r3, [pc, #448]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6c      	ldr	r2, [pc, #432]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a68      	ldr	r2, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff faba 	bl	8001ce8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fab6 	bl	8001ce8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e207      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff faa6 	bl	8001ce8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff faa2 	bl	8001ce8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f3      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4937      	ldr	r1, [pc, #220]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff fa5b 	bl	8001ce8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff fa57 	bl	8001ce8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a8      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4925      	ldr	r1, [pc, #148]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff fa3a 	bl	8001ce8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff fa36 	bl	8001ce8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e187      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d036      	beq.n	8002910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff fa1a 	bl	8001ce8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff fa16 	bl	8001ce8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e167      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff fa03 	bl	8001ce8 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00e      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff f9ff 	bl	8001ce8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d907      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e150      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ea      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b77      	ldr	r3, [pc, #476]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b74      	ldr	r3, [pc, #464]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a73      	ldr	r2, [pc, #460]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7ff f9bf 	bl	8001ce8 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7ff f9bb 	bl	8001ce8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ea>
 8002994:	4b64      	ldr	r3, [pc, #400]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a63      	ldr	r2, [pc, #396]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x30c>
 80029aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029c4:	4b58      	ldr	r3, [pc, #352]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d0:	4b55      	ldr	r3, [pc, #340]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a54      	ldr	r2, [pc, #336]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff f980 	bl	8001ce8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7ff f97c 	bl	8001ce8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0cb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCC_OscConfig+0x334>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7ff f96a 	bl	8001ce8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7ff f966 	bl	8001ce8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0b5      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	4a38      	ldr	r2, [pc, #224]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a1 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d05c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d141      	bne.n	8002aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f93a 	bl	8001ce8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f936 	bl	8001ce8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e087      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	491b      	ldr	r1, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f90f 	bl	8001ce8 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7ff f90b 	bl	8001ce8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x416>
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff f8f8 	bl	8001ce8 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff f8f4 	bl	8001ce8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e038      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d028      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d121      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7ff f826 	bl	8001ce8 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7ff f822 	bl	8001ce8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff86 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	0800440c 	.word	0x0800440c
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b090      	sub	sp, #64	@ 0x40
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80a1 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dac:	e09b      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db2:	e098      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df4:	460a      	mov	r2, r1
 8002df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e0e:	f7fd fd19 	bl	8000844 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e1a:	e053      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e66:	ebb2 0408 	subs.w	r4, r2, r8
 8002e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	00eb      	lsls	r3, r5, #3
 8002e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	eb14 030a 	adds.w	r3, r4, sl
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	eb45 030b 	adc.w	r3, r5, fp
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb8:	f7fd fcc4 	bl	8000844 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	@ 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	0800441c 	.word	0x0800441c

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffdc 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	0800441c 	.word	0x0800441c

08002f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e042      	b.n	8003000 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fb9c 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa09 	bl	80033c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	@ 0x28
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b20      	cmp	r3, #32
 8003026:	d175      	bne.n	8003114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Transmit+0x2c>
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e06e      	b.n	8003116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2221      	movs	r2, #33	@ 0x21
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003046:	f7fe fe4f 	bl	8001ce8 <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003060:	d108      	bne.n	8003074 <HAL_UART_Transmit+0x6c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e003      	b.n	800307c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800307c:	e02e      	b.n	80030dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	@ 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f8df 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e03a      	b.n	8003116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cb      	bne.n	800307e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	@ 0x40
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8ab 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e006      	b.n	8003116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b08a      	sub	sp, #40	@ 0x28
 8003122:	af02      	add	r7, sp, #8
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	f040 8081 	bne.w	8003242 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Receive+0x2e>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e079      	b.n	8003244 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2222      	movs	r2, #34	@ 0x22
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003164:	f7fe fdc0 	bl	8001ce8 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	d108      	bne.n	8003192 <HAL_UART_Receive+0x74>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e003      	b.n	800319a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800319a:	e047      	b.n	800322c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2120      	movs	r1, #32
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f850 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e042      	b.n	8003244 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e01f      	b.n	800321e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e6:	d007      	beq.n	80031f8 <HAL_UART_Receive+0xda>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_UART_Receive+0xe8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e008      	b.n	8003218 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1b2      	bne.n	800319c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	e03b      	b.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d037      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fe fd3f 	bl	8001ce8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e03a      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d023      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d020      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b40      	cmp	r3, #64	@ 0x40
 8003298:	d01d      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d116      	bne.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f81d 	bl	80032fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2208      	movs	r2, #8
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d0b4      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032fe:	b480      	push	{r7}
 8003300:	b095      	sub	sp, #84	@ 0x54
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003326:	643a      	str	r2, [r7, #64]	@ 0x40
 8003328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800332c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	61fb      	str	r3, [r7, #28]
   return(result);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800335a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	2b01      	cmp	r3, #1
 8003374:	d119      	bne.n	80033aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	60bb      	str	r3, [r7, #8]
   return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	647b      	str	r3, [r7, #68]	@ 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003396:	61ba      	str	r2, [r7, #24]
 8003398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033b8:	bf00      	nop
 80033ba:	3754      	adds	r7, #84	@ 0x54
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b0c0      	sub	sp, #256	@ 0x100
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	ea40 0301 	orr.w	r3, r0, r1
 80033ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	431a      	orrs	r2, r3
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800341c:	f021 010c 	bic.w	r1, r1, #12
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800342a:	430b      	orrs	r3, r1
 800342c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	6999      	ldr	r1, [r3, #24]
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	ea40 0301 	orr.w	r3, r0, r1
 800344a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b8f      	ldr	r3, [pc, #572]	@ (8003690 <UART_SetConfig+0x2cc>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d005      	beq.n	8003464 <UART_SetConfig+0xa0>
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b8d      	ldr	r3, [pc, #564]	@ (8003694 <UART_SetConfig+0x2d0>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d104      	bne.n	800346e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff fd6c 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8003468:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800346c:	e003      	b.n	8003476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800346e:	f7ff fd53 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8003472:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003480:	f040 810c 	bne.w	800369c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800348e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	1891      	adds	r1, r2, r2
 800349c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800349e:	415b      	adcs	r3, r3
 80034a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034a6:	4621      	mov	r1, r4
 80034a8:	eb12 0801 	adds.w	r8, r2, r1
 80034ac:	4629      	mov	r1, r5
 80034ae:	eb43 0901 	adc.w	r9, r3, r1
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c6:	4690      	mov	r8, r2
 80034c8:	4699      	mov	r9, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	eb18 0303 	adds.w	r3, r8, r3
 80034d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034d4:	462b      	mov	r3, r5
 80034d6:	eb49 0303 	adc.w	r3, r9, r3
 80034da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034f2:	460b      	mov	r3, r1
 80034f4:	18db      	adds	r3, r3, r3
 80034f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f8:	4613      	mov	r3, r2
 80034fa:	eb42 0303 	adc.w	r3, r2, r3
 80034fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003508:	f7fd f99c 	bl	8000844 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b61      	ldr	r3, [pc, #388]	@ (8003698 <UART_SetConfig+0x2d4>)
 8003512:	fba3 2302 	umull	r2, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	011c      	lsls	r4, r3, #4
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003524:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003534:	415b      	adcs	r3, r3
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800353c:	4641      	mov	r1, r8
 800353e:	eb12 0a01 	adds.w	sl, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb43 0b01 	adc.w	fp, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800355c:	4692      	mov	sl, r2
 800355e:	469b      	mov	fp, r3
 8003560:	4643      	mov	r3, r8
 8003562:	eb1a 0303 	adds.w	r3, sl, r3
 8003566:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800356a:	464b      	mov	r3, r9
 800356c:	eb4b 0303 	adc.w	r3, fp, r3
 8003570:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003580:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003588:	460b      	mov	r3, r1
 800358a:	18db      	adds	r3, r3, r3
 800358c:	643b      	str	r3, [r7, #64]	@ 0x40
 800358e:	4613      	mov	r3, r2
 8003590:	eb42 0303 	adc.w	r3, r2, r3
 8003594:	647b      	str	r3, [r7, #68]	@ 0x44
 8003596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800359a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800359e:	f7fd f951 	bl	8000844 <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003698 <UART_SetConfig+0x2d4>)
 80035aa:	fba3 2301 	umull	r2, r3, r3, r1
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2264      	movs	r2, #100	@ 0x64
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	1acb      	subs	r3, r1, r3
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <UART_SetConfig+0x2d4>)
 80035c0:	fba3 2302 	umull	r2, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035cc:	441c      	add	r4, r3
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035e8:	415b      	adcs	r3, r3
 80035ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003624:	464b      	mov	r3, r9
 8003626:	460a      	mov	r2, r1
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800363c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003644:	460b      	mov	r3, r1
 8003646:	18db      	adds	r3, r3, r3
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364a:	4613      	mov	r3, r2
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800365a:	f7fd f8f3 	bl	8000844 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <UART_SetConfig+0x2d4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	@ 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	3332      	adds	r3, #50	@ 0x32
 8003676:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <UART_SetConfig+0x2d4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 0207 	and.w	r2, r3, #7
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4422      	add	r2, r4
 800368a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800368c:	e106      	b.n	800389c <UART_SetConfig+0x4d8>
 800368e:	bf00      	nop
 8003690:	40011000 	.word	0x40011000
 8003694:	40011400 	.word	0x40011400
 8003698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036ae:	4642      	mov	r2, r8
 80036b0:	464b      	mov	r3, r9
 80036b2:	1891      	adds	r1, r2, r2
 80036b4:	6239      	str	r1, [r7, #32]
 80036b6:	415b      	adcs	r3, r3
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036be:	4641      	mov	r1, r8
 80036c0:	1854      	adds	r4, r2, r1
 80036c2:	4649      	mov	r1, r9
 80036c4:	eb43 0501 	adc.w	r5, r3, r1
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	00eb      	lsls	r3, r5, #3
 80036d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d6:	00e2      	lsls	r2, r4, #3
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
 80036dc:	4643      	mov	r3, r8
 80036de:	18e3      	adds	r3, r4, r3
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036e4:	464b      	mov	r3, r9
 80036e6:	eb45 0303 	adc.w	r3, r5, r3
 80036ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800370a:	4629      	mov	r1, r5
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003714:	4621      	mov	r1, r4
 8003716:	008a      	lsls	r2, r1, #2
 8003718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800371c:	f7fd f892 	bl	8000844 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4b60      	ldr	r3, [pc, #384]	@ (80038a8 <UART_SetConfig+0x4e4>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	011c      	lsls	r4, r3, #4
 800372e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800373c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	1891      	adds	r1, r2, r2
 8003746:	61b9      	str	r1, [r7, #24]
 8003748:	415b      	adcs	r3, r3
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	4641      	mov	r1, r8
 8003752:	1851      	adds	r1, r2, r1
 8003754:	6139      	str	r1, [r7, #16]
 8003756:	4649      	mov	r1, r9
 8003758:	414b      	adcs	r3, r1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003768:	4659      	mov	r1, fp
 800376a:	00cb      	lsls	r3, r1, #3
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003772:	4651      	mov	r1, sl
 8003774:	00ca      	lsls	r2, r1, #3
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	4603      	mov	r3, r0
 800377c:	4642      	mov	r2, r8
 800377e:	189b      	adds	r3, r3, r2
 8003780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003784:	464b      	mov	r3, r9
 8003786:	460a      	mov	r2, r1
 8003788:	eb42 0303 	adc.w	r3, r2, r3
 800378c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800379a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037a8:	4649      	mov	r1, r9
 80037aa:	008b      	lsls	r3, r1, #2
 80037ac:	4641      	mov	r1, r8
 80037ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b2:	4641      	mov	r1, r8
 80037b4:	008a      	lsls	r2, r1, #2
 80037b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037ba:	f7fd f843 	bl	8000844 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b38      	ldr	r3, [pc, #224]	@ (80038a8 <UART_SetConfig+0x4e4>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2264      	movs	r2, #100	@ 0x64
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	1acb      	subs	r3, r1, r3
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	3332      	adds	r3, #50	@ 0x32
 80037d8:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <UART_SetConfig+0x4e4>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e4:	441c      	add	r4, r3
 80037e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ea:	2200      	movs	r2, #0
 80037ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80037ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80037f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037f4:	4642      	mov	r2, r8
 80037f6:	464b      	mov	r3, r9
 80037f8:	1891      	adds	r1, r2, r2
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	415b      	adcs	r3, r3
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003804:	4641      	mov	r1, r8
 8003806:	1851      	adds	r1, r2, r1
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	4649      	mov	r1, r9
 800380c:	414b      	adcs	r3, r1
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800381c:	4659      	mov	r1, fp
 800381e:	00cb      	lsls	r3, r1, #3
 8003820:	4651      	mov	r1, sl
 8003822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003826:	4651      	mov	r1, sl
 8003828:	00ca      	lsls	r2, r1, #3
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	4603      	mov	r3, r0
 8003830:	4642      	mov	r2, r8
 8003832:	189b      	adds	r3, r3, r2
 8003834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003836:	464b      	mov	r3, r9
 8003838:	460a      	mov	r2, r1
 800383a:	eb42 0303 	adc.w	r3, r2, r3
 800383e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	663b      	str	r3, [r7, #96]	@ 0x60
 800384a:	667a      	str	r2, [r7, #100]	@ 0x64
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003858:	4649      	mov	r1, r9
 800385a:	008b      	lsls	r3, r1, #2
 800385c:	4641      	mov	r1, r8
 800385e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003862:	4641      	mov	r1, r8
 8003864:	008a      	lsls	r2, r1, #2
 8003866:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800386a:	f7fc ffeb 	bl	8000844 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <UART_SetConfig+0x4e4>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	@ 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	3332      	adds	r3, #50	@ 0x32
 8003886:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <UART_SetConfig+0x4e4>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4422      	add	r2, r4
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038a2:	46bd      	mov	sp, r7
 80038a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <memset>:
 80038ac:	4402      	add	r2, r0
 80038ae:	4603      	mov	r3, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	@ (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	@ (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 fd8c 	bl	80043ec <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	080047fc 	.word	0x080047fc
 80038f8:	080047fc 	.word	0x080047fc
 80038fc:	080047fc 	.word	0x080047fc
 8003900:	08004800 	.word	0x08004800

08003904 <cosf>:
 8003904:	ee10 3a10 	vmov	r3, s0
 8003908:	b507      	push	{r0, r1, r2, lr}
 800390a:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <cosf+0x80>)
 800390c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003910:	4293      	cmp	r3, r2
 8003912:	d806      	bhi.n	8003922 <cosf+0x1e>
 8003914:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8003988 <cosf+0x84>
 8003918:	b003      	add	sp, #12
 800391a:	f85d eb04 	ldr.w	lr, [sp], #4
 800391e:	f000 b87b 	b.w	8003a18 <__kernel_cosf>
 8003922:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003926:	d304      	bcc.n	8003932 <cosf+0x2e>
 8003928:	ee30 0a40 	vsub.f32	s0, s0, s0
 800392c:	b003      	add	sp, #12
 800392e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003932:	4668      	mov	r0, sp
 8003934:	f000 f910 	bl	8003b58 <__ieee754_rem_pio2f>
 8003938:	f000 0003 	and.w	r0, r0, #3
 800393c:	2801      	cmp	r0, #1
 800393e:	d009      	beq.n	8003954 <cosf+0x50>
 8003940:	2802      	cmp	r0, #2
 8003942:	d010      	beq.n	8003966 <cosf+0x62>
 8003944:	b9b0      	cbnz	r0, 8003974 <cosf+0x70>
 8003946:	eddd 0a01 	vldr	s1, [sp, #4]
 800394a:	ed9d 0a00 	vldr	s0, [sp]
 800394e:	f000 f863 	bl	8003a18 <__kernel_cosf>
 8003952:	e7eb      	b.n	800392c <cosf+0x28>
 8003954:	eddd 0a01 	vldr	s1, [sp, #4]
 8003958:	ed9d 0a00 	vldr	s0, [sp]
 800395c:	f000 f8b4 	bl	8003ac8 <__kernel_sinf>
 8003960:	eeb1 0a40 	vneg.f32	s0, s0
 8003964:	e7e2      	b.n	800392c <cosf+0x28>
 8003966:	eddd 0a01 	vldr	s1, [sp, #4]
 800396a:	ed9d 0a00 	vldr	s0, [sp]
 800396e:	f000 f853 	bl	8003a18 <__kernel_cosf>
 8003972:	e7f5      	b.n	8003960 <cosf+0x5c>
 8003974:	eddd 0a01 	vldr	s1, [sp, #4]
 8003978:	ed9d 0a00 	vldr	s0, [sp]
 800397c:	2001      	movs	r0, #1
 800397e:	f000 f8a3 	bl	8003ac8 <__kernel_sinf>
 8003982:	e7d3      	b.n	800392c <cosf+0x28>
 8003984:	3f490fd8 	.word	0x3f490fd8
 8003988:	00000000 	.word	0x00000000

0800398c <sinf>:
 800398c:	ee10 3a10 	vmov	r3, s0
 8003990:	b507      	push	{r0, r1, r2, lr}
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <sinf+0x84>)
 8003994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003998:	4293      	cmp	r3, r2
 800399a:	d807      	bhi.n	80039ac <sinf+0x20>
 800399c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003a14 <sinf+0x88>
 80039a0:	2000      	movs	r0, #0
 80039a2:	b003      	add	sp, #12
 80039a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a8:	f000 b88e 	b.w	8003ac8 <__kernel_sinf>
 80039ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80039b0:	d304      	bcc.n	80039bc <sinf+0x30>
 80039b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80039b6:	b003      	add	sp, #12
 80039b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039bc:	4668      	mov	r0, sp
 80039be:	f000 f8cb 	bl	8003b58 <__ieee754_rem_pio2f>
 80039c2:	f000 0003 	and.w	r0, r0, #3
 80039c6:	2801      	cmp	r0, #1
 80039c8:	d00a      	beq.n	80039e0 <sinf+0x54>
 80039ca:	2802      	cmp	r0, #2
 80039cc:	d00f      	beq.n	80039ee <sinf+0x62>
 80039ce:	b9c0      	cbnz	r0, 8003a02 <sinf+0x76>
 80039d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80039d4:	ed9d 0a00 	vldr	s0, [sp]
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 f875 	bl	8003ac8 <__kernel_sinf>
 80039de:	e7ea      	b.n	80039b6 <sinf+0x2a>
 80039e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80039e4:	ed9d 0a00 	vldr	s0, [sp]
 80039e8:	f000 f816 	bl	8003a18 <__kernel_cosf>
 80039ec:	e7e3      	b.n	80039b6 <sinf+0x2a>
 80039ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80039f2:	ed9d 0a00 	vldr	s0, [sp]
 80039f6:	2001      	movs	r0, #1
 80039f8:	f000 f866 	bl	8003ac8 <__kernel_sinf>
 80039fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003a00:	e7d9      	b.n	80039b6 <sinf+0x2a>
 8003a02:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a06:	ed9d 0a00 	vldr	s0, [sp]
 8003a0a:	f000 f805 	bl	8003a18 <__kernel_cosf>
 8003a0e:	e7f5      	b.n	80039fc <sinf+0x70>
 8003a10:	3f490fd8 	.word	0x3f490fd8
 8003a14:	00000000 	.word	0x00000000

08003a18 <__kernel_cosf>:
 8003a18:	ee10 3a10 	vmov	r3, s0
 8003a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a20:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003a24:	eef0 6a40 	vmov.f32	s13, s0
 8003a28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003a2c:	d204      	bcs.n	8003a38 <__kernel_cosf+0x20>
 8003a2e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	b342      	cbz	r2, 8003a8a <__kernel_cosf+0x72>
 8003a38:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003a3c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003aa8 <__kernel_cosf+0x90>
 8003a40:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003aac <__kernel_cosf+0x94>
 8003a44:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <__kernel_cosf+0x98>)
 8003a46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003ab4 <__kernel_cosf+0x9c>
 8003a50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a54:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003ab8 <__kernel_cosf+0xa0>
 8003a58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003a5c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003abc <__kernel_cosf+0xa4>
 8003a60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a64:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003ac0 <__kernel_cosf+0xa8>
 8003a68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003a6c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003a70:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003a74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003a78:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	d804      	bhi.n	8003a8c <__kernel_cosf+0x74>
 8003a82:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003a86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003a8a:	4770      	bx	lr
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <__kernel_cosf+0xac>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bf9a      	itte	ls
 8003a92:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003a96:	ee07 3a10 	vmovls	s14, r3
 8003a9a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003a9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa6:	e7ec      	b.n	8003a82 <__kernel_cosf+0x6a>
 8003aa8:	ad47d74e 	.word	0xad47d74e
 8003aac:	310f74f6 	.word	0x310f74f6
 8003ab0:	3e999999 	.word	0x3e999999
 8003ab4:	b493f27c 	.word	0xb493f27c
 8003ab8:	37d00d01 	.word	0x37d00d01
 8003abc:	bab60b61 	.word	0xbab60b61
 8003ac0:	3d2aaaab 	.word	0x3d2aaaab
 8003ac4:	3f480000 	.word	0x3f480000

08003ac8 <__kernel_sinf>:
 8003ac8:	ee10 3a10 	vmov	r3, s0
 8003acc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003ad4:	d204      	bcs.n	8003ae0 <__kernel_sinf+0x18>
 8003ad6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003ada:	ee17 3a90 	vmov	r3, s15
 8003ade:	b35b      	cbz	r3, 8003b38 <__kernel_sinf+0x70>
 8003ae0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003ae4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003b3c <__kernel_sinf+0x74>
 8003ae8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003b40 <__kernel_sinf+0x78>
 8003aec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003af0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003b44 <__kernel_sinf+0x7c>
 8003af4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003af8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003b48 <__kernel_sinf+0x80>
 8003afc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003b00:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003b4c <__kernel_sinf+0x84>
 8003b04:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003b08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b0c:	b930      	cbnz	r0, 8003b1c <__kernel_sinf+0x54>
 8003b0e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003b50 <__kernel_sinf+0x88>
 8003b12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b16:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003b1a:	4770      	bx	lr
 8003b1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003b20:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003b24:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003b28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003b2c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003b54 <__kernel_sinf+0x8c>
 8003b30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003b34:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2f2ec9d3 	.word	0x2f2ec9d3
 8003b40:	b2d72f34 	.word	0xb2d72f34
 8003b44:	3638ef1b 	.word	0x3638ef1b
 8003b48:	b9500d01 	.word	0xb9500d01
 8003b4c:	3c088889 	.word	0x3c088889
 8003b50:	be2aaaab 	.word	0xbe2aaaab
 8003b54:	3e2aaaab 	.word	0x3e2aaaab

08003b58 <__ieee754_rem_pio2f>:
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	ee10 6a10 	vmov	r6, s0
 8003b5e:	4b88      	ldr	r3, [pc, #544]	@ (8003d80 <__ieee754_rem_pio2f+0x228>)
 8003b60:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003b64:	429d      	cmp	r5, r3
 8003b66:	b087      	sub	sp, #28
 8003b68:	4604      	mov	r4, r0
 8003b6a:	d805      	bhi.n	8003b78 <__ieee754_rem_pio2f+0x20>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	ed80 0a00 	vstr	s0, [r0]
 8003b72:	6043      	str	r3, [r0, #4]
 8003b74:	2000      	movs	r0, #0
 8003b76:	e022      	b.n	8003bbe <__ieee754_rem_pio2f+0x66>
 8003b78:	4b82      	ldr	r3, [pc, #520]	@ (8003d84 <__ieee754_rem_pio2f+0x22c>)
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	d83a      	bhi.n	8003bf4 <__ieee754_rem_pio2f+0x9c>
 8003b7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003b82:	2e00      	cmp	r6, #0
 8003b84:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003d88 <__ieee754_rem_pio2f+0x230>
 8003b88:	4a80      	ldr	r2, [pc, #512]	@ (8003d8c <__ieee754_rem_pio2f+0x234>)
 8003b8a:	f023 030f 	bic.w	r3, r3, #15
 8003b8e:	dd18      	ble.n	8003bc2 <__ieee754_rem_pio2f+0x6a>
 8003b90:	4293      	cmp	r3, r2
 8003b92:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003b96:	bf09      	itett	eq
 8003b98:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8003d90 <__ieee754_rem_pio2f+0x238>
 8003b9c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003d94 <__ieee754_rem_pio2f+0x23c>
 8003ba0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8003d98 <__ieee754_rem_pio2f+0x240>
 8003ba4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003ba8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003bac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bb0:	ed80 7a00 	vstr	s14, [r0]
 8003bb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bb8:	edc0 7a01 	vstr	s15, [r0, #4]
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	b007      	add	sp, #28
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003bc8:	bf09      	itett	eq
 8003bca:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8003d90 <__ieee754_rem_pio2f+0x238>
 8003bce:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003d94 <__ieee754_rem_pio2f+0x23c>
 8003bd2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8003d98 <__ieee754_rem_pio2f+0x240>
 8003bd6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003bda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003be2:	ed80 7a00 	vstr	s14, [r0]
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	edc0 7a01 	vstr	s15, [r0, #4]
 8003bee:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf2:	e7e4      	b.n	8003bbe <__ieee754_rem_pio2f+0x66>
 8003bf4:	4b69      	ldr	r3, [pc, #420]	@ (8003d9c <__ieee754_rem_pio2f+0x244>)
 8003bf6:	429d      	cmp	r5, r3
 8003bf8:	d873      	bhi.n	8003ce2 <__ieee754_rem_pio2f+0x18a>
 8003bfa:	f000 f8dd 	bl	8003db8 <fabsf>
 8003bfe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003da0 <__ieee754_rem_pio2f+0x248>
 8003c02:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003c06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c12:	ee17 0a90 	vmov	r0, s15
 8003c16:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003d88 <__ieee754_rem_pio2f+0x230>
 8003c1a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003c1e:	281f      	cmp	r0, #31
 8003c20:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003d94 <__ieee754_rem_pio2f+0x23c>
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	eeb1 6a47 	vneg.f32	s12, s14
 8003c2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003c30:	ee16 1a90 	vmov	r1, s13
 8003c34:	dc09      	bgt.n	8003c4a <__ieee754_rem_pio2f+0xf2>
 8003c36:	4a5b      	ldr	r2, [pc, #364]	@ (8003da4 <__ieee754_rem_pio2f+0x24c>)
 8003c38:	1e47      	subs	r7, r0, #1
 8003c3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003c3e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8003c42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d107      	bne.n	8003c5a <__ieee754_rem_pio2f+0x102>
 8003c4a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8003c4e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8003c52:	2a08      	cmp	r2, #8
 8003c54:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003c58:	dc14      	bgt.n	8003c84 <__ieee754_rem_pio2f+0x12c>
 8003c5a:	6021      	str	r1, [r4, #0]
 8003c5c:	ed94 7a00 	vldr	s14, [r4]
 8003c60:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003c64:	2e00      	cmp	r6, #0
 8003c66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c6a:	ed84 0a01 	vstr	s0, [r4, #4]
 8003c6e:	daa6      	bge.n	8003bbe <__ieee754_rem_pio2f+0x66>
 8003c70:	eeb1 7a47 	vneg.f32	s14, s14
 8003c74:	eeb1 0a40 	vneg.f32	s0, s0
 8003c78:	ed84 7a00 	vstr	s14, [r4]
 8003c7c:	ed84 0a01 	vstr	s0, [r4, #4]
 8003c80:	4240      	negs	r0, r0
 8003c82:	e79c      	b.n	8003bbe <__ieee754_rem_pio2f+0x66>
 8003c84:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8003d90 <__ieee754_rem_pio2f+0x238>
 8003c88:	eef0 6a40 	vmov.f32	s13, s0
 8003c8c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003c90:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003c94:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003c98:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d98 <__ieee754_rem_pio2f+0x240>
 8003c9c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003ca0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003ca4:	ee15 2a90 	vmov	r2, s11
 8003ca8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003cac:	1a5b      	subs	r3, r3, r1
 8003cae:	2b19      	cmp	r3, #25
 8003cb0:	dc04      	bgt.n	8003cbc <__ieee754_rem_pio2f+0x164>
 8003cb2:	edc4 5a00 	vstr	s11, [r4]
 8003cb6:	eeb0 0a66 	vmov.f32	s0, s13
 8003cba:	e7cf      	b.n	8003c5c <__ieee754_rem_pio2f+0x104>
 8003cbc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8003da8 <__ieee754_rem_pio2f+0x250>
 8003cc0:	eeb0 0a66 	vmov.f32	s0, s13
 8003cc4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003cc8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003ccc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003dac <__ieee754_rem_pio2f+0x254>
 8003cd0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003cd4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003cd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003cdc:	ed84 7a00 	vstr	s14, [r4]
 8003ce0:	e7bc      	b.n	8003c5c <__ieee754_rem_pio2f+0x104>
 8003ce2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003ce6:	d306      	bcc.n	8003cf6 <__ieee754_rem_pio2f+0x19e>
 8003ce8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003cec:	edc0 7a01 	vstr	s15, [r0, #4]
 8003cf0:	edc0 7a00 	vstr	s15, [r0]
 8003cf4:	e73e      	b.n	8003b74 <__ieee754_rem_pio2f+0x1c>
 8003cf6:	15ea      	asrs	r2, r5, #23
 8003cf8:	3a86      	subs	r2, #134	@ 0x86
 8003cfa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d06:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003db0 <__ieee754_rem_pio2f+0x258>
 8003d0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d12:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003d16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d26:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d36:	edcd 7a05 	vstr	s15, [sp, #20]
 8003d3a:	d11e      	bne.n	8003d7a <__ieee754_rem_pio2f+0x222>
 8003d3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2302      	movne	r3, #2
 8003d4a:	491a      	ldr	r1, [pc, #104]	@ (8003db4 <__ieee754_rem_pio2f+0x25c>)
 8003d4c:	9101      	str	r1, [sp, #4]
 8003d4e:	2102      	movs	r1, #2
 8003d50:	9100      	str	r1, [sp, #0]
 8003d52:	a803      	add	r0, sp, #12
 8003d54:	4621      	mov	r1, r4
 8003d56:	f000 f837 	bl	8003dc8 <__kernel_rem_pio2f>
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	f6bf af2f 	bge.w	8003bbe <__ieee754_rem_pio2f+0x66>
 8003d60:	edd4 7a00 	vldr	s15, [r4]
 8003d64:	eef1 7a67 	vneg.f32	s15, s15
 8003d68:	edc4 7a00 	vstr	s15, [r4]
 8003d6c:	edd4 7a01 	vldr	s15, [r4, #4]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	edc4 7a01 	vstr	s15, [r4, #4]
 8003d78:	e782      	b.n	8003c80 <__ieee754_rem_pio2f+0x128>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e7e5      	b.n	8003d4a <__ieee754_rem_pio2f+0x1f2>
 8003d7e:	bf00      	nop
 8003d80:	3f490fd8 	.word	0x3f490fd8
 8003d84:	4016cbe3 	.word	0x4016cbe3
 8003d88:	3fc90f80 	.word	0x3fc90f80
 8003d8c:	3fc90fd0 	.word	0x3fc90fd0
 8003d90:	37354400 	.word	0x37354400
 8003d94:	37354443 	.word	0x37354443
 8003d98:	2e85a308 	.word	0x2e85a308
 8003d9c:	43490f80 	.word	0x43490f80
 8003da0:	3f22f984 	.word	0x3f22f984
 8003da4:	08004424 	.word	0x08004424
 8003da8:	2e85a300 	.word	0x2e85a300
 8003dac:	248d3132 	.word	0x248d3132
 8003db0:	43800000 	.word	0x43800000
 8003db4:	080044a4 	.word	0x080044a4

08003db8 <fabsf>:
 8003db8:	ee10 3a10 	vmov	r3, s0
 8003dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dc0:	ee00 3a10 	vmov	s0, r3
 8003dc4:	4770      	bx	lr
	...

08003dc8 <__kernel_rem_pio2f>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	ed2d 8b04 	vpush	{d8-d9}
 8003dd0:	b0d9      	sub	sp, #356	@ 0x164
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	9001      	str	r0, [sp, #4]
 8003dd6:	4ab6      	ldr	r2, [pc, #728]	@ (80040b0 <__kernel_rem_pio2f+0x2e8>)
 8003dd8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8003dda:	f118 0f04 	cmn.w	r8, #4
 8003dde:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8003de2:	460f      	mov	r7, r1
 8003de4:	f103 3bff 	add.w	fp, r3, #4294967295
 8003de8:	db26      	blt.n	8003e38 <__kernel_rem_pio2f+0x70>
 8003dea:	f1b8 0203 	subs.w	r2, r8, #3
 8003dee:	bf48      	it	mi
 8003df0:	f108 0204 	addmi.w	r2, r8, #4
 8003df4:	10d2      	asrs	r2, r2, #3
 8003df6:	1c55      	adds	r5, r2, #1
 8003df8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003dfa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 8003dfe:	00e8      	lsls	r0, r5, #3
 8003e00:	eba2 060b 	sub.w	r6, r2, fp
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8003e0a:	eb0a 0c0b 	add.w	ip, sl, fp
 8003e0e:	ac1c      	add	r4, sp, #112	@ 0x70
 8003e10:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8003e14:	2000      	movs	r0, #0
 8003e16:	4560      	cmp	r0, ip
 8003e18:	dd10      	ble.n	8003e3c <__kernel_rem_pio2f+0x74>
 8003e1a:	a91c      	add	r1, sp, #112	@ 0x70
 8003e1c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003e20:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8003e24:	2600      	movs	r6, #0
 8003e26:	4556      	cmp	r6, sl
 8003e28:	dc24      	bgt.n	8003e74 <__kernel_rem_pio2f+0xac>
 8003e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003e2e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 8003e32:	4684      	mov	ip, r0
 8003e34:	2400      	movs	r4, #0
 8003e36:	e016      	b.n	8003e66 <__kernel_rem_pio2f+0x9e>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	e7dc      	b.n	8003df6 <__kernel_rem_pio2f+0x2e>
 8003e3c:	42c6      	cmn	r6, r0
 8003e3e:	bf5d      	ittte	pl
 8003e40:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8003e44:	ee07 1a90 	vmovpl	s15, r1
 8003e48:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003e4c:	eef0 7a47 	vmovmi.f32	s15, s14
 8003e50:	ece4 7a01 	vstmia	r4!, {s15}
 8003e54:	3001      	adds	r0, #1
 8003e56:	e7de      	b.n	8003e16 <__kernel_rem_pio2f+0x4e>
 8003e58:	ecfe 6a01 	vldmia	lr!, {s13}
 8003e5c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003e60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003e64:	3401      	adds	r4, #1
 8003e66:	455c      	cmp	r4, fp
 8003e68:	ddf6      	ble.n	8003e58 <__kernel_rem_pio2f+0x90>
 8003e6a:	ece9 7a01 	vstmia	r9!, {s15}
 8003e6e:	3601      	adds	r6, #1
 8003e70:	3004      	adds	r0, #4
 8003e72:	e7d8      	b.n	8003e26 <__kernel_rem_pio2f+0x5e>
 8003e74:	a908      	add	r1, sp, #32
 8003e76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e7a:	9104      	str	r1, [sp, #16]
 8003e7c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003e7e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80040bc <__kernel_rem_pio2f+0x2f4>
 8003e82:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80040b8 <__kernel_rem_pio2f+0x2f0>
 8003e86:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003e8a:	9203      	str	r2, [sp, #12]
 8003e8c:	4654      	mov	r4, sl
 8003e8e:	00a2      	lsls	r2, r4, #2
 8003e90:	9205      	str	r2, [sp, #20]
 8003e92:	aa58      	add	r2, sp, #352	@ 0x160
 8003e94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003e98:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003e9c:	a944      	add	r1, sp, #272	@ 0x110
 8003e9e:	aa08      	add	r2, sp, #32
 8003ea0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003ea4:	4694      	mov	ip, r2
 8003ea6:	4626      	mov	r6, r4
 8003ea8:	2e00      	cmp	r6, #0
 8003eaa:	dc4c      	bgt.n	8003f46 <__kernel_rem_pio2f+0x17e>
 8003eac:	4628      	mov	r0, r5
 8003eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eb2:	f000 f9f1 	bl	8004298 <scalbnf>
 8003eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8003eba:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003ebe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003ec2:	f000 fa4f 	bl	8004364 <floorf>
 8003ec6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8003eca:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ed4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003ed8:	ee17 9a90 	vmov	r9, s15
 8003edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003ee4:	dd41      	ble.n	8003f6a <__kernel_rem_pio2f+0x1a2>
 8003ee6:	f104 3cff 	add.w	ip, r4, #4294967295
 8003eea:	a908      	add	r1, sp, #32
 8003eec:	f1c5 0e08 	rsb	lr, r5, #8
 8003ef0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8003ef4:	fa46 f00e 	asr.w	r0, r6, lr
 8003ef8:	4481      	add	r9, r0
 8003efa:	fa00 f00e 	lsl.w	r0, r0, lr
 8003efe:	1a36      	subs	r6, r6, r0
 8003f00:	f1c5 0007 	rsb	r0, r5, #7
 8003f04:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8003f08:	4106      	asrs	r6, r0
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	dd3c      	ble.n	8003f88 <__kernel_rem_pio2f+0x1c0>
 8003f0e:	f04f 0e00 	mov.w	lr, #0
 8003f12:	f109 0901 	add.w	r9, r9, #1
 8003f16:	4670      	mov	r0, lr
 8003f18:	4574      	cmp	r4, lr
 8003f1a:	dc68      	bgt.n	8003fee <__kernel_rem_pio2f+0x226>
 8003f1c:	2d00      	cmp	r5, #0
 8003f1e:	dd03      	ble.n	8003f28 <__kernel_rem_pio2f+0x160>
 8003f20:	2d01      	cmp	r5, #1
 8003f22:	d074      	beq.n	800400e <__kernel_rem_pio2f+0x246>
 8003f24:	2d02      	cmp	r5, #2
 8003f26:	d07d      	beq.n	8004024 <__kernel_rem_pio2f+0x25c>
 8003f28:	2e02      	cmp	r6, #2
 8003f2a:	d12d      	bne.n	8003f88 <__kernel_rem_pio2f+0x1c0>
 8003f2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003f30:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003f34:	b340      	cbz	r0, 8003f88 <__kernel_rem_pio2f+0x1c0>
 8003f36:	4628      	mov	r0, r5
 8003f38:	9306      	str	r3, [sp, #24]
 8003f3a:	f000 f9ad 	bl	8004298 <scalbnf>
 8003f3e:	9b06      	ldr	r3, [sp, #24]
 8003f40:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003f44:	e020      	b.n	8003f88 <__kernel_rem_pio2f+0x1c0>
 8003f46:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003f4a:	3e01      	subs	r6, #1
 8003f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f54:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003f58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003f5c:	ecac 0a01 	vstmia	ip!, {s0}
 8003f60:	ed30 0a01 	vldmdb	r0!, {s0}
 8003f64:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003f68:	e79e      	b.n	8003ea8 <__kernel_rem_pio2f+0xe0>
 8003f6a:	d105      	bne.n	8003f78 <__kernel_rem_pio2f+0x1b0>
 8003f6c:	1e60      	subs	r0, r4, #1
 8003f6e:	a908      	add	r1, sp, #32
 8003f70:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8003f74:	11f6      	asrs	r6, r6, #7
 8003f76:	e7c8      	b.n	8003f0a <__kernel_rem_pio2f+0x142>
 8003f78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003f7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	da31      	bge.n	8003fea <__kernel_rem_pio2f+0x222>
 8003f86:	2600      	movs	r6, #0
 8003f88:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	f040 8098 	bne.w	80040c4 <__kernel_rem_pio2f+0x2fc>
 8003f94:	1e60      	subs	r0, r4, #1
 8003f96:	2200      	movs	r2, #0
 8003f98:	4550      	cmp	r0, sl
 8003f9a:	da4b      	bge.n	8004034 <__kernel_rem_pio2f+0x26c>
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	d065      	beq.n	800406c <__kernel_rem_pio2f+0x2a4>
 8003fa0:	3c01      	subs	r4, #1
 8003fa2:	ab08      	add	r3, sp, #32
 8003fa4:	3d08      	subs	r5, #8
 8003fa6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f8      	beq.n	8003fa0 <__kernel_rem_pio2f+0x1d8>
 8003fae:	4628      	mov	r0, r5
 8003fb0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003fb4:	f000 f970 	bl	8004298 <scalbnf>
 8003fb8:	1c63      	adds	r3, r4, #1
 8003fba:	aa44      	add	r2, sp, #272	@ 0x110
 8003fbc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80040bc <__kernel_rem_pio2f+0x2f4>
 8003fc0:	0099      	lsls	r1, r3, #2
 8003fc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f280 80a9 	bge.w	8004120 <__kernel_rem_pio2f+0x358>
 8003fce:	4623      	mov	r3, r4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f2c0 80c7 	blt.w	8004164 <__kernel_rem_pio2f+0x39c>
 8003fd6:	aa44      	add	r2, sp, #272	@ 0x110
 8003fd8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003fdc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80040b4 <__kernel_rem_pio2f+0x2ec>
 8003fe0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	1ae2      	subs	r2, r4, r3
 8003fe8:	e0b1      	b.n	800414e <__kernel_rem_pio2f+0x386>
 8003fea:	2602      	movs	r6, #2
 8003fec:	e78f      	b.n	8003f0e <__kernel_rem_pio2f+0x146>
 8003fee:	f852 1b04 	ldr.w	r1, [r2], #4
 8003ff2:	b948      	cbnz	r0, 8004008 <__kernel_rem_pio2f+0x240>
 8003ff4:	b121      	cbz	r1, 8004000 <__kernel_rem_pio2f+0x238>
 8003ff6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8003ffa:	f842 1c04 	str.w	r1, [r2, #-4]
 8003ffe:	2101      	movs	r1, #1
 8004000:	f10e 0e01 	add.w	lr, lr, #1
 8004004:	4608      	mov	r0, r1
 8004006:	e787      	b.n	8003f18 <__kernel_rem_pio2f+0x150>
 8004008:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800400c:	e7f5      	b.n	8003ffa <__kernel_rem_pio2f+0x232>
 800400e:	f104 3cff 	add.w	ip, r4, #4294967295
 8004012:	aa08      	add	r2, sp, #32
 8004014:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004018:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800401c:	a908      	add	r1, sp, #32
 800401e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004022:	e781      	b.n	8003f28 <__kernel_rem_pio2f+0x160>
 8004024:	f104 3cff 	add.w	ip, r4, #4294967295
 8004028:	aa08      	add	r2, sp, #32
 800402a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800402e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004032:	e7f3      	b.n	800401c <__kernel_rem_pio2f+0x254>
 8004034:	a908      	add	r1, sp, #32
 8004036:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800403a:	3801      	subs	r0, #1
 800403c:	430a      	orrs	r2, r1
 800403e:	e7ab      	b.n	8003f98 <__kernel_rem_pio2f+0x1d0>
 8004040:	3201      	adds	r2, #1
 8004042:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004046:	2e00      	cmp	r6, #0
 8004048:	d0fa      	beq.n	8004040 <__kernel_rem_pio2f+0x278>
 800404a:	9905      	ldr	r1, [sp, #20]
 800404c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004050:	eb0d 0001 	add.w	r0, sp, r1
 8004054:	18e6      	adds	r6, r4, r3
 8004056:	a91c      	add	r1, sp, #112	@ 0x70
 8004058:	f104 0c01 	add.w	ip, r4, #1
 800405c:	384c      	subs	r0, #76	@ 0x4c
 800405e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004062:	4422      	add	r2, r4
 8004064:	4562      	cmp	r2, ip
 8004066:	da04      	bge.n	8004072 <__kernel_rem_pio2f+0x2aa>
 8004068:	4614      	mov	r4, r2
 800406a:	e710      	b.n	8003e8e <__kernel_rem_pio2f+0xc6>
 800406c:	9804      	ldr	r0, [sp, #16]
 800406e:	2201      	movs	r2, #1
 8004070:	e7e7      	b.n	8004042 <__kernel_rem_pio2f+0x27a>
 8004072:	9903      	ldr	r1, [sp, #12]
 8004074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004078:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	ee07 1a90 	vmov	s15, r1
 8004082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004086:	2400      	movs	r4, #0
 8004088:	ece6 7a01 	vstmia	r6!, {s15}
 800408c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 8004090:	46b1      	mov	r9, r6
 8004092:	455c      	cmp	r4, fp
 8004094:	dd04      	ble.n	80040a0 <__kernel_rem_pio2f+0x2d8>
 8004096:	ece0 7a01 	vstmia	r0!, {s15}
 800409a:	f10c 0c01 	add.w	ip, ip, #1
 800409e:	e7e1      	b.n	8004064 <__kernel_rem_pio2f+0x29c>
 80040a0:	ecfe 6a01 	vldmia	lr!, {s13}
 80040a4:	ed39 7a01 	vldmdb	r9!, {s14}
 80040a8:	3401      	adds	r4, #1
 80040aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80040ae:	e7f0      	b.n	8004092 <__kernel_rem_pio2f+0x2ca>
 80040b0:	080047e8 	.word	0x080047e8
 80040b4:	080047bc 	.word	0x080047bc
 80040b8:	43800000 	.word	0x43800000
 80040bc:	3b800000 	.word	0x3b800000
 80040c0:	00000000 	.word	0x00000000
 80040c4:	9b02      	ldr	r3, [sp, #8]
 80040c6:	eeb0 0a48 	vmov.f32	s0, s16
 80040ca:	eba3 0008 	sub.w	r0, r3, r8
 80040ce:	f000 f8e3 	bl	8004298 <scalbnf>
 80040d2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80040b8 <__kernel_rem_pio2f+0x2f0>
 80040d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	db19      	blt.n	8004114 <__kernel_rem_pio2f+0x34c>
 80040e0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80040bc <__kernel_rem_pio2f+0x2f4>
 80040e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80040e8:	aa08      	add	r2, sp, #32
 80040ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ee:	3508      	adds	r5, #8
 80040f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004100:	ee10 3a10 	vmov	r3, s0
 8004104:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004108:	ee17 3a90 	vmov	r3, s15
 800410c:	3401      	adds	r4, #1
 800410e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004112:	e74c      	b.n	8003fae <__kernel_rem_pio2f+0x1e6>
 8004114:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004118:	aa08      	add	r2, sp, #32
 800411a:	ee10 3a10 	vmov	r3, s0
 800411e:	e7f6      	b.n	800410e <__kernel_rem_pio2f+0x346>
 8004120:	a808      	add	r0, sp, #32
 8004122:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004126:	9001      	str	r0, [sp, #4]
 8004128:	ee07 0a90 	vmov	s15, r0
 800412c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004130:	3b01      	subs	r3, #1
 8004132:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004136:	ee20 0a07 	vmul.f32	s0, s0, s14
 800413a:	ed62 7a01 	vstmdb	r2!, {s15}
 800413e:	e743      	b.n	8003fc8 <__kernel_rem_pio2f+0x200>
 8004140:	ecfc 6a01 	vldmia	ip!, {s13}
 8004144:	ecb5 7a01 	vldmia	r5!, {s14}
 8004148:	eee6 7a87 	vfma.f32	s15, s13, s14
 800414c:	3001      	adds	r0, #1
 800414e:	4550      	cmp	r0, sl
 8004150:	dc01      	bgt.n	8004156 <__kernel_rem_pio2f+0x38e>
 8004152:	4290      	cmp	r0, r2
 8004154:	ddf4      	ble.n	8004140 <__kernel_rem_pio2f+0x378>
 8004156:	a858      	add	r0, sp, #352	@ 0x160
 8004158:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800415c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004160:	3b01      	subs	r3, #1
 8004162:	e735      	b.n	8003fd0 <__kernel_rem_pio2f+0x208>
 8004164:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004166:	2b02      	cmp	r3, #2
 8004168:	dc09      	bgt.n	800417e <__kernel_rem_pio2f+0x3b6>
 800416a:	2b00      	cmp	r3, #0
 800416c:	dc27      	bgt.n	80041be <__kernel_rem_pio2f+0x3f6>
 800416e:	d040      	beq.n	80041f2 <__kernel_rem_pio2f+0x42a>
 8004170:	f009 0007 	and.w	r0, r9, #7
 8004174:	b059      	add	sp, #356	@ 0x164
 8004176:	ecbd 8b04 	vpop	{d8-d9}
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004180:	2b03      	cmp	r3, #3
 8004182:	d1f5      	bne.n	8004170 <__kernel_rem_pio2f+0x3a8>
 8004184:	aa30      	add	r2, sp, #192	@ 0xc0
 8004186:	1f0b      	subs	r3, r1, #4
 8004188:	4413      	add	r3, r2
 800418a:	461a      	mov	r2, r3
 800418c:	4620      	mov	r0, r4
 800418e:	2800      	cmp	r0, #0
 8004190:	dc50      	bgt.n	8004234 <__kernel_rem_pio2f+0x46c>
 8004192:	4622      	mov	r2, r4
 8004194:	2a01      	cmp	r2, #1
 8004196:	dc5d      	bgt.n	8004254 <__kernel_rem_pio2f+0x48c>
 8004198:	ab30      	add	r3, sp, #192	@ 0xc0
 800419a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 800419e:	440b      	add	r3, r1
 80041a0:	2c01      	cmp	r4, #1
 80041a2:	dc67      	bgt.n	8004274 <__kernel_rem_pio2f+0x4ac>
 80041a4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80041a8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80041ac:	2e00      	cmp	r6, #0
 80041ae:	d167      	bne.n	8004280 <__kernel_rem_pio2f+0x4b8>
 80041b0:	edc7 6a00 	vstr	s13, [r7]
 80041b4:	ed87 7a01 	vstr	s14, [r7, #4]
 80041b8:	edc7 7a02 	vstr	s15, [r7, #8]
 80041bc:	e7d8      	b.n	8004170 <__kernel_rem_pio2f+0x3a8>
 80041be:	ab30      	add	r3, sp, #192	@ 0xc0
 80041c0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 80041c4:	440b      	add	r3, r1
 80041c6:	4622      	mov	r2, r4
 80041c8:	2a00      	cmp	r2, #0
 80041ca:	da24      	bge.n	8004216 <__kernel_rem_pio2f+0x44e>
 80041cc:	b34e      	cbz	r6, 8004222 <__kernel_rem_pio2f+0x45a>
 80041ce:	eef1 7a47 	vneg.f32	s15, s14
 80041d2:	edc7 7a00 	vstr	s15, [r7]
 80041d6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80041da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041de:	aa31      	add	r2, sp, #196	@ 0xc4
 80041e0:	2301      	movs	r3, #1
 80041e2:	429c      	cmp	r4, r3
 80041e4:	da20      	bge.n	8004228 <__kernel_rem_pio2f+0x460>
 80041e6:	b10e      	cbz	r6, 80041ec <__kernel_rem_pio2f+0x424>
 80041e8:	eef1 7a67 	vneg.f32	s15, s15
 80041ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80041f0:	e7be      	b.n	8004170 <__kernel_rem_pio2f+0x3a8>
 80041f2:	ab30      	add	r3, sp, #192	@ 0xc0
 80041f4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80040c0 <__kernel_rem_pio2f+0x2f8>
 80041f8:	440b      	add	r3, r1
 80041fa:	2c00      	cmp	r4, #0
 80041fc:	da05      	bge.n	800420a <__kernel_rem_pio2f+0x442>
 80041fe:	b10e      	cbz	r6, 8004204 <__kernel_rem_pio2f+0x43c>
 8004200:	eef1 7a67 	vneg.f32	s15, s15
 8004204:	edc7 7a00 	vstr	s15, [r7]
 8004208:	e7b2      	b.n	8004170 <__kernel_rem_pio2f+0x3a8>
 800420a:	ed33 7a01 	vldmdb	r3!, {s14}
 800420e:	3c01      	subs	r4, #1
 8004210:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004214:	e7f1      	b.n	80041fa <__kernel_rem_pio2f+0x432>
 8004216:	ed73 7a01 	vldmdb	r3!, {s15}
 800421a:	3a01      	subs	r2, #1
 800421c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004220:	e7d2      	b.n	80041c8 <__kernel_rem_pio2f+0x400>
 8004222:	eef0 7a47 	vmov.f32	s15, s14
 8004226:	e7d4      	b.n	80041d2 <__kernel_rem_pio2f+0x40a>
 8004228:	ecb2 7a01 	vldmia	r2!, {s14}
 800422c:	3301      	adds	r3, #1
 800422e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004232:	e7d6      	b.n	80041e2 <__kernel_rem_pio2f+0x41a>
 8004234:	ed72 7a01 	vldmdb	r2!, {s15}
 8004238:	edd2 6a01 	vldr	s13, [r2, #4]
 800423c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004240:	3801      	subs	r0, #1
 8004242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004246:	ed82 7a00 	vstr	s14, [r2]
 800424a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424e:	edc2 7a01 	vstr	s15, [r2, #4]
 8004252:	e79c      	b.n	800418e <__kernel_rem_pio2f+0x3c6>
 8004254:	ed73 7a01 	vldmdb	r3!, {s15}
 8004258:	edd3 6a01 	vldr	s13, [r3, #4]
 800425c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004260:	3a01      	subs	r2, #1
 8004262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004266:	ed83 7a00 	vstr	s14, [r3]
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004272:	e78f      	b.n	8004194 <__kernel_rem_pio2f+0x3cc>
 8004274:	ed33 7a01 	vldmdb	r3!, {s14}
 8004278:	3c01      	subs	r4, #1
 800427a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800427e:	e78f      	b.n	80041a0 <__kernel_rem_pio2f+0x3d8>
 8004280:	eef1 6a66 	vneg.f32	s13, s13
 8004284:	eeb1 7a47 	vneg.f32	s14, s14
 8004288:	edc7 6a00 	vstr	s13, [r7]
 800428c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004290:	eef1 7a67 	vneg.f32	s15, s15
 8004294:	e790      	b.n	80041b8 <__kernel_rem_pio2f+0x3f0>
 8004296:	bf00      	nop

08004298 <scalbnf>:
 8004298:	ee10 3a10 	vmov	r3, s0
 800429c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80042a0:	d02b      	beq.n	80042fa <scalbnf+0x62>
 80042a2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80042a6:	d302      	bcc.n	80042ae <scalbnf+0x16>
 80042a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80042ac:	4770      	bx	lr
 80042ae:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80042b2:	d123      	bne.n	80042fc <scalbnf+0x64>
 80042b4:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <scalbnf+0xb0>)
 80042b6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800434c <scalbnf+0xb4>
 80042ba:	4298      	cmp	r0, r3
 80042bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80042c0:	db17      	blt.n	80042f2 <scalbnf+0x5a>
 80042c2:	ee10 3a10 	vmov	r3, s0
 80042c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80042ca:	3a19      	subs	r2, #25
 80042cc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80042d0:	4288      	cmp	r0, r1
 80042d2:	dd15      	ble.n	8004300 <scalbnf+0x68>
 80042d4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004350 <scalbnf+0xb8>
 80042d8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004354 <scalbnf+0xbc>
 80042dc:	ee10 3a10 	vmov	r3, s0
 80042e0:	eeb0 7a67 	vmov.f32	s14, s15
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfb8      	it	lt
 80042e8:	eef0 7a66 	vmovlt.f32	s15, s13
 80042ec:	ee27 0a87 	vmul.f32	s0, s15, s14
 80042f0:	4770      	bx	lr
 80042f2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004358 <scalbnf+0xc0>
 80042f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80042fa:	4770      	bx	lr
 80042fc:	0dd2      	lsrs	r2, r2, #23
 80042fe:	e7e5      	b.n	80042cc <scalbnf+0x34>
 8004300:	4410      	add	r0, r2
 8004302:	28fe      	cmp	r0, #254	@ 0xfe
 8004304:	dce6      	bgt.n	80042d4 <scalbnf+0x3c>
 8004306:	2800      	cmp	r0, #0
 8004308:	dd06      	ble.n	8004318 <scalbnf+0x80>
 800430a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800430e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004312:	ee00 3a10 	vmov	s0, r3
 8004316:	4770      	bx	lr
 8004318:	f110 0f16 	cmn.w	r0, #22
 800431c:	da09      	bge.n	8004332 <scalbnf+0x9a>
 800431e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004358 <scalbnf+0xc0>
 8004322:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800435c <scalbnf+0xc4>
 8004326:	ee10 3a10 	vmov	r3, s0
 800432a:	eeb0 7a67 	vmov.f32	s14, s15
 800432e:	2b00      	cmp	r3, #0
 8004330:	e7d9      	b.n	80042e6 <scalbnf+0x4e>
 8004332:	3019      	adds	r0, #25
 8004334:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004338:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800433c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004360 <scalbnf+0xc8>
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	e7d7      	b.n	80042f6 <scalbnf+0x5e>
 8004346:	bf00      	nop
 8004348:	ffff3cb0 	.word	0xffff3cb0
 800434c:	4c000000 	.word	0x4c000000
 8004350:	7149f2ca 	.word	0x7149f2ca
 8004354:	f149f2ca 	.word	0xf149f2ca
 8004358:	0da24260 	.word	0x0da24260
 800435c:	8da24260 	.word	0x8da24260
 8004360:	33000000 	.word	0x33000000

08004364 <floorf>:
 8004364:	ee10 3a10 	vmov	r3, s0
 8004368:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800436c:	3a7f      	subs	r2, #127	@ 0x7f
 800436e:	2a16      	cmp	r2, #22
 8004370:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004374:	dc2b      	bgt.n	80043ce <floorf+0x6a>
 8004376:	2a00      	cmp	r2, #0
 8004378:	da12      	bge.n	80043a0 <floorf+0x3c>
 800437a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80043e0 <floorf+0x7c>
 800437e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004382:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	dd06      	ble.n	800439a <floorf+0x36>
 800438c:	2b00      	cmp	r3, #0
 800438e:	da24      	bge.n	80043da <floorf+0x76>
 8004390:	2900      	cmp	r1, #0
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <floorf+0x80>)
 8004394:	bf08      	it	eq
 8004396:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800439a:	ee00 3a10 	vmov	s0, r3
 800439e:	4770      	bx	lr
 80043a0:	4911      	ldr	r1, [pc, #68]	@ (80043e8 <floorf+0x84>)
 80043a2:	4111      	asrs	r1, r2
 80043a4:	420b      	tst	r3, r1
 80043a6:	d0fa      	beq.n	800439e <floorf+0x3a>
 80043a8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80043e0 <floorf+0x7c>
 80043ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80043b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	ddef      	ble.n	800439a <floorf+0x36>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfbe      	ittt	lt
 80043be:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80043c2:	fa40 f202 	asrlt.w	r2, r0, r2
 80043c6:	189b      	addlt	r3, r3, r2
 80043c8:	ea23 0301 	bic.w	r3, r3, r1
 80043cc:	e7e5      	b.n	800439a <floorf+0x36>
 80043ce:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80043d2:	d3e4      	bcc.n	800439e <floorf+0x3a>
 80043d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80043d8:	4770      	bx	lr
 80043da:	2300      	movs	r3, #0
 80043dc:	e7dd      	b.n	800439a <floorf+0x36>
 80043de:	bf00      	nop
 80043e0:	7149f2ca 	.word	0x7149f2ca
 80043e4:	bf800000 	.word	0xbf800000
 80043e8:	007fffff 	.word	0x007fffff

080043ec <_init>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr

080043f8 <_fini>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	bf00      	nop
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr
